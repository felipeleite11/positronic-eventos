
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  expiresAt: 'expiresAt',
  token: 'token',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  accessTokenExpiresAt: 'accessTokenExpiresAt',
  refreshTokenExpiresAt: 'refreshTokenExpiresAt',
  scope: 'scope',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  gender: 'gender',
  birthdate: 'birthdate',
  cpf: 'cpf',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  mapLink: 'mapLink',
  state: 'state',
  city: 'city',
  district: 'district',
  street: 'street',
  number: 'number',
  complement: 'complement',
  zipcode: 'zipcode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MeetupScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  locationName: 'locationName',
  start: 'start',
  end: 'end',
  addressId: 'addressId',
  categoryId: 'categoryId',
  creatorId: 'creatorId',
  certificateModelId: 'certificateModelId',
  image: 'image',
  workload: 'workload',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificateModelScalarFieldEnum = {
  id: 'id',
  imageLink: 'imageLink',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.MeetupInviteSheetScalarFieldEnum = {
  id: 'id',
  link: 'link',
  meetupId: 'meetupId'
};

exports.Prisma.MeetupRoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  subscriptionPrice: 'subscriptionPrice',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MeetupAdminScalarFieldEnum = {
  id: 'id',
  meetupId: 'meetupId',
  personId: 'personId',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MeetupFollowerScalarFieldEnum = {
  id: 'id',
  meetupId: 'meetupId',
  personId: 'personId',
  createdAt: 'createdAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  meetupId: 'meetupId',
  meetupRoleId: 'meetupRoleId',
  certificateLink: 'certificateLink',
  presenceConfirmation: 'presenceConfirmation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InviteScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  meetupId: 'meetupId',
  link: 'link',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubscriptionPaymentScalarFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  paymentId: 'paymentId',
  price: 'price',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CertificateScalarFieldEnum = {
  id: 'id',
  personId: 'personId',
  meetupId: 'meetupId',
  link: 'link',
  securityCode: 'securityCode',
  datetime: 'datetime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MeetupMediaScalarFieldEnum = {
  id: 'id',
  meetupId: 'meetupId',
  personId: 'personId',
  link: 'link',
  datetime: 'datetime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.GuestLoadScalarFieldEnum = {
  id: 'id',
  link: 'link',
  meetupId: 'meetupId',
  personId: 'personId',
  datetime: 'datetime',
  count: 'count',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  image: 'image'
};

exports.Prisma.SessionOrderByRelevanceFieldEnum = {
  id: 'id',
  token: 'token',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.AccountOrderByRelevanceFieldEnum = {
  id: 'id',
  accountId: 'accountId',
  providerId: 'providerId',
  userId: 'userId',
  accessToken: 'accessToken',
  refreshToken: 'refreshToken',
  idToken: 'idToken',
  scope: 'scope',
  password: 'password'
};

exports.Prisma.VerificationOrderByRelevanceFieldEnum = {
  id: 'id',
  identifier: 'identifier',
  value: 'value'
};

exports.Prisma.PersonOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  gender: 'gender',
  cpf: 'cpf',
  userId: 'userId'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  id: 'id',
  mapLink: 'mapLink',
  state: 'state',
  city: 'city',
  district: 'district',
  street: 'street',
  number: 'number',
  complement: 'complement',
  zipcode: 'zipcode'
};

exports.Prisma.MeetupOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  locationName: 'locationName',
  addressId: 'addressId',
  categoryId: 'categoryId',
  creatorId: 'creatorId',
  certificateModelId: 'certificateModelId',
  image: 'image'
};

exports.Prisma.CertificateModelOrderByRelevanceFieldEnum = {
  id: 'id',
  imageLink: 'imageLink',
  content: 'content'
};

exports.Prisma.MeetupInviteSheetOrderByRelevanceFieldEnum = {
  id: 'id',
  link: 'link',
  meetupId: 'meetupId'
};

exports.Prisma.MeetupRoleOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.MeetupAdminOrderByRelevanceFieldEnum = {
  id: 'id',
  meetupId: 'meetupId',
  personId: 'personId',
  role: 'role'
};

exports.Prisma.MeetupFollowerOrderByRelevanceFieldEnum = {
  id: 'id',
  meetupId: 'meetupId',
  personId: 'personId'
};

exports.Prisma.CategoryOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.SubscriptionOrderByRelevanceFieldEnum = {
  id: 'id',
  personId: 'personId',
  meetupId: 'meetupId',
  meetupRoleId: 'meetupRoleId',
  certificateLink: 'certificateLink'
};

exports.Prisma.InviteOrderByRelevanceFieldEnum = {
  id: 'id',
  personId: 'personId',
  meetupId: 'meetupId',
  link: 'link'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id'
};

exports.Prisma.SubscriptionPaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  subscriptionId: 'subscriptionId',
  paymentId: 'paymentId'
};

exports.Prisma.CertificateOrderByRelevanceFieldEnum = {
  id: 'id',
  personId: 'personId',
  meetupId: 'meetupId',
  link: 'link',
  securityCode: 'securityCode'
};

exports.Prisma.MeetupMediaOrderByRelevanceFieldEnum = {
  id: 'id',
  meetupId: 'meetupId',
  personId: 'personId',
  link: 'link'
};

exports.Prisma.GuestLoadOrderByRelevanceFieldEnum = {
  id: 'id',
  link: 'link',
  meetupId: 'meetupId',
  personId: 'personId'
};
exports.MeetupStatus = exports.$Enums.MeetupStatus = {
  created: 'created',
  in_subscription: 'in_subscription',
  in_progress: 'in_progress',
  finished: 'finished',
  cancelled: 'cancelled'
};

exports.Prisma.ModelName = {
  User: 'User',
  Session: 'Session',
  Account: 'Account',
  Verification: 'Verification',
  Person: 'Person',
  Address: 'Address',
  Meetup: 'Meetup',
  CertificateModel: 'CertificateModel',
  MeetupInviteSheet: 'MeetupInviteSheet',
  MeetupRole: 'MeetupRole',
  MeetupAdmin: 'MeetupAdmin',
  MeetupFollower: 'MeetupFollower',
  Category: 'Category',
  Subscription: 'Subscription',
  Invite: 'Invite',
  Payment: 'Payment',
  SubscriptionPayment: 'SubscriptionPayment',
  Certificate: 'Certificate',
  MeetupMedia: 'MeetupMedia',
  GuestLoad: 'GuestLoad'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
