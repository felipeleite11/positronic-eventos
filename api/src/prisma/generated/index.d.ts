
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Verification
 * 
 */
export type Verification = $Result.DefaultSelection<Prisma.$VerificationPayload>
/**
 * Model Person
 * 
 */
export type Person = $Result.DefaultSelection<Prisma.$PersonPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model Meetup
 * 
 */
export type Meetup = $Result.DefaultSelection<Prisma.$MeetupPayload>
/**
 * Model MeetupNotification
 * 
 */
export type MeetupNotification = $Result.DefaultSelection<Prisma.$MeetupNotificationPayload>
/**
 * Model CertificateModel
 * 
 */
export type CertificateModel = $Result.DefaultSelection<Prisma.$CertificateModelPayload>
/**
 * Model MeetupInviteSheet
 * 
 */
export type MeetupInviteSheet = $Result.DefaultSelection<Prisma.$MeetupInviteSheetPayload>
/**
 * Model MeetupRole
 * 
 */
export type MeetupRole = $Result.DefaultSelection<Prisma.$MeetupRolePayload>
/**
 * Model MeetupAdmin
 * 
 */
export type MeetupAdmin = $Result.DefaultSelection<Prisma.$MeetupAdminPayload>
/**
 * Model MeetupFollower
 * 
 */
export type MeetupFollower = $Result.DefaultSelection<Prisma.$MeetupFollowerPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Subscription
 * 
 */
export type Subscription = $Result.DefaultSelection<Prisma.$SubscriptionPayload>
/**
 * Model Invite
 * 
 */
export type Invite = $Result.DefaultSelection<Prisma.$InvitePayload>
/**
 * Model Payment
 * 
 */
export type Payment = $Result.DefaultSelection<Prisma.$PaymentPayload>
/**
 * Model SubscriptionPayment
 * 
 */
export type SubscriptionPayment = $Result.DefaultSelection<Prisma.$SubscriptionPaymentPayload>
/**
 * Model Certificate
 * 
 */
export type Certificate = $Result.DefaultSelection<Prisma.$CertificatePayload>
/**
 * Model MeetupMedia
 * 
 */
export type MeetupMedia = $Result.DefaultSelection<Prisma.$MeetupMediaPayload>
/**
 * Model GuestLoad
 * 
 */
export type GuestLoad = $Result.DefaultSelection<Prisma.$GuestLoadPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const MeetupStatus: {
  created: 'created',
  in_subscription: 'in_subscription',
  in_progress: 'in_progress',
  finished: 'finished',
  cancelled: 'cancelled'
};

export type MeetupStatus = (typeof MeetupStatus)[keyof typeof MeetupStatus]

}

export type MeetupStatus = $Enums.MeetupStatus

export const MeetupStatus: typeof $Enums.MeetupStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetup`: Exposes CRUD operations for the **Meetup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Meetups
    * const meetups = await prisma.meetup.findMany()
    * ```
    */
  get meetup(): Prisma.MeetupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetupNotification`: Exposes CRUD operations for the **MeetupNotification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetupNotifications
    * const meetupNotifications = await prisma.meetupNotification.findMany()
    * ```
    */
  get meetupNotification(): Prisma.MeetupNotificationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificateModel`: Exposes CRUD operations for the **CertificateModel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CertificateModels
    * const certificateModels = await prisma.certificateModel.findMany()
    * ```
    */
  get certificateModel(): Prisma.CertificateModelDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetupInviteSheet`: Exposes CRUD operations for the **MeetupInviteSheet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetupInviteSheets
    * const meetupInviteSheets = await prisma.meetupInviteSheet.findMany()
    * ```
    */
  get meetupInviteSheet(): Prisma.MeetupInviteSheetDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetupRole`: Exposes CRUD operations for the **MeetupRole** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetupRoles
    * const meetupRoles = await prisma.meetupRole.findMany()
    * ```
    */
  get meetupRole(): Prisma.MeetupRoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetupAdmin`: Exposes CRUD operations for the **MeetupAdmin** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetupAdmins
    * const meetupAdmins = await prisma.meetupAdmin.findMany()
    * ```
    */
  get meetupAdmin(): Prisma.MeetupAdminDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetupFollower`: Exposes CRUD operations for the **MeetupFollower** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetupFollowers
    * const meetupFollowers = await prisma.meetupFollower.findMany()
    * ```
    */
  get meetupFollower(): Prisma.MeetupFollowerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscription`: Exposes CRUD operations for the **Subscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Subscriptions
    * const subscriptions = await prisma.subscription.findMany()
    * ```
    */
  get subscription(): Prisma.SubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.invite`: Exposes CRUD operations for the **Invite** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Invites
    * const invites = await prisma.invite.findMany()
    * ```
    */
  get invite(): Prisma.InviteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payment`: Exposes CRUD operations for the **Payment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Payments
    * const payments = await prisma.payment.findMany()
    * ```
    */
  get payment(): Prisma.PaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.subscriptionPayment`: Exposes CRUD operations for the **SubscriptionPayment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SubscriptionPayments
    * const subscriptionPayments = await prisma.subscriptionPayment.findMany()
    * ```
    */
  get subscriptionPayment(): Prisma.SubscriptionPaymentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.certificate`: Exposes CRUD operations for the **Certificate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Certificates
    * const certificates = await prisma.certificate.findMany()
    * ```
    */
  get certificate(): Prisma.CertificateDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.meetupMedia`: Exposes CRUD operations for the **MeetupMedia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MeetupMedias
    * const meetupMedias = await prisma.meetupMedia.findMany()
    * ```
    */
  get meetupMedia(): Prisma.MeetupMediaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.guestLoad`: Exposes CRUD operations for the **GuestLoad** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GuestLoads
    * const guestLoads = await prisma.guestLoad.findMany()
    * ```
    */
  get guestLoad(): Prisma.GuestLoadDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Session: 'Session',
    Account: 'Account',
    Verification: 'Verification',
    Person: 'Person',
    Address: 'Address',
    Meetup: 'Meetup',
    MeetupNotification: 'MeetupNotification',
    CertificateModel: 'CertificateModel',
    MeetupInviteSheet: 'MeetupInviteSheet',
    MeetupRole: 'MeetupRole',
    MeetupAdmin: 'MeetupAdmin',
    MeetupFollower: 'MeetupFollower',
    Category: 'Category',
    Subscription: 'Subscription',
    Invite: 'Invite',
    Payment: 'Payment',
    SubscriptionPayment: 'SubscriptionPayment',
    Certificate: 'Certificate',
    MeetupMedia: 'MeetupMedia',
    GuestLoad: 'GuestLoad'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "session" | "account" | "verification" | "person" | "address" | "meetup" | "meetupNotification" | "certificateModel" | "meetupInviteSheet" | "meetupRole" | "meetupAdmin" | "meetupFollower" | "category" | "subscription" | "invite" | "payment" | "subscriptionPayment" | "certificate" | "meetupMedia" | "guestLoad"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: Prisma.$VerificationPayload<ExtArgs>
        fields: Prisma.VerificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      Person: {
        payload: Prisma.$PersonPayload<ExtArgs>
        fields: Prisma.PersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findFirst: {
            args: Prisma.PersonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findMany: {
            args: Prisma.PersonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          create: {
            args: Prisma.PersonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          createMany: {
            args: Prisma.PersonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PersonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          update: {
            args: Prisma.PersonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          deleteMany: {
            args: Prisma.PersonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PersonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          aggregate: {
            args: Prisma.PersonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerson>
          }
          groupBy: {
            args: Prisma.PersonGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonCountArgs<ExtArgs>
            result: $Utils.Optional<PersonCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          createMany: {
            args: Prisma.AddressCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
      Meetup: {
        payload: Prisma.$MeetupPayload<ExtArgs>
        fields: Prisma.MeetupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload>
          }
          findFirst: {
            args: Prisma.MeetupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload>
          }
          findMany: {
            args: Prisma.MeetupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload>[]
          }
          create: {
            args: Prisma.MeetupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload>
          }
          createMany: {
            args: Prisma.MeetupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MeetupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload>
          }
          update: {
            args: Prisma.MeetupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload>
          }
          deleteMany: {
            args: Prisma.MeetupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupPayload>
          }
          aggregate: {
            args: Prisma.MeetupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetup>
          }
          groupBy: {
            args: Prisma.MeetupGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetupGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupCountArgs<ExtArgs>
            result: $Utils.Optional<MeetupCountAggregateOutputType> | number
          }
        }
      }
      MeetupNotification: {
        payload: Prisma.$MeetupNotificationPayload<ExtArgs>
        fields: Prisma.MeetupNotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupNotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupNotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload>
          }
          findFirst: {
            args: Prisma.MeetupNotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupNotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload>
          }
          findMany: {
            args: Prisma.MeetupNotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload>[]
          }
          create: {
            args: Prisma.MeetupNotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload>
          }
          createMany: {
            args: Prisma.MeetupNotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MeetupNotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload>
          }
          update: {
            args: Prisma.MeetupNotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload>
          }
          deleteMany: {
            args: Prisma.MeetupNotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupNotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetupNotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupNotificationPayload>
          }
          aggregate: {
            args: Prisma.MeetupNotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetupNotification>
          }
          groupBy: {
            args: Prisma.MeetupNotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetupNotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupNotificationCountArgs<ExtArgs>
            result: $Utils.Optional<MeetupNotificationCountAggregateOutputType> | number
          }
        }
      }
      CertificateModel: {
        payload: Prisma.$CertificateModelPayload<ExtArgs>
        fields: Prisma.CertificateModelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateModelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateModelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload>
          }
          findFirst: {
            args: Prisma.CertificateModelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateModelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload>
          }
          findMany: {
            args: Prisma.CertificateModelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload>[]
          }
          create: {
            args: Prisma.CertificateModelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload>
          }
          createMany: {
            args: Prisma.CertificateModelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CertificateModelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload>
          }
          update: {
            args: Prisma.CertificateModelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload>
          }
          deleteMany: {
            args: Prisma.CertificateModelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateModelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CertificateModelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificateModelPayload>
          }
          aggregate: {
            args: Prisma.CertificateModelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificateModel>
          }
          groupBy: {
            args: Prisma.CertificateModelGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateModelGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateModelCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateModelCountAggregateOutputType> | number
          }
        }
      }
      MeetupInviteSheet: {
        payload: Prisma.$MeetupInviteSheetPayload<ExtArgs>
        fields: Prisma.MeetupInviteSheetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupInviteSheetFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupInviteSheetFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload>
          }
          findFirst: {
            args: Prisma.MeetupInviteSheetFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupInviteSheetFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload>
          }
          findMany: {
            args: Prisma.MeetupInviteSheetFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload>[]
          }
          create: {
            args: Prisma.MeetupInviteSheetCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload>
          }
          createMany: {
            args: Prisma.MeetupInviteSheetCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MeetupInviteSheetDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload>
          }
          update: {
            args: Prisma.MeetupInviteSheetUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload>
          }
          deleteMany: {
            args: Prisma.MeetupInviteSheetDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupInviteSheetUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetupInviteSheetUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupInviteSheetPayload>
          }
          aggregate: {
            args: Prisma.MeetupInviteSheetAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetupInviteSheet>
          }
          groupBy: {
            args: Prisma.MeetupInviteSheetGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetupInviteSheetGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupInviteSheetCountArgs<ExtArgs>
            result: $Utils.Optional<MeetupInviteSheetCountAggregateOutputType> | number
          }
        }
      }
      MeetupRole: {
        payload: Prisma.$MeetupRolePayload<ExtArgs>
        fields: Prisma.MeetupRoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupRoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupRoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload>
          }
          findFirst: {
            args: Prisma.MeetupRoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupRoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload>
          }
          findMany: {
            args: Prisma.MeetupRoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload>[]
          }
          create: {
            args: Prisma.MeetupRoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload>
          }
          createMany: {
            args: Prisma.MeetupRoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MeetupRoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload>
          }
          update: {
            args: Prisma.MeetupRoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload>
          }
          deleteMany: {
            args: Prisma.MeetupRoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupRoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetupRoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupRolePayload>
          }
          aggregate: {
            args: Prisma.MeetupRoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetupRole>
          }
          groupBy: {
            args: Prisma.MeetupRoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetupRoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupRoleCountArgs<ExtArgs>
            result: $Utils.Optional<MeetupRoleCountAggregateOutputType> | number
          }
        }
      }
      MeetupAdmin: {
        payload: Prisma.$MeetupAdminPayload<ExtArgs>
        fields: Prisma.MeetupAdminFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupAdminFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupAdminFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload>
          }
          findFirst: {
            args: Prisma.MeetupAdminFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupAdminFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload>
          }
          findMany: {
            args: Prisma.MeetupAdminFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload>[]
          }
          create: {
            args: Prisma.MeetupAdminCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload>
          }
          createMany: {
            args: Prisma.MeetupAdminCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MeetupAdminDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload>
          }
          update: {
            args: Prisma.MeetupAdminUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload>
          }
          deleteMany: {
            args: Prisma.MeetupAdminDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupAdminUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetupAdminUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupAdminPayload>
          }
          aggregate: {
            args: Prisma.MeetupAdminAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetupAdmin>
          }
          groupBy: {
            args: Prisma.MeetupAdminGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetupAdminGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupAdminCountArgs<ExtArgs>
            result: $Utils.Optional<MeetupAdminCountAggregateOutputType> | number
          }
        }
      }
      MeetupFollower: {
        payload: Prisma.$MeetupFollowerPayload<ExtArgs>
        fields: Prisma.MeetupFollowerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupFollowerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupFollowerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload>
          }
          findFirst: {
            args: Prisma.MeetupFollowerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupFollowerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload>
          }
          findMany: {
            args: Prisma.MeetupFollowerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload>[]
          }
          create: {
            args: Prisma.MeetupFollowerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload>
          }
          createMany: {
            args: Prisma.MeetupFollowerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MeetupFollowerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload>
          }
          update: {
            args: Prisma.MeetupFollowerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload>
          }
          deleteMany: {
            args: Prisma.MeetupFollowerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupFollowerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetupFollowerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupFollowerPayload>
          }
          aggregate: {
            args: Prisma.MeetupFollowerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetupFollower>
          }
          groupBy: {
            args: Prisma.MeetupFollowerGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetupFollowerGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupFollowerCountArgs<ExtArgs>
            result: $Utils.Optional<MeetupFollowerCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Subscription: {
        payload: Prisma.$SubscriptionPayload<ExtArgs>
        fields: Prisma.SubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          findMany: {
            args: Prisma.SubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>[]
          }
          create: {
            args: Prisma.SubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          createMany: {
            args: Prisma.SubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          update: {
            args: Prisma.SubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscription>
          }
          groupBy: {
            args: Prisma.SubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionCountAggregateOutputType> | number
          }
        }
      }
      Invite: {
        payload: Prisma.$InvitePayload<ExtArgs>
        fields: Prisma.InviteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InviteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InviteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          findFirst: {
            args: Prisma.InviteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InviteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          findMany: {
            args: Prisma.InviteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>[]
          }
          create: {
            args: Prisma.InviteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          createMany: {
            args: Prisma.InviteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.InviteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          update: {
            args: Prisma.InviteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          deleteMany: {
            args: Prisma.InviteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InviteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InviteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InvitePayload>
          }
          aggregate: {
            args: Prisma.InviteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInvite>
          }
          groupBy: {
            args: Prisma.InviteGroupByArgs<ExtArgs>
            result: $Utils.Optional<InviteGroupByOutputType>[]
          }
          count: {
            args: Prisma.InviteCountArgs<ExtArgs>
            result: $Utils.Optional<InviteCountAggregateOutputType> | number
          }
        }
      }
      Payment: {
        payload: Prisma.$PaymentPayload<ExtArgs>
        fields: Prisma.PaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findFirst: {
            args: Prisma.PaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          findMany: {
            args: Prisma.PaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>[]
          }
          create: {
            args: Prisma.PaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          createMany: {
            args: Prisma.PaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.PaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          update: {
            args: Prisma.PaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          deleteMany: {
            args: Prisma.PaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PaymentPayload>
          }
          aggregate: {
            args: Prisma.PaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayment>
          }
          groupBy: {
            args: Prisma.PaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PaymentCountArgs<ExtArgs>
            result: $Utils.Optional<PaymentCountAggregateOutputType> | number
          }
        }
      }
      SubscriptionPayment: {
        payload: Prisma.$SubscriptionPaymentPayload<ExtArgs>
        fields: Prisma.SubscriptionPaymentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubscriptionPaymentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubscriptionPaymentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload>
          }
          findFirst: {
            args: Prisma.SubscriptionPaymentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubscriptionPaymentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload>
          }
          findMany: {
            args: Prisma.SubscriptionPaymentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload>[]
          }
          create: {
            args: Prisma.SubscriptionPaymentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload>
          }
          createMany: {
            args: Prisma.SubscriptionPaymentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.SubscriptionPaymentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload>
          }
          update: {
            args: Prisma.SubscriptionPaymentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload>
          }
          deleteMany: {
            args: Prisma.SubscriptionPaymentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SubscriptionPaymentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SubscriptionPaymentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SubscriptionPaymentPayload>
          }
          aggregate: {
            args: Prisma.SubscriptionPaymentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSubscriptionPayment>
          }
          groupBy: {
            args: Prisma.SubscriptionPaymentGroupByArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPaymentGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubscriptionPaymentCountArgs<ExtArgs>
            result: $Utils.Optional<SubscriptionPaymentCountAggregateOutputType> | number
          }
        }
      }
      Certificate: {
        payload: Prisma.$CertificatePayload<ExtArgs>
        fields: Prisma.CertificateFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CertificateFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CertificateFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findFirst: {
            args: Prisma.CertificateFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CertificateFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          findMany: {
            args: Prisma.CertificateFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>[]
          }
          create: {
            args: Prisma.CertificateCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          createMany: {
            args: Prisma.CertificateCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CertificateDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          update: {
            args: Prisma.CertificateUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          deleteMany: {
            args: Prisma.CertificateDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CertificateUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CertificateUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CertificatePayload>
          }
          aggregate: {
            args: Prisma.CertificateAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCertificate>
          }
          groupBy: {
            args: Prisma.CertificateGroupByArgs<ExtArgs>
            result: $Utils.Optional<CertificateGroupByOutputType>[]
          }
          count: {
            args: Prisma.CertificateCountArgs<ExtArgs>
            result: $Utils.Optional<CertificateCountAggregateOutputType> | number
          }
        }
      }
      MeetupMedia: {
        payload: Prisma.$MeetupMediaPayload<ExtArgs>
        fields: Prisma.MeetupMediaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MeetupMediaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MeetupMediaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload>
          }
          findFirst: {
            args: Prisma.MeetupMediaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MeetupMediaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload>
          }
          findMany: {
            args: Prisma.MeetupMediaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload>[]
          }
          create: {
            args: Prisma.MeetupMediaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload>
          }
          createMany: {
            args: Prisma.MeetupMediaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.MeetupMediaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload>
          }
          update: {
            args: Prisma.MeetupMediaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload>
          }
          deleteMany: {
            args: Prisma.MeetupMediaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MeetupMediaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MeetupMediaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MeetupMediaPayload>
          }
          aggregate: {
            args: Prisma.MeetupMediaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMeetupMedia>
          }
          groupBy: {
            args: Prisma.MeetupMediaGroupByArgs<ExtArgs>
            result: $Utils.Optional<MeetupMediaGroupByOutputType>[]
          }
          count: {
            args: Prisma.MeetupMediaCountArgs<ExtArgs>
            result: $Utils.Optional<MeetupMediaCountAggregateOutputType> | number
          }
        }
      }
      GuestLoad: {
        payload: Prisma.$GuestLoadPayload<ExtArgs>
        fields: Prisma.GuestLoadFieldRefs
        operations: {
          findUnique: {
            args: Prisma.GuestLoadFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.GuestLoadFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload>
          }
          findFirst: {
            args: Prisma.GuestLoadFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.GuestLoadFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload>
          }
          findMany: {
            args: Prisma.GuestLoadFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload>[]
          }
          create: {
            args: Prisma.GuestLoadCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload>
          }
          createMany: {
            args: Prisma.GuestLoadCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.GuestLoadDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload>
          }
          update: {
            args: Prisma.GuestLoadUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload>
          }
          deleteMany: {
            args: Prisma.GuestLoadDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.GuestLoadUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.GuestLoadUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$GuestLoadPayload>
          }
          aggregate: {
            args: Prisma.GuestLoadAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGuestLoad>
          }
          groupBy: {
            args: Prisma.GuestLoadGroupByArgs<ExtArgs>
            result: $Utils.Optional<GuestLoadGroupByOutputType>[]
          }
          count: {
            args: Prisma.GuestLoadCountArgs<ExtArgs>
            result: $Utils.Optional<GuestLoadCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    session?: SessionOmit
    account?: AccountOmit
    verification?: VerificationOmit
    person?: PersonOmit
    address?: AddressOmit
    meetup?: MeetupOmit
    meetupNotification?: MeetupNotificationOmit
    certificateModel?: CertificateModelOmit
    meetupInviteSheet?: MeetupInviteSheetOmit
    meetupRole?: MeetupRoleOmit
    meetupAdmin?: MeetupAdminOmit
    meetupFollower?: MeetupFollowerOmit
    category?: CategoryOmit
    subscription?: SubscriptionOmit
    invite?: InviteOmit
    payment?: PaymentOmit
    subscriptionPayment?: SubscriptionPaymentOmit
    certificate?: CertificateOmit
    meetupMedia?: MeetupMediaOmit
    guestLoad?: GuestLoadOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    sessions: number
    accounts: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }


  /**
   * Count Type PersonCountOutputType
   */

  export type PersonCountOutputType = {
    meetupAdmins: number
    subscriptions: number
    invites: number
    certificates: number
    meetupMedias: number
    guestLoads: number
    created_meetups: number
    followingMeetups: number
    notifications: number
  }

  export type PersonCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetupAdmins?: boolean | PersonCountOutputTypeCountMeetupAdminsArgs
    subscriptions?: boolean | PersonCountOutputTypeCountSubscriptionsArgs
    invites?: boolean | PersonCountOutputTypeCountInvitesArgs
    certificates?: boolean | PersonCountOutputTypeCountCertificatesArgs
    meetupMedias?: boolean | PersonCountOutputTypeCountMeetupMediasArgs
    guestLoads?: boolean | PersonCountOutputTypeCountGuestLoadsArgs
    created_meetups?: boolean | PersonCountOutputTypeCountCreated_meetupsArgs
    followingMeetups?: boolean | PersonCountOutputTypeCountFollowingMeetupsArgs
    notifications?: boolean | PersonCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonCountOutputType
     */
    select?: PersonCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountMeetupAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupAdminWhereInput
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountCertificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountMeetupMediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupMediaWhereInput
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountGuestLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuestLoadWhereInput
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountCreated_meetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupWhereInput
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountFollowingMeetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupFollowerWhereInput
  }

  /**
   * PersonCountOutputType without action
   */
  export type PersonCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupNotificationWhereInput
  }


  /**
   * Count Type AddressCountOutputType
   */

  export type AddressCountOutputType = {
    meetups: number
  }

  export type AddressCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetups?: boolean | AddressCountOutputTypeCountMeetupsArgs
  }

  // Custom InputTypes
  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AddressCountOutputType
     */
    select?: AddressCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * AddressCountOutputType without action
   */
  export type AddressCountOutputTypeCountMeetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupWhereInput
  }


  /**
   * Count Type MeetupCountOutputType
   */

  export type MeetupCountOutputType = {
    meetupAdmins: number
    subscriptions: number
    invites: number
    certificates: number
    meetupMedias: number
    guestLoads: number
    followers: number
    inviteSheets: number
    notifications: number
  }

  export type MeetupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetupAdmins?: boolean | MeetupCountOutputTypeCountMeetupAdminsArgs
    subscriptions?: boolean | MeetupCountOutputTypeCountSubscriptionsArgs
    invites?: boolean | MeetupCountOutputTypeCountInvitesArgs
    certificates?: boolean | MeetupCountOutputTypeCountCertificatesArgs
    meetupMedias?: boolean | MeetupCountOutputTypeCountMeetupMediasArgs
    guestLoads?: boolean | MeetupCountOutputTypeCountGuestLoadsArgs
    followers?: boolean | MeetupCountOutputTypeCountFollowersArgs
    inviteSheets?: boolean | MeetupCountOutputTypeCountInviteSheetsArgs
    notifications?: boolean | MeetupCountOutputTypeCountNotificationsArgs
  }

  // Custom InputTypes
  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupCountOutputType
     */
    select?: MeetupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountMeetupAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupAdminWhereInput
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountInvitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountCertificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountMeetupMediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupMediaWhereInput
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountGuestLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuestLoadWhereInput
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountFollowersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupFollowerWhereInput
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountInviteSheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupInviteSheetWhereInput
  }

  /**
   * MeetupCountOutputType without action
   */
  export type MeetupCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupNotificationWhereInput
  }


  /**
   * Count Type MeetupRoleCountOutputType
   */

  export type MeetupRoleCountOutputType = {
    subscriptions: number
  }

  export type MeetupRoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | MeetupRoleCountOutputTypeCountSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * MeetupRoleCountOutputType without action
   */
  export type MeetupRoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRoleCountOutputType
     */
    select?: MeetupRoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MeetupRoleCountOutputType without action
   */
  export type MeetupRoleCountOutputTypeCountSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    meetups: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetups?: boolean | CategoryCountOutputTypeCountMeetupsArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountMeetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupWhereInput
  }


  /**
   * Count Type SubscriptionCountOutputType
   */

  export type SubscriptionCountOutputType = {
    subscriptionPayments: number
  }

  export type SubscriptionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptionPayments?: boolean | SubscriptionCountOutputTypeCountSubscriptionPaymentsArgs
  }

  // Custom InputTypes
  /**
   * SubscriptionCountOutputType without action
   */
  export type SubscriptionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionCountOutputType
     */
    select?: SubscriptionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SubscriptionCountOutputType without action
   */
  export type SubscriptionCountOutputTypeCountSubscriptionPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionPaymentWhereInput
  }


  /**
   * Count Type PaymentCountOutputType
   */

  export type PaymentCountOutputType = {
    subscriptionPayments: number
  }

  export type PaymentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptionPayments?: boolean | PaymentCountOutputTypeCountSubscriptionPaymentsArgs
  }

  // Custom InputTypes
  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PaymentCountOutputType
     */
    select?: PaymentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PaymentCountOutputType without action
   */
  export type PaymentCountOutputTypeCountSubscriptionPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionPaymentWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: boolean | null
    image: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    emailVerified: boolean
    image: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    person?: boolean | User$personArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "emailVerified" | "image" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    accounts?: boolean | User$accountsArgs<ExtArgs>
    person?: boolean | User$personArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      person: Prisma.$PersonPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      emailVerified: boolean
      image: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    person<T extends User$personArgs<ExtArgs> = {}>(args?: Subset<T, User$personArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'Boolean'>
    readonly image: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.person
   */
  export type User$personArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    where?: PersonWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    expiresAt: Date | null
    token: string | null
    createdAt: Date | null
    updatedAt: Date | null
    ipAddress: string | null
    userAgent: string | null
    userId: string | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    expiresAt: number
    token: number
    createdAt: number
    updatedAt: number
    ipAddress: number
    userAgent: number
    userId: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    expiresAt?: true
    token?: true
    createdAt?: true
    updatedAt?: true
    ipAddress?: true
    userAgent?: true
    userId?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    expiresAt: Date
    token: string
    createdAt: Date
    updatedAt: Date
    ipAddress: string | null
    userAgent: string | null
    userId: string
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>



  export type SessionSelectScalar = {
    id?: boolean
    expiresAt?: boolean
    token?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    userId?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "expiresAt" | "token" | "createdAt" | "updatedAt" | "ipAddress" | "userAgent" | "userId", ExtArgs["result"]["session"]>
  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      expiresAt: Date
      token: string
      createdAt: Date
      updatedAt: Date
      ipAddress: string | null
      userAgent: string | null
      userId: string
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly expiresAt: FieldRef<"Session", 'DateTime'>
    readonly token: FieldRef<"Session", 'String'>
    readonly createdAt: FieldRef<"Session", 'DateTime'>
    readonly updatedAt: FieldRef<"Session", 'DateTime'>
    readonly ipAddress: FieldRef<"Session", 'String'>
    readonly userAgent: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    accountId: string | null
    providerId: string | null
    userId: string | null
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    accountId: number
    providerId: number
    userId: number
    accessToken: number
    refreshToken: number
    idToken: number
    accessTokenExpiresAt: number
    refreshTokenExpiresAt: number
    scope: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountMinAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    accountId?: true
    providerId?: true
    userId?: true
    accessToken?: true
    refreshToken?: true
    idToken?: true
    accessTokenExpiresAt?: true
    refreshTokenExpiresAt?: true
    scope?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken: string | null
    refreshToken: string | null
    idToken: string | null
    accessTokenExpiresAt: Date | null
    refreshTokenExpiresAt: Date | null
    scope: string | null
    password: string | null
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>



  export type AccountSelectScalar = {
    id?: boolean
    accountId?: boolean
    providerId?: boolean
    userId?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    idToken?: boolean
    accessTokenExpiresAt?: boolean
    refreshTokenExpiresAt?: boolean
    scope?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountId" | "providerId" | "userId" | "accessToken" | "refreshToken" | "idToken" | "accessTokenExpiresAt" | "refreshTokenExpiresAt" | "scope" | "password" | "createdAt" | "updatedAt", ExtArgs["result"]["account"]>
  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountId: string
      providerId: string
      userId: string
      accessToken: string | null
      refreshToken: string | null
      idToken: string | null
      accessTokenExpiresAt: Date | null
      refreshTokenExpiresAt: Date | null
      scope: string | null
      password: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }

  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccountFindUniqueArgs>(args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Account that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs>(args: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccountFindFirstArgs>(args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs>(args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccountFindManyArgs>(args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
     */
    create<T extends AccountCreateArgs>(args: SelectSubset<T, AccountCreateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Accounts.
     * @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     * @example
     * // Create many Accounts
     * const account = await prisma.account.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccountCreateManyArgs>(args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
     */
    delete<T extends AccountDeleteArgs>(args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccountUpdateArgs>(args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccountDeleteManyArgs>(args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccountUpdateManyArgs>(args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
     */
    upsert<T extends AccountUpsertArgs>(args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Account model
   */
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly accountId: FieldRef<"Account", 'String'>
    readonly providerId: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly accessToken: FieldRef<"Account", 'String'>
    readonly refreshToken: FieldRef<"Account", 'String'>
    readonly idToken: FieldRef<"Account", 'String'>
    readonly accessTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly refreshTokenExpiresAt: FieldRef<"Account", 'DateTime'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly password: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to update.
     */
    limit?: number
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
    /**
     * Limit how many Accounts to delete.
     */
    limit?: number
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Account
     */
    omit?: AccountOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Verification
   */

  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    identifier: string | null
    value: string | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    identifier: number
    value: number
    expiresAt: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    identifier?: true
    value?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: VerificationOrderByWithAggregationInput | VerificationOrderByWithAggregationInput[]
    by: VerificationScalarFieldEnum[] | VerificationScalarFieldEnum
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }

  export type VerificationGroupByOutputType = {
    id: string
    identifier: string
    value: string
    expiresAt: Date
    createdAt: Date
    updatedAt: Date
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["verification"]>



  export type VerificationSelectScalar = {
    id?: boolean
    identifier?: boolean
    value?: boolean
    expiresAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type VerificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "identifier" | "value" | "expiresAt" | "createdAt" | "updatedAt", ExtArgs["result"]["verification"]>

  export type $VerificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Verification"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      identifier: string
      value: string
      expiresAt: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["verification"]>
    composites: {}
  }

  type VerificationGetPayload<S extends boolean | null | undefined | VerificationDefaultArgs> = $Result.GetResult<Prisma.$VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VerificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VerificationFindUniqueArgs>(args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Verification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs>(args: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VerificationFindFirstArgs>(args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Verification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs>(args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VerificationFindManyArgs>(args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
     */
    create<T extends VerificationCreateArgs>(args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Verifications.
     * @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     * @example
     * // Create many Verifications
     * const verification = await prisma.verification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VerificationCreateManyArgs>(args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
     */
    delete<T extends VerificationDeleteArgs>(args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VerificationUpdateArgs>(args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VerificationDeleteManyArgs>(args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VerificationUpdateManyArgs>(args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
     */
    upsert<T extends VerificationUpsertArgs>(args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>): Prisma__VerificationClient<$Result.GetResult<Prisma.$VerificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Verification model
   */
  readonly fields: VerificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Verification model
   */
  interface VerificationFieldRefs {
    readonly id: FieldRef<"Verification", 'String'>
    readonly identifier: FieldRef<"Verification", 'String'>
    readonly value: FieldRef<"Verification", 'String'>
    readonly expiresAt: FieldRef<"Verification", 'DateTime'>
    readonly createdAt: FieldRef<"Verification", 'DateTime'>
    readonly updatedAt: FieldRef<"Verification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Verification findUnique
   */
  export type VerificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findFirst
   */
  export type VerificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: VerificationOrderByWithRelationInput | VerificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: VerificationScalarFieldEnum | VerificationScalarFieldEnum[]
  }

  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }

  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: VerificationCreateManyInput | VerificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to update.
     */
    limit?: number
  }

  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }

  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
    /**
     * Limit how many Verifications to delete.
     */
    limit?: number
  }

  /**
   * Verification without action
   */
  export type VerificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Verification
     */
    omit?: VerificationOmit<ExtArgs> | null
  }


  /**
   * Model Person
   */

  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    gender: string | null
    birthdate: Date | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type PersonMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    phone: string | null
    gender: string | null
    birthdate: Date | null
    cpf: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type PersonCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    gender: number
    birthdate: number
    cpf: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type PersonMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    gender?: true
    birthdate?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type PersonMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    gender?: true
    birthdate?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type PersonCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    gender?: true
    birthdate?: true
    cpf?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type PersonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Person to aggregate.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithAggregationInput | PersonOrderByWithAggregationInput[]
    by: PersonScalarFieldEnum[] | PersonScalarFieldEnum
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }

  export type PersonGroupByOutputType = {
    id: string
    name: string
    email: string
    phone: string | null
    gender: string | null
    birthdate: Date | null
    cpf: string | null
    createdAt: Date
    updatedAt: Date
    userId: string | null
    _count: PersonCountAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    gender?: boolean
    birthdate?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    meetupAdmins?: boolean | Person$meetupAdminsArgs<ExtArgs>
    subscriptions?: boolean | Person$subscriptionsArgs<ExtArgs>
    invites?: boolean | Person$invitesArgs<ExtArgs>
    certificates?: boolean | Person$certificatesArgs<ExtArgs>
    meetupMedias?: boolean | Person$meetupMediasArgs<ExtArgs>
    guestLoads?: boolean | Person$guestLoadsArgs<ExtArgs>
    user?: boolean | Person$userArgs<ExtArgs>
    created_meetups?: boolean | Person$created_meetupsArgs<ExtArgs>
    followingMeetups?: boolean | Person$followingMeetupsArgs<ExtArgs>
    notifications?: boolean | Person$notificationsArgs<ExtArgs>
    _count?: boolean | PersonCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["person"]>



  export type PersonSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    gender?: boolean
    birthdate?: boolean
    cpf?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type PersonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "phone" | "gender" | "birthdate" | "cpf" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["person"]>
  export type PersonInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetupAdmins?: boolean | Person$meetupAdminsArgs<ExtArgs>
    subscriptions?: boolean | Person$subscriptionsArgs<ExtArgs>
    invites?: boolean | Person$invitesArgs<ExtArgs>
    certificates?: boolean | Person$certificatesArgs<ExtArgs>
    meetupMedias?: boolean | Person$meetupMediasArgs<ExtArgs>
    guestLoads?: boolean | Person$guestLoadsArgs<ExtArgs>
    user?: boolean | Person$userArgs<ExtArgs>
    created_meetups?: boolean | Person$created_meetupsArgs<ExtArgs>
    followingMeetups?: boolean | Person$followingMeetupsArgs<ExtArgs>
    notifications?: boolean | Person$notificationsArgs<ExtArgs>
    _count?: boolean | PersonCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PersonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Person"
    objects: {
      meetupAdmins: Prisma.$MeetupAdminPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      invites: Prisma.$InvitePayload<ExtArgs>[]
      certificates: Prisma.$CertificatePayload<ExtArgs>[]
      meetupMedias: Prisma.$MeetupMediaPayload<ExtArgs>[]
      guestLoads: Prisma.$GuestLoadPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs> | null
      created_meetups: Prisma.$MeetupPayload<ExtArgs>[]
      followingMeetups: Prisma.$MeetupFollowerPayload<ExtArgs>[]
      notifications: Prisma.$MeetupNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      phone: string | null
      gender: string | null
      birthdate: Date | null
      cpf: string | null
      createdAt: Date
      updatedAt: Date
      userId: string | null
    }, ExtArgs["result"]["person"]>
    composites: {}
  }

  type PersonGetPayload<S extends boolean | null | undefined | PersonDefaultArgs> = $Result.GetResult<Prisma.$PersonPayload, S>

  type PersonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonCountAggregateInputType | true
    }

  export interface PersonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Person'], meta: { name: 'Person' } }
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonFindUniqueArgs>(args: SelectSubset<T, PersonFindUniqueArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Person that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonFindUniqueOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonFindFirstArgs>(args?: SelectSubset<T, PersonFindFirstArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Person that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personWithIdOnly = await prisma.person.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonFindManyArgs>(args?: SelectSubset<T, PersonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
     */
    create<T extends PersonCreateArgs>(args: SelectSubset<T, PersonCreateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many People.
     * @param {PersonCreateManyArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonCreateManyArgs>(args?: SelectSubset<T, PersonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
     */
    delete<T extends PersonDeleteArgs>(args: SelectSubset<T, PersonDeleteArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonUpdateArgs>(args: SelectSubset<T, PersonUpdateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonDeleteManyArgs>(args?: SelectSubset<T, PersonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonUpdateManyArgs>(args: SelectSubset<T, PersonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
     */
    upsert<T extends PersonUpsertArgs>(args: SelectSubset<T, PersonUpsertArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): Prisma.PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Person model
   */
  readonly fields: PersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetupAdmins<T extends Person$meetupAdminsArgs<ExtArgs> = {}>(args?: Subset<T, Person$meetupAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscriptions<T extends Person$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Person$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invites<T extends Person$invitesArgs<ExtArgs> = {}>(args?: Subset<T, Person$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    certificates<T extends Person$certificatesArgs<ExtArgs> = {}>(args?: Subset<T, Person$certificatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    meetupMedias<T extends Person$meetupMediasArgs<ExtArgs> = {}>(args?: Subset<T, Person$meetupMediasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    guestLoads<T extends Person$guestLoadsArgs<ExtArgs> = {}>(args?: Subset<T, Person$guestLoadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    user<T extends Person$userArgs<ExtArgs> = {}>(args?: Subset<T, Person$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    created_meetups<T extends Person$created_meetupsArgs<ExtArgs> = {}>(args?: Subset<T, Person$created_meetupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    followingMeetups<T extends Person$followingMeetupsArgs<ExtArgs> = {}>(args?: Subset<T, Person$followingMeetupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    notifications<T extends Person$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Person$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Person model
   */
  interface PersonFieldRefs {
    readonly id: FieldRef<"Person", 'String'>
    readonly name: FieldRef<"Person", 'String'>
    readonly email: FieldRef<"Person", 'String'>
    readonly phone: FieldRef<"Person", 'String'>
    readonly gender: FieldRef<"Person", 'String'>
    readonly birthdate: FieldRef<"Person", 'DateTime'>
    readonly cpf: FieldRef<"Person", 'String'>
    readonly createdAt: FieldRef<"Person", 'DateTime'>
    readonly updatedAt: FieldRef<"Person", 'DateTime'>
    readonly userId: FieldRef<"Person", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findUniqueOrThrow
   */
  export type PersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findFirstOrThrow
   */
  export type PersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findMany
   */
  export type PersonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter, which People to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person create
   */
  export type PersonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to create a Person.
     */
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }

  /**
   * Person createMany
   */
  export type PersonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Person update
   */
  export type PersonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The data needed to update a Person.
     */
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
    /**
     * Limit how many People to update.
     */
    limit?: number
  }

  /**
   * Person upsert
   */
  export type PersonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * The filter to search for the Person to update in case it exists.
     */
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     */
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }

  /**
   * Person delete
   */
  export type PersonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
    /**
     * Filter which Person to delete.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which People to delete
     */
    where?: PersonWhereInput
    /**
     * Limit how many People to delete.
     */
    limit?: number
  }

  /**
   * Person.meetupAdmins
   */
  export type Person$meetupAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    where?: MeetupAdminWhereInput
    orderBy?: MeetupAdminOrderByWithRelationInput | MeetupAdminOrderByWithRelationInput[]
    cursor?: MeetupAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupAdminScalarFieldEnum | MeetupAdminScalarFieldEnum[]
  }

  /**
   * Person.subscriptions
   */
  export type Person$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Person.invites
   */
  export type Person$invitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    cursor?: InviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Person.certificates
   */
  export type Person$certificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    cursor?: CertificateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Person.meetupMedias
   */
  export type Person$meetupMediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    where?: MeetupMediaWhereInput
    orderBy?: MeetupMediaOrderByWithRelationInput | MeetupMediaOrderByWithRelationInput[]
    cursor?: MeetupMediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupMediaScalarFieldEnum | MeetupMediaScalarFieldEnum[]
  }

  /**
   * Person.guestLoads
   */
  export type Person$guestLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    where?: GuestLoadWhereInput
    orderBy?: GuestLoadOrderByWithRelationInput | GuestLoadOrderByWithRelationInput[]
    cursor?: GuestLoadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuestLoadScalarFieldEnum | GuestLoadScalarFieldEnum[]
  }

  /**
   * Person.user
   */
  export type Person$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Person.created_meetups
   */
  export type Person$created_meetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    where?: MeetupWhereInput
    orderBy?: MeetupOrderByWithRelationInput | MeetupOrderByWithRelationInput[]
    cursor?: MeetupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupScalarFieldEnum | MeetupScalarFieldEnum[]
  }

  /**
   * Person.followingMeetups
   */
  export type Person$followingMeetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    where?: MeetupFollowerWhereInput
    orderBy?: MeetupFollowerOrderByWithRelationInput | MeetupFollowerOrderByWithRelationInput[]
    cursor?: MeetupFollowerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupFollowerScalarFieldEnum | MeetupFollowerScalarFieldEnum[]
  }

  /**
   * Person.notifications
   */
  export type Person$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    where?: MeetupNotificationWhereInput
    orderBy?: MeetupNotificationOrderByWithRelationInput | MeetupNotificationOrderByWithRelationInput[]
    cursor?: MeetupNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupNotificationScalarFieldEnum | MeetupNotificationScalarFieldEnum[]
  }

  /**
   * Person without action
   */
  export type PersonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonInclude<ExtArgs> | null
  }


  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressMinAggregateOutputType = {
    id: string | null
    mapLink: string | null
    state: string | null
    city: string | null
    district: string | null
    street: string | null
    number: string | null
    complement: string | null
    zipcode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: string | null
    mapLink: string | null
    state: string | null
    city: string | null
    district: string | null
    street: string | null
    number: string | null
    complement: string | null
    zipcode: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    mapLink: number
    state: number
    city: number
    district: number
    street: number
    number: number
    complement: number
    zipcode: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AddressMinAggregateInputType = {
    id?: true
    mapLink?: true
    state?: true
    city?: true
    district?: true
    street?: true
    number?: true
    complement?: true
    zipcode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    mapLink?: true
    state?: true
    city?: true
    district?: true
    street?: true
    number?: true
    complement?: true
    zipcode?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    mapLink?: true
    state?: true
    city?: true
    district?: true
    street?: true
    number?: true
    complement?: true
    zipcode?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: string
    mapLink: string | null
    state: string
    city: string
    district: string
    street: string
    number: string | null
    complement: string | null
    zipcode: string
    createdAt: Date
    updatedAt: Date
    _count: AddressCountAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mapLink?: boolean
    state?: boolean
    city?: boolean
    district?: boolean
    street?: boolean
    number?: boolean
    complement?: boolean
    zipcode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetups?: boolean | Address$meetupsArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>



  export type AddressSelectScalar = {
    id?: boolean
    mapLink?: boolean
    state?: boolean
    city?: boolean
    district?: boolean
    street?: boolean
    number?: boolean
    complement?: boolean
    zipcode?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AddressOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "mapLink" | "state" | "city" | "district" | "street" | "number" | "complement" | "zipcode" | "createdAt" | "updatedAt", ExtArgs["result"]["address"]>
  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetups?: boolean | Address$meetupsArgs<ExtArgs>
    _count?: boolean | AddressCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      meetups: Prisma.$MeetupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      mapLink: string | null
      state: string
      city: string
      district: string
      street: string
      number: string | null
      complement: string | null
      zipcode: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["address"]>
    composites: {}
  }

  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AddressFindUniqueArgs>(args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Address that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs>(args: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AddressFindFirstArgs>(args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs>(args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AddressFindManyArgs>(args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
     */
    create<T extends AddressCreateArgs>(args: SelectSubset<T, AddressCreateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Addresses.
     * @param {AddressCreateManyArgs} args - Arguments to create many Addresses.
     * @example
     * // Create many Addresses
     * const address = await prisma.address.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AddressCreateManyArgs>(args?: SelectSubset<T, AddressCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
     */
    delete<T extends AddressDeleteArgs>(args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AddressUpdateArgs>(args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AddressDeleteManyArgs>(args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AddressUpdateManyArgs>(args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
     */
    upsert<T extends AddressUpsertArgs>(args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetups<T extends Address$meetupsArgs<ExtArgs> = {}>(args?: Subset<T, Address$meetupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Address model
   */
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'String'>
    readonly mapLink: FieldRef<"Address", 'String'>
    readonly state: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly district: FieldRef<"Address", 'String'>
    readonly street: FieldRef<"Address", 'String'>
    readonly number: FieldRef<"Address", 'String'>
    readonly complement: FieldRef<"Address", 'String'>
    readonly zipcode: FieldRef<"Address", 'String'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
    readonly updatedAt: FieldRef<"Address", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }

  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }

  /**
   * Address createMany
   */
  export type AddressCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Addresses.
     */
    data: AddressCreateManyInput | AddressCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to update.
     */
    limit?: number
  }

  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }

  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }

  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
    /**
     * Limit how many Addresses to delete.
     */
    limit?: number
  }

  /**
   * Address.meetups
   */
  export type Address$meetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    where?: MeetupWhereInput
    orderBy?: MeetupOrderByWithRelationInput | MeetupOrderByWithRelationInput[]
    cursor?: MeetupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupScalarFieldEnum | MeetupScalarFieldEnum[]
  }

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
  }


  /**
   * Model Meetup
   */

  export type AggregateMeetup = {
    _count: MeetupCountAggregateOutputType | null
    _avg: MeetupAvgAggregateOutputType | null
    _sum: MeetupSumAggregateOutputType | null
    _min: MeetupMinAggregateOutputType | null
    _max: MeetupMaxAggregateOutputType | null
  }

  export type MeetupAvgAggregateOutputType = {
    workload: number | null
  }

  export type MeetupSumAggregateOutputType = {
    workload: number | null
  }

  export type MeetupMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    locationName: string | null
    start: Date | null
    end: Date | null
    addressId: string | null
    categoryId: string | null
    creatorId: string | null
    certificateModelId: string | null
    image: string | null
    workload: number | null
    status: $Enums.MeetupStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetupMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    locationName: string | null
    start: Date | null
    end: Date | null
    addressId: string | null
    categoryId: string | null
    creatorId: string | null
    certificateModelId: string | null
    image: string | null
    workload: number | null
    status: $Enums.MeetupStatus | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetupCountAggregateOutputType = {
    id: number
    title: number
    description: number
    locationName: number
    start: number
    end: number
    addressId: number
    categoryId: number
    creatorId: number
    certificateModelId: number
    image: number
    workload: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetupAvgAggregateInputType = {
    workload?: true
  }

  export type MeetupSumAggregateInputType = {
    workload?: true
  }

  export type MeetupMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    locationName?: true
    start?: true
    end?: true
    addressId?: true
    categoryId?: true
    creatorId?: true
    certificateModelId?: true
    image?: true
    workload?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetupMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    locationName?: true
    start?: true
    end?: true
    addressId?: true
    categoryId?: true
    creatorId?: true
    certificateModelId?: true
    image?: true
    workload?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetupCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    locationName?: true
    start?: true
    end?: true
    addressId?: true
    categoryId?: true
    creatorId?: true
    certificateModelId?: true
    image?: true
    workload?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meetup to aggregate.
     */
    where?: MeetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetups to fetch.
     */
    orderBy?: MeetupOrderByWithRelationInput | MeetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Meetups
    **/
    _count?: true | MeetupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetupAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetupSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupMaxAggregateInputType
  }

  export type GetMeetupAggregateType<T extends MeetupAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetup[P]>
      : GetScalarType<T[P], AggregateMeetup[P]>
  }




  export type MeetupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupWhereInput
    orderBy?: MeetupOrderByWithAggregationInput | MeetupOrderByWithAggregationInput[]
    by: MeetupScalarFieldEnum[] | MeetupScalarFieldEnum
    having?: MeetupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupCountAggregateInputType | true
    _avg?: MeetupAvgAggregateInputType
    _sum?: MeetupSumAggregateInputType
    _min?: MeetupMinAggregateInputType
    _max?: MeetupMaxAggregateInputType
  }

  export type MeetupGroupByOutputType = {
    id: string
    title: string
    description: string | null
    locationName: string | null
    start: Date | null
    end: Date | null
    addressId: string | null
    categoryId: string
    creatorId: string
    certificateModelId: string | null
    image: string | null
    workload: number | null
    status: $Enums.MeetupStatus
    createdAt: Date
    updatedAt: Date
    _count: MeetupCountAggregateOutputType | null
    _avg: MeetupAvgAggregateOutputType | null
    _sum: MeetupSumAggregateOutputType | null
    _min: MeetupMinAggregateOutputType | null
    _max: MeetupMaxAggregateOutputType | null
  }

  type GetMeetupGroupByPayload<T extends MeetupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupGroupByOutputType[P]>
        }
      >
    >


  export type MeetupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    locationName?: boolean
    start?: boolean
    end?: boolean
    addressId?: boolean
    categoryId?: boolean
    creatorId?: boolean
    certificateModelId?: boolean
    image?: boolean
    workload?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    address?: boolean | Meetup$addressArgs<ExtArgs>
    meetupAdmins?: boolean | Meetup$meetupAdminsArgs<ExtArgs>
    subscriptions?: boolean | Meetup$subscriptionsArgs<ExtArgs>
    invites?: boolean | Meetup$invitesArgs<ExtArgs>
    certificates?: boolean | Meetup$certificatesArgs<ExtArgs>
    meetupMedias?: boolean | Meetup$meetupMediasArgs<ExtArgs>
    guestLoads?: boolean | Meetup$guestLoadsArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    creator?: boolean | PersonDefaultArgs<ExtArgs>
    followers?: boolean | Meetup$followersArgs<ExtArgs>
    inviteSheets?: boolean | Meetup$inviteSheetsArgs<ExtArgs>
    certificateModel?: boolean | Meetup$certificateModelArgs<ExtArgs>
    notifications?: boolean | Meetup$notificationsArgs<ExtArgs>
    _count?: boolean | MeetupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetup"]>



  export type MeetupSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    locationName?: boolean
    start?: boolean
    end?: boolean
    addressId?: boolean
    categoryId?: boolean
    creatorId?: boolean
    certificateModelId?: boolean
    image?: boolean
    workload?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MeetupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "locationName" | "start" | "end" | "addressId" | "categoryId" | "creatorId" | "certificateModelId" | "image" | "workload" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["meetup"]>
  export type MeetupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    address?: boolean | Meetup$addressArgs<ExtArgs>
    meetupAdmins?: boolean | Meetup$meetupAdminsArgs<ExtArgs>
    subscriptions?: boolean | Meetup$subscriptionsArgs<ExtArgs>
    invites?: boolean | Meetup$invitesArgs<ExtArgs>
    certificates?: boolean | Meetup$certificatesArgs<ExtArgs>
    meetupMedias?: boolean | Meetup$meetupMediasArgs<ExtArgs>
    guestLoads?: boolean | Meetup$guestLoadsArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    creator?: boolean | PersonDefaultArgs<ExtArgs>
    followers?: boolean | Meetup$followersArgs<ExtArgs>
    inviteSheets?: boolean | Meetup$inviteSheetsArgs<ExtArgs>
    certificateModel?: boolean | Meetup$certificateModelArgs<ExtArgs>
    notifications?: boolean | Meetup$notificationsArgs<ExtArgs>
    _count?: boolean | MeetupCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MeetupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Meetup"
    objects: {
      address: Prisma.$AddressPayload<ExtArgs> | null
      meetupAdmins: Prisma.$MeetupAdminPayload<ExtArgs>[]
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
      invites: Prisma.$InvitePayload<ExtArgs>[]
      certificates: Prisma.$CertificatePayload<ExtArgs>[]
      meetupMedias: Prisma.$MeetupMediaPayload<ExtArgs>[]
      guestLoads: Prisma.$GuestLoadPayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs>
      creator: Prisma.$PersonPayload<ExtArgs>
      followers: Prisma.$MeetupFollowerPayload<ExtArgs>[]
      inviteSheets: Prisma.$MeetupInviteSheetPayload<ExtArgs>[]
      certificateModel: Prisma.$CertificateModelPayload<ExtArgs> | null
      notifications: Prisma.$MeetupNotificationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      locationName: string | null
      start: Date | null
      end: Date | null
      addressId: string | null
      categoryId: string
      creatorId: string
      certificateModelId: string | null
      image: string | null
      workload: number | null
      status: $Enums.MeetupStatus
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meetup"]>
    composites: {}
  }

  type MeetupGetPayload<S extends boolean | null | undefined | MeetupDefaultArgs> = $Result.GetResult<Prisma.$MeetupPayload, S>

  type MeetupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetupCountAggregateInputType | true
    }

  export interface MeetupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Meetup'], meta: { name: 'Meetup' } }
    /**
     * Find zero or one Meetup that matches the filter.
     * @param {MeetupFindUniqueArgs} args - Arguments to find a Meetup
     * @example
     * // Get one Meetup
     * const meetup = await prisma.meetup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetupFindUniqueArgs>(args: SelectSubset<T, MeetupFindUniqueArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Meetup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetupFindUniqueOrThrowArgs} args - Arguments to find a Meetup
     * @example
     * // Get one Meetup
     * const meetup = await prisma.meetup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetupFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meetup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFindFirstArgs} args - Arguments to find a Meetup
     * @example
     * // Get one Meetup
     * const meetup = await prisma.meetup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetupFindFirstArgs>(args?: SelectSubset<T, MeetupFindFirstArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Meetup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFindFirstOrThrowArgs} args - Arguments to find a Meetup
     * @example
     * // Get one Meetup
     * const meetup = await prisma.meetup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetupFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetupFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Meetups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Meetups
     * const meetups = await prisma.meetup.findMany()
     * 
     * // Get first 10 Meetups
     * const meetups = await prisma.meetup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupWithIdOnly = await prisma.meetup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetupFindManyArgs>(args?: SelectSubset<T, MeetupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Meetup.
     * @param {MeetupCreateArgs} args - Arguments to create a Meetup.
     * @example
     * // Create one Meetup
     * const Meetup = await prisma.meetup.create({
     *   data: {
     *     // ... data to create a Meetup
     *   }
     * })
     * 
     */
    create<T extends MeetupCreateArgs>(args: SelectSubset<T, MeetupCreateArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Meetups.
     * @param {MeetupCreateManyArgs} args - Arguments to create many Meetups.
     * @example
     * // Create many Meetups
     * const meetup = await prisma.meetup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetupCreateManyArgs>(args?: SelectSubset<T, MeetupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Meetup.
     * @param {MeetupDeleteArgs} args - Arguments to delete one Meetup.
     * @example
     * // Delete one Meetup
     * const Meetup = await prisma.meetup.delete({
     *   where: {
     *     // ... filter to delete one Meetup
     *   }
     * })
     * 
     */
    delete<T extends MeetupDeleteArgs>(args: SelectSubset<T, MeetupDeleteArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Meetup.
     * @param {MeetupUpdateArgs} args - Arguments to update one Meetup.
     * @example
     * // Update one Meetup
     * const meetup = await prisma.meetup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetupUpdateArgs>(args: SelectSubset<T, MeetupUpdateArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Meetups.
     * @param {MeetupDeleteManyArgs} args - Arguments to filter Meetups to delete.
     * @example
     * // Delete a few Meetups
     * const { count } = await prisma.meetup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetupDeleteManyArgs>(args?: SelectSubset<T, MeetupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Meetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Meetups
     * const meetup = await prisma.meetup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetupUpdateManyArgs>(args: SelectSubset<T, MeetupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Meetup.
     * @param {MeetupUpsertArgs} args - Arguments to update or create a Meetup.
     * @example
     * // Update or create a Meetup
     * const meetup = await prisma.meetup.upsert({
     *   create: {
     *     // ... data to create a Meetup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Meetup we want to update
     *   }
     * })
     */
    upsert<T extends MeetupUpsertArgs>(args: SelectSubset<T, MeetupUpsertArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Meetups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupCountArgs} args - Arguments to filter Meetups to count.
     * @example
     * // Count the number of Meetups
     * const count = await prisma.meetup.count({
     *   where: {
     *     // ... the filter for the Meetups we want to count
     *   }
     * })
    **/
    count<T extends MeetupCountArgs>(
      args?: Subset<T, MeetupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Meetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupAggregateArgs>(args: Subset<T, MeetupAggregateArgs>): Prisma.PrismaPromise<GetMeetupAggregateType<T>>

    /**
     * Group by Meetup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupGroupByArgs['orderBy'] }
        : { orderBy?: MeetupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Meetup model
   */
  readonly fields: MeetupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Meetup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    address<T extends Meetup$addressArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$addressArgs<ExtArgs>>): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    meetupAdmins<T extends Meetup$meetupAdminsArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$meetupAdminsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    subscriptions<T extends Meetup$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    invites<T extends Meetup$invitesArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$invitesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    certificates<T extends Meetup$certificatesArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$certificatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    meetupMedias<T extends Meetup$meetupMediasArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$meetupMediasArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    guestLoads<T extends Meetup$guestLoadsArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$guestLoadsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creator<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    followers<T extends Meetup$followersArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$followersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    inviteSheets<T extends Meetup$inviteSheetsArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$inviteSheetsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    certificateModel<T extends Meetup$certificateModelArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$certificateModelArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    notifications<T extends Meetup$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Meetup$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Meetup model
   */
  interface MeetupFieldRefs {
    readonly id: FieldRef<"Meetup", 'String'>
    readonly title: FieldRef<"Meetup", 'String'>
    readonly description: FieldRef<"Meetup", 'String'>
    readonly locationName: FieldRef<"Meetup", 'String'>
    readonly start: FieldRef<"Meetup", 'DateTime'>
    readonly end: FieldRef<"Meetup", 'DateTime'>
    readonly addressId: FieldRef<"Meetup", 'String'>
    readonly categoryId: FieldRef<"Meetup", 'String'>
    readonly creatorId: FieldRef<"Meetup", 'String'>
    readonly certificateModelId: FieldRef<"Meetup", 'String'>
    readonly image: FieldRef<"Meetup", 'String'>
    readonly workload: FieldRef<"Meetup", 'Int'>
    readonly status: FieldRef<"Meetup", 'MeetupStatus'>
    readonly createdAt: FieldRef<"Meetup", 'DateTime'>
    readonly updatedAt: FieldRef<"Meetup", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Meetup findUnique
   */
  export type MeetupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * Filter, which Meetup to fetch.
     */
    where: MeetupWhereUniqueInput
  }

  /**
   * Meetup findUniqueOrThrow
   */
  export type MeetupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * Filter, which Meetup to fetch.
     */
    where: MeetupWhereUniqueInput
  }

  /**
   * Meetup findFirst
   */
  export type MeetupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * Filter, which Meetup to fetch.
     */
    where?: MeetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetups to fetch.
     */
    orderBy?: MeetupOrderByWithRelationInput | MeetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetups.
     */
    cursor?: MeetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetups.
     */
    distinct?: MeetupScalarFieldEnum | MeetupScalarFieldEnum[]
  }

  /**
   * Meetup findFirstOrThrow
   */
  export type MeetupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * Filter, which Meetup to fetch.
     */
    where?: MeetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetups to fetch.
     */
    orderBy?: MeetupOrderByWithRelationInput | MeetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Meetups.
     */
    cursor?: MeetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Meetups.
     */
    distinct?: MeetupScalarFieldEnum | MeetupScalarFieldEnum[]
  }

  /**
   * Meetup findMany
   */
  export type MeetupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * Filter, which Meetups to fetch.
     */
    where?: MeetupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Meetups to fetch.
     */
    orderBy?: MeetupOrderByWithRelationInput | MeetupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Meetups.
     */
    cursor?: MeetupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Meetups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Meetups.
     */
    skip?: number
    distinct?: MeetupScalarFieldEnum | MeetupScalarFieldEnum[]
  }

  /**
   * Meetup create
   */
  export type MeetupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * The data needed to create a Meetup.
     */
    data: XOR<MeetupCreateInput, MeetupUncheckedCreateInput>
  }

  /**
   * Meetup createMany
   */
  export type MeetupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Meetups.
     */
    data: MeetupCreateManyInput | MeetupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Meetup update
   */
  export type MeetupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * The data needed to update a Meetup.
     */
    data: XOR<MeetupUpdateInput, MeetupUncheckedUpdateInput>
    /**
     * Choose, which Meetup to update.
     */
    where: MeetupWhereUniqueInput
  }

  /**
   * Meetup updateMany
   */
  export type MeetupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Meetups.
     */
    data: XOR<MeetupUpdateManyMutationInput, MeetupUncheckedUpdateManyInput>
    /**
     * Filter which Meetups to update
     */
    where?: MeetupWhereInput
    /**
     * Limit how many Meetups to update.
     */
    limit?: number
  }

  /**
   * Meetup upsert
   */
  export type MeetupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * The filter to search for the Meetup to update in case it exists.
     */
    where: MeetupWhereUniqueInput
    /**
     * In case the Meetup found by the `where` argument doesn't exist, create a new Meetup with this data.
     */
    create: XOR<MeetupCreateInput, MeetupUncheckedCreateInput>
    /**
     * In case the Meetup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupUpdateInput, MeetupUncheckedUpdateInput>
  }

  /**
   * Meetup delete
   */
  export type MeetupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    /**
     * Filter which Meetup to delete.
     */
    where: MeetupWhereUniqueInput
  }

  /**
   * Meetup deleteMany
   */
  export type MeetupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Meetups to delete
     */
    where?: MeetupWhereInput
    /**
     * Limit how many Meetups to delete.
     */
    limit?: number
  }

  /**
   * Meetup.address
   */
  export type Meetup$addressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Address
     */
    omit?: AddressOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
  }

  /**
   * Meetup.meetupAdmins
   */
  export type Meetup$meetupAdminsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    where?: MeetupAdminWhereInput
    orderBy?: MeetupAdminOrderByWithRelationInput | MeetupAdminOrderByWithRelationInput[]
    cursor?: MeetupAdminWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupAdminScalarFieldEnum | MeetupAdminScalarFieldEnum[]
  }

  /**
   * Meetup.subscriptions
   */
  export type Meetup$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Meetup.invites
   */
  export type Meetup$invitesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    cursor?: InviteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Meetup.certificates
   */
  export type Meetup$certificatesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    cursor?: CertificateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Meetup.meetupMedias
   */
  export type Meetup$meetupMediasArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    where?: MeetupMediaWhereInput
    orderBy?: MeetupMediaOrderByWithRelationInput | MeetupMediaOrderByWithRelationInput[]
    cursor?: MeetupMediaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupMediaScalarFieldEnum | MeetupMediaScalarFieldEnum[]
  }

  /**
   * Meetup.guestLoads
   */
  export type Meetup$guestLoadsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    where?: GuestLoadWhereInput
    orderBy?: GuestLoadOrderByWithRelationInput | GuestLoadOrderByWithRelationInput[]
    cursor?: GuestLoadWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuestLoadScalarFieldEnum | GuestLoadScalarFieldEnum[]
  }

  /**
   * Meetup.followers
   */
  export type Meetup$followersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    where?: MeetupFollowerWhereInput
    orderBy?: MeetupFollowerOrderByWithRelationInput | MeetupFollowerOrderByWithRelationInput[]
    cursor?: MeetupFollowerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupFollowerScalarFieldEnum | MeetupFollowerScalarFieldEnum[]
  }

  /**
   * Meetup.inviteSheets
   */
  export type Meetup$inviteSheetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    where?: MeetupInviteSheetWhereInput
    orderBy?: MeetupInviteSheetOrderByWithRelationInput | MeetupInviteSheetOrderByWithRelationInput[]
    cursor?: MeetupInviteSheetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupInviteSheetScalarFieldEnum | MeetupInviteSheetScalarFieldEnum[]
  }

  /**
   * Meetup.certificateModel
   */
  export type Meetup$certificateModelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    where?: CertificateModelWhereInput
  }

  /**
   * Meetup.notifications
   */
  export type Meetup$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    where?: MeetupNotificationWhereInput
    orderBy?: MeetupNotificationOrderByWithRelationInput | MeetupNotificationOrderByWithRelationInput[]
    cursor?: MeetupNotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupNotificationScalarFieldEnum | MeetupNotificationScalarFieldEnum[]
  }

  /**
   * Meetup without action
   */
  export type MeetupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
  }


  /**
   * Model MeetupNotification
   */

  export type AggregateMeetupNotification = {
    _count: MeetupNotificationCountAggregateOutputType | null
    _min: MeetupNotificationMinAggregateOutputType | null
    _max: MeetupNotificationMaxAggregateOutputType | null
  }

  export type MeetupNotificationMinAggregateOutputType = {
    id: string | null
    text: string | null
    meetupId: string | null
    personId: string | null
    createdAt: Date | null
  }

  export type MeetupNotificationMaxAggregateOutputType = {
    id: string | null
    text: string | null
    meetupId: string | null
    personId: string | null
    createdAt: Date | null
  }

  export type MeetupNotificationCountAggregateOutputType = {
    id: number
    text: number
    meetupId: number
    personId: number
    createdAt: number
    _all: number
  }


  export type MeetupNotificationMinAggregateInputType = {
    id?: true
    text?: true
    meetupId?: true
    personId?: true
    createdAt?: true
  }

  export type MeetupNotificationMaxAggregateInputType = {
    id?: true
    text?: true
    meetupId?: true
    personId?: true
    createdAt?: true
  }

  export type MeetupNotificationCountAggregateInputType = {
    id?: true
    text?: true
    meetupId?: true
    personId?: true
    createdAt?: true
    _all?: true
  }

  export type MeetupNotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupNotification to aggregate.
     */
    where?: MeetupNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupNotifications to fetch.
     */
    orderBy?: MeetupNotificationOrderByWithRelationInput | MeetupNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetupNotifications
    **/
    _count?: true | MeetupNotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupNotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupNotificationMaxAggregateInputType
  }

  export type GetMeetupNotificationAggregateType<T extends MeetupNotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetupNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetupNotification[P]>
      : GetScalarType<T[P], AggregateMeetupNotification[P]>
  }




  export type MeetupNotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupNotificationWhereInput
    orderBy?: MeetupNotificationOrderByWithAggregationInput | MeetupNotificationOrderByWithAggregationInput[]
    by: MeetupNotificationScalarFieldEnum[] | MeetupNotificationScalarFieldEnum
    having?: MeetupNotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupNotificationCountAggregateInputType | true
    _min?: MeetupNotificationMinAggregateInputType
    _max?: MeetupNotificationMaxAggregateInputType
  }

  export type MeetupNotificationGroupByOutputType = {
    id: string
    text: string
    meetupId: string
    personId: string
    createdAt: Date
    _count: MeetupNotificationCountAggregateOutputType | null
    _min: MeetupNotificationMinAggregateOutputType | null
    _max: MeetupNotificationMaxAggregateOutputType | null
  }

  type GetMeetupNotificationGroupByPayload<T extends MeetupNotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupNotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupNotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupNotificationGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupNotificationGroupByOutputType[P]>
        }
      >
    >


  export type MeetupNotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    text?: boolean
    meetupId?: boolean
    personId?: boolean
    createdAt?: boolean
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetupNotification"]>



  export type MeetupNotificationSelectScalar = {
    id?: boolean
    text?: boolean
    meetupId?: boolean
    personId?: boolean
    createdAt?: boolean
  }

  export type MeetupNotificationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "text" | "meetupId" | "personId" | "createdAt", ExtArgs["result"]["meetupNotification"]>
  export type MeetupNotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }

  export type $MeetupNotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetupNotification"
    objects: {
      meetup: Prisma.$MeetupPayload<ExtArgs>
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      text: string
      meetupId: string
      personId: string
      createdAt: Date
    }, ExtArgs["result"]["meetupNotification"]>
    composites: {}
  }

  type MeetupNotificationGetPayload<S extends boolean | null | undefined | MeetupNotificationDefaultArgs> = $Result.GetResult<Prisma.$MeetupNotificationPayload, S>

  type MeetupNotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetupNotificationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetupNotificationCountAggregateInputType | true
    }

  export interface MeetupNotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetupNotification'], meta: { name: 'MeetupNotification' } }
    /**
     * Find zero or one MeetupNotification that matches the filter.
     * @param {MeetupNotificationFindUniqueArgs} args - Arguments to find a MeetupNotification
     * @example
     * // Get one MeetupNotification
     * const meetupNotification = await prisma.meetupNotification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetupNotificationFindUniqueArgs>(args: SelectSubset<T, MeetupNotificationFindUniqueArgs<ExtArgs>>): Prisma__MeetupNotificationClient<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetupNotification that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetupNotificationFindUniqueOrThrowArgs} args - Arguments to find a MeetupNotification
     * @example
     * // Get one MeetupNotification
     * const meetupNotification = await prisma.meetupNotification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetupNotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetupNotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetupNotificationClient<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupNotification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupNotificationFindFirstArgs} args - Arguments to find a MeetupNotification
     * @example
     * // Get one MeetupNotification
     * const meetupNotification = await prisma.meetupNotification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetupNotificationFindFirstArgs>(args?: SelectSubset<T, MeetupNotificationFindFirstArgs<ExtArgs>>): Prisma__MeetupNotificationClient<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupNotification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupNotificationFindFirstOrThrowArgs} args - Arguments to find a MeetupNotification
     * @example
     * // Get one MeetupNotification
     * const meetupNotification = await prisma.meetupNotification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetupNotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetupNotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetupNotificationClient<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetupNotifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupNotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetupNotifications
     * const meetupNotifications = await prisma.meetupNotification.findMany()
     * 
     * // Get first 10 MeetupNotifications
     * const meetupNotifications = await prisma.meetupNotification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupNotificationWithIdOnly = await prisma.meetupNotification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetupNotificationFindManyArgs>(args?: SelectSubset<T, MeetupNotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetupNotification.
     * @param {MeetupNotificationCreateArgs} args - Arguments to create a MeetupNotification.
     * @example
     * // Create one MeetupNotification
     * const MeetupNotification = await prisma.meetupNotification.create({
     *   data: {
     *     // ... data to create a MeetupNotification
     *   }
     * })
     * 
     */
    create<T extends MeetupNotificationCreateArgs>(args: SelectSubset<T, MeetupNotificationCreateArgs<ExtArgs>>): Prisma__MeetupNotificationClient<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetupNotifications.
     * @param {MeetupNotificationCreateManyArgs} args - Arguments to create many MeetupNotifications.
     * @example
     * // Create many MeetupNotifications
     * const meetupNotification = await prisma.meetupNotification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetupNotificationCreateManyArgs>(args?: SelectSubset<T, MeetupNotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetupNotification.
     * @param {MeetupNotificationDeleteArgs} args - Arguments to delete one MeetupNotification.
     * @example
     * // Delete one MeetupNotification
     * const MeetupNotification = await prisma.meetupNotification.delete({
     *   where: {
     *     // ... filter to delete one MeetupNotification
     *   }
     * })
     * 
     */
    delete<T extends MeetupNotificationDeleteArgs>(args: SelectSubset<T, MeetupNotificationDeleteArgs<ExtArgs>>): Prisma__MeetupNotificationClient<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetupNotification.
     * @param {MeetupNotificationUpdateArgs} args - Arguments to update one MeetupNotification.
     * @example
     * // Update one MeetupNotification
     * const meetupNotification = await prisma.meetupNotification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetupNotificationUpdateArgs>(args: SelectSubset<T, MeetupNotificationUpdateArgs<ExtArgs>>): Prisma__MeetupNotificationClient<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetupNotifications.
     * @param {MeetupNotificationDeleteManyArgs} args - Arguments to filter MeetupNotifications to delete.
     * @example
     * // Delete a few MeetupNotifications
     * const { count } = await prisma.meetupNotification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetupNotificationDeleteManyArgs>(args?: SelectSubset<T, MeetupNotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetupNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupNotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetupNotifications
     * const meetupNotification = await prisma.meetupNotification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetupNotificationUpdateManyArgs>(args: SelectSubset<T, MeetupNotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetupNotification.
     * @param {MeetupNotificationUpsertArgs} args - Arguments to update or create a MeetupNotification.
     * @example
     * // Update or create a MeetupNotification
     * const meetupNotification = await prisma.meetupNotification.upsert({
     *   create: {
     *     // ... data to create a MeetupNotification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetupNotification we want to update
     *   }
     * })
     */
    upsert<T extends MeetupNotificationUpsertArgs>(args: SelectSubset<T, MeetupNotificationUpsertArgs<ExtArgs>>): Prisma__MeetupNotificationClient<$Result.GetResult<Prisma.$MeetupNotificationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetupNotifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupNotificationCountArgs} args - Arguments to filter MeetupNotifications to count.
     * @example
     * // Count the number of MeetupNotifications
     * const count = await prisma.meetupNotification.count({
     *   where: {
     *     // ... the filter for the MeetupNotifications we want to count
     *   }
     * })
    **/
    count<T extends MeetupNotificationCountArgs>(
      args?: Subset<T, MeetupNotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupNotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetupNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupNotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupNotificationAggregateArgs>(args: Subset<T, MeetupNotificationAggregateArgs>): Prisma.PrismaPromise<GetMeetupNotificationAggregateType<T>>

    /**
     * Group by MeetupNotification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupNotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupNotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupNotificationGroupByArgs['orderBy'] }
        : { orderBy?: MeetupNotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupNotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetupNotification model
   */
  readonly fields: MeetupNotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetupNotification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupNotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetupNotification model
   */
  interface MeetupNotificationFieldRefs {
    readonly id: FieldRef<"MeetupNotification", 'String'>
    readonly text: FieldRef<"MeetupNotification", 'String'>
    readonly meetupId: FieldRef<"MeetupNotification", 'String'>
    readonly personId: FieldRef<"MeetupNotification", 'String'>
    readonly createdAt: FieldRef<"MeetupNotification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MeetupNotification findUnique
   */
  export type MeetupNotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * Filter, which MeetupNotification to fetch.
     */
    where: MeetupNotificationWhereUniqueInput
  }

  /**
   * MeetupNotification findUniqueOrThrow
   */
  export type MeetupNotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * Filter, which MeetupNotification to fetch.
     */
    where: MeetupNotificationWhereUniqueInput
  }

  /**
   * MeetupNotification findFirst
   */
  export type MeetupNotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * Filter, which MeetupNotification to fetch.
     */
    where?: MeetupNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupNotifications to fetch.
     */
    orderBy?: MeetupNotificationOrderByWithRelationInput | MeetupNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupNotifications.
     */
    cursor?: MeetupNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupNotifications.
     */
    distinct?: MeetupNotificationScalarFieldEnum | MeetupNotificationScalarFieldEnum[]
  }

  /**
   * MeetupNotification findFirstOrThrow
   */
  export type MeetupNotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * Filter, which MeetupNotification to fetch.
     */
    where?: MeetupNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupNotifications to fetch.
     */
    orderBy?: MeetupNotificationOrderByWithRelationInput | MeetupNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupNotifications.
     */
    cursor?: MeetupNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupNotifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupNotifications.
     */
    distinct?: MeetupNotificationScalarFieldEnum | MeetupNotificationScalarFieldEnum[]
  }

  /**
   * MeetupNotification findMany
   */
  export type MeetupNotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * Filter, which MeetupNotifications to fetch.
     */
    where?: MeetupNotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupNotifications to fetch.
     */
    orderBy?: MeetupNotificationOrderByWithRelationInput | MeetupNotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetupNotifications.
     */
    cursor?: MeetupNotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupNotifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupNotifications.
     */
    skip?: number
    distinct?: MeetupNotificationScalarFieldEnum | MeetupNotificationScalarFieldEnum[]
  }

  /**
   * MeetupNotification create
   */
  export type MeetupNotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetupNotification.
     */
    data: XOR<MeetupNotificationCreateInput, MeetupNotificationUncheckedCreateInput>
  }

  /**
   * MeetupNotification createMany
   */
  export type MeetupNotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetupNotifications.
     */
    data: MeetupNotificationCreateManyInput | MeetupNotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetupNotification update
   */
  export type MeetupNotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetupNotification.
     */
    data: XOR<MeetupNotificationUpdateInput, MeetupNotificationUncheckedUpdateInput>
    /**
     * Choose, which MeetupNotification to update.
     */
    where: MeetupNotificationWhereUniqueInput
  }

  /**
   * MeetupNotification updateMany
   */
  export type MeetupNotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetupNotifications.
     */
    data: XOR<MeetupNotificationUpdateManyMutationInput, MeetupNotificationUncheckedUpdateManyInput>
    /**
     * Filter which MeetupNotifications to update
     */
    where?: MeetupNotificationWhereInput
    /**
     * Limit how many MeetupNotifications to update.
     */
    limit?: number
  }

  /**
   * MeetupNotification upsert
   */
  export type MeetupNotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetupNotification to update in case it exists.
     */
    where: MeetupNotificationWhereUniqueInput
    /**
     * In case the MeetupNotification found by the `where` argument doesn't exist, create a new MeetupNotification with this data.
     */
    create: XOR<MeetupNotificationCreateInput, MeetupNotificationUncheckedCreateInput>
    /**
     * In case the MeetupNotification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupNotificationUpdateInput, MeetupNotificationUncheckedUpdateInput>
  }

  /**
   * MeetupNotification delete
   */
  export type MeetupNotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
    /**
     * Filter which MeetupNotification to delete.
     */
    where: MeetupNotificationWhereUniqueInput
  }

  /**
   * MeetupNotification deleteMany
   */
  export type MeetupNotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupNotifications to delete
     */
    where?: MeetupNotificationWhereInput
    /**
     * Limit how many MeetupNotifications to delete.
     */
    limit?: number
  }

  /**
   * MeetupNotification without action
   */
  export type MeetupNotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupNotification
     */
    select?: MeetupNotificationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupNotification
     */
    omit?: MeetupNotificationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupNotificationInclude<ExtArgs> | null
  }


  /**
   * Model CertificateModel
   */

  export type AggregateCertificateModel = {
    _count: CertificateModelCountAggregateOutputType | null
    _min: CertificateModelMinAggregateOutputType | null
    _max: CertificateModelMaxAggregateOutputType | null
  }

  export type CertificateModelMinAggregateOutputType = {
    id: string | null
    imageLink: string | null
    content: string | null
    createdAt: Date | null
  }

  export type CertificateModelMaxAggregateOutputType = {
    id: string | null
    imageLink: string | null
    content: string | null
    createdAt: Date | null
  }

  export type CertificateModelCountAggregateOutputType = {
    id: number
    imageLink: number
    content: number
    createdAt: number
    _all: number
  }


  export type CertificateModelMinAggregateInputType = {
    id?: true
    imageLink?: true
    content?: true
    createdAt?: true
  }

  export type CertificateModelMaxAggregateInputType = {
    id?: true
    imageLink?: true
    content?: true
    createdAt?: true
  }

  export type CertificateModelCountAggregateInputType = {
    id?: true
    imageLink?: true
    content?: true
    createdAt?: true
    _all?: true
  }

  export type CertificateModelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateModel to aggregate.
     */
    where?: CertificateModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateModels to fetch.
     */
    orderBy?: CertificateModelOrderByWithRelationInput | CertificateModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CertificateModels
    **/
    _count?: true | CertificateModelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateModelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateModelMaxAggregateInputType
  }

  export type GetCertificateModelAggregateType<T extends CertificateModelAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificateModel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificateModel[P]>
      : GetScalarType<T[P], AggregateCertificateModel[P]>
  }




  export type CertificateModelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateModelWhereInput
    orderBy?: CertificateModelOrderByWithAggregationInput | CertificateModelOrderByWithAggregationInput[]
    by: CertificateModelScalarFieldEnum[] | CertificateModelScalarFieldEnum
    having?: CertificateModelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateModelCountAggregateInputType | true
    _min?: CertificateModelMinAggregateInputType
    _max?: CertificateModelMaxAggregateInputType
  }

  export type CertificateModelGroupByOutputType = {
    id: string
    imageLink: string
    content: string
    createdAt: Date
    _count: CertificateModelCountAggregateOutputType | null
    _min: CertificateModelMinAggregateOutputType | null
    _max: CertificateModelMaxAggregateOutputType | null
  }

  type GetCertificateModelGroupByPayload<T extends CertificateModelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateModelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateModelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateModelGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateModelGroupByOutputType[P]>
        }
      >
    >


  export type CertificateModelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageLink?: boolean
    content?: boolean
    createdAt?: boolean
    meetup?: boolean | CertificateModel$meetupArgs<ExtArgs>
  }, ExtArgs["result"]["certificateModel"]>



  export type CertificateModelSelectScalar = {
    id?: boolean
    imageLink?: boolean
    content?: boolean
    createdAt?: boolean
  }

  export type CertificateModelOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "imageLink" | "content" | "createdAt", ExtArgs["result"]["certificateModel"]>
  export type CertificateModelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetup?: boolean | CertificateModel$meetupArgs<ExtArgs>
  }

  export type $CertificateModelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CertificateModel"
    objects: {
      meetup: Prisma.$MeetupPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      imageLink: string
      content: string
      createdAt: Date
    }, ExtArgs["result"]["certificateModel"]>
    composites: {}
  }

  type CertificateModelGetPayload<S extends boolean | null | undefined | CertificateModelDefaultArgs> = $Result.GetResult<Prisma.$CertificateModelPayload, S>

  type CertificateModelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateModelFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateModelCountAggregateInputType | true
    }

  export interface CertificateModelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CertificateModel'], meta: { name: 'CertificateModel' } }
    /**
     * Find zero or one CertificateModel that matches the filter.
     * @param {CertificateModelFindUniqueArgs} args - Arguments to find a CertificateModel
     * @example
     * // Get one CertificateModel
     * const certificateModel = await prisma.certificateModel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateModelFindUniqueArgs>(args: SelectSubset<T, CertificateModelFindUniqueArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CertificateModel that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateModelFindUniqueOrThrowArgs} args - Arguments to find a CertificateModel
     * @example
     * // Get one CertificateModel
     * const certificateModel = await prisma.certificateModel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateModelFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateModelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateModel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateModelFindFirstArgs} args - Arguments to find a CertificateModel
     * @example
     * // Get one CertificateModel
     * const certificateModel = await prisma.certificateModel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateModelFindFirstArgs>(args?: SelectSubset<T, CertificateModelFindFirstArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CertificateModel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateModelFindFirstOrThrowArgs} args - Arguments to find a CertificateModel
     * @example
     * // Get one CertificateModel
     * const certificateModel = await prisma.certificateModel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateModelFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateModelFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CertificateModels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateModelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CertificateModels
     * const certificateModels = await prisma.certificateModel.findMany()
     * 
     * // Get first 10 CertificateModels
     * const certificateModels = await prisma.certificateModel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateModelWithIdOnly = await prisma.certificateModel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateModelFindManyArgs>(args?: SelectSubset<T, CertificateModelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CertificateModel.
     * @param {CertificateModelCreateArgs} args - Arguments to create a CertificateModel.
     * @example
     * // Create one CertificateModel
     * const CertificateModel = await prisma.certificateModel.create({
     *   data: {
     *     // ... data to create a CertificateModel
     *   }
     * })
     * 
     */
    create<T extends CertificateModelCreateArgs>(args: SelectSubset<T, CertificateModelCreateArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CertificateModels.
     * @param {CertificateModelCreateManyArgs} args - Arguments to create many CertificateModels.
     * @example
     * // Create many CertificateModels
     * const certificateModel = await prisma.certificateModel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateModelCreateManyArgs>(args?: SelectSubset<T, CertificateModelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CertificateModel.
     * @param {CertificateModelDeleteArgs} args - Arguments to delete one CertificateModel.
     * @example
     * // Delete one CertificateModel
     * const CertificateModel = await prisma.certificateModel.delete({
     *   where: {
     *     // ... filter to delete one CertificateModel
     *   }
     * })
     * 
     */
    delete<T extends CertificateModelDeleteArgs>(args: SelectSubset<T, CertificateModelDeleteArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CertificateModel.
     * @param {CertificateModelUpdateArgs} args - Arguments to update one CertificateModel.
     * @example
     * // Update one CertificateModel
     * const certificateModel = await prisma.certificateModel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateModelUpdateArgs>(args: SelectSubset<T, CertificateModelUpdateArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CertificateModels.
     * @param {CertificateModelDeleteManyArgs} args - Arguments to filter CertificateModels to delete.
     * @example
     * // Delete a few CertificateModels
     * const { count } = await prisma.certificateModel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateModelDeleteManyArgs>(args?: SelectSubset<T, CertificateModelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CertificateModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateModelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CertificateModels
     * const certificateModel = await prisma.certificateModel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateModelUpdateManyArgs>(args: SelectSubset<T, CertificateModelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CertificateModel.
     * @param {CertificateModelUpsertArgs} args - Arguments to update or create a CertificateModel.
     * @example
     * // Update or create a CertificateModel
     * const certificateModel = await prisma.certificateModel.upsert({
     *   create: {
     *     // ... data to create a CertificateModel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CertificateModel we want to update
     *   }
     * })
     */
    upsert<T extends CertificateModelUpsertArgs>(args: SelectSubset<T, CertificateModelUpsertArgs<ExtArgs>>): Prisma__CertificateModelClient<$Result.GetResult<Prisma.$CertificateModelPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CertificateModels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateModelCountArgs} args - Arguments to filter CertificateModels to count.
     * @example
     * // Count the number of CertificateModels
     * const count = await prisma.certificateModel.count({
     *   where: {
     *     // ... the filter for the CertificateModels we want to count
     *   }
     * })
    **/
    count<T extends CertificateModelCountArgs>(
      args?: Subset<T, CertificateModelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateModelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CertificateModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateModelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateModelAggregateArgs>(args: Subset<T, CertificateModelAggregateArgs>): Prisma.PrismaPromise<GetCertificateModelAggregateType<T>>

    /**
     * Group by CertificateModel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateModelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateModelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateModelGroupByArgs['orderBy'] }
        : { orderBy?: CertificateModelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateModelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateModelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CertificateModel model
   */
  readonly fields: CertificateModelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CertificateModel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateModelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetup<T extends CertificateModel$meetupArgs<ExtArgs> = {}>(args?: Subset<T, CertificateModel$meetupArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CertificateModel model
   */
  interface CertificateModelFieldRefs {
    readonly id: FieldRef<"CertificateModel", 'String'>
    readonly imageLink: FieldRef<"CertificateModel", 'String'>
    readonly content: FieldRef<"CertificateModel", 'String'>
    readonly createdAt: FieldRef<"CertificateModel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CertificateModel findUnique
   */
  export type CertificateModelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * Filter, which CertificateModel to fetch.
     */
    where: CertificateModelWhereUniqueInput
  }

  /**
   * CertificateModel findUniqueOrThrow
   */
  export type CertificateModelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * Filter, which CertificateModel to fetch.
     */
    where: CertificateModelWhereUniqueInput
  }

  /**
   * CertificateModel findFirst
   */
  export type CertificateModelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * Filter, which CertificateModel to fetch.
     */
    where?: CertificateModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateModels to fetch.
     */
    orderBy?: CertificateModelOrderByWithRelationInput | CertificateModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateModels.
     */
    cursor?: CertificateModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateModels.
     */
    distinct?: CertificateModelScalarFieldEnum | CertificateModelScalarFieldEnum[]
  }

  /**
   * CertificateModel findFirstOrThrow
   */
  export type CertificateModelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * Filter, which CertificateModel to fetch.
     */
    where?: CertificateModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateModels to fetch.
     */
    orderBy?: CertificateModelOrderByWithRelationInput | CertificateModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CertificateModels.
     */
    cursor?: CertificateModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateModels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CertificateModels.
     */
    distinct?: CertificateModelScalarFieldEnum | CertificateModelScalarFieldEnum[]
  }

  /**
   * CertificateModel findMany
   */
  export type CertificateModelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * Filter, which CertificateModels to fetch.
     */
    where?: CertificateModelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CertificateModels to fetch.
     */
    orderBy?: CertificateModelOrderByWithRelationInput | CertificateModelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CertificateModels.
     */
    cursor?: CertificateModelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CertificateModels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CertificateModels.
     */
    skip?: number
    distinct?: CertificateModelScalarFieldEnum | CertificateModelScalarFieldEnum[]
  }

  /**
   * CertificateModel create
   */
  export type CertificateModelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * The data needed to create a CertificateModel.
     */
    data: XOR<CertificateModelCreateInput, CertificateModelUncheckedCreateInput>
  }

  /**
   * CertificateModel createMany
   */
  export type CertificateModelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CertificateModels.
     */
    data: CertificateModelCreateManyInput | CertificateModelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CertificateModel update
   */
  export type CertificateModelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * The data needed to update a CertificateModel.
     */
    data: XOR<CertificateModelUpdateInput, CertificateModelUncheckedUpdateInput>
    /**
     * Choose, which CertificateModel to update.
     */
    where: CertificateModelWhereUniqueInput
  }

  /**
   * CertificateModel updateMany
   */
  export type CertificateModelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CertificateModels.
     */
    data: XOR<CertificateModelUpdateManyMutationInput, CertificateModelUncheckedUpdateManyInput>
    /**
     * Filter which CertificateModels to update
     */
    where?: CertificateModelWhereInput
    /**
     * Limit how many CertificateModels to update.
     */
    limit?: number
  }

  /**
   * CertificateModel upsert
   */
  export type CertificateModelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * The filter to search for the CertificateModel to update in case it exists.
     */
    where: CertificateModelWhereUniqueInput
    /**
     * In case the CertificateModel found by the `where` argument doesn't exist, create a new CertificateModel with this data.
     */
    create: XOR<CertificateModelCreateInput, CertificateModelUncheckedCreateInput>
    /**
     * In case the CertificateModel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateModelUpdateInput, CertificateModelUncheckedUpdateInput>
  }

  /**
   * CertificateModel delete
   */
  export type CertificateModelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
    /**
     * Filter which CertificateModel to delete.
     */
    where: CertificateModelWhereUniqueInput
  }

  /**
   * CertificateModel deleteMany
   */
  export type CertificateModelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CertificateModels to delete
     */
    where?: CertificateModelWhereInput
    /**
     * Limit how many CertificateModels to delete.
     */
    limit?: number
  }

  /**
   * CertificateModel.meetup
   */
  export type CertificateModel$meetupArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    where?: MeetupWhereInput
  }

  /**
   * CertificateModel without action
   */
  export type CertificateModelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CertificateModel
     */
    select?: CertificateModelSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CertificateModel
     */
    omit?: CertificateModelOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateModelInclude<ExtArgs> | null
  }


  /**
   * Model MeetupInviteSheet
   */

  export type AggregateMeetupInviteSheet = {
    _count: MeetupInviteSheetCountAggregateOutputType | null
    _min: MeetupInviteSheetMinAggregateOutputType | null
    _max: MeetupInviteSheetMaxAggregateOutputType | null
  }

  export type MeetupInviteSheetMinAggregateOutputType = {
    id: string | null
    link: string | null
    meetupId: string | null
  }

  export type MeetupInviteSheetMaxAggregateOutputType = {
    id: string | null
    link: string | null
    meetupId: string | null
  }

  export type MeetupInviteSheetCountAggregateOutputType = {
    id: number
    link: number
    meetupId: number
    _all: number
  }


  export type MeetupInviteSheetMinAggregateInputType = {
    id?: true
    link?: true
    meetupId?: true
  }

  export type MeetupInviteSheetMaxAggregateInputType = {
    id?: true
    link?: true
    meetupId?: true
  }

  export type MeetupInviteSheetCountAggregateInputType = {
    id?: true
    link?: true
    meetupId?: true
    _all?: true
  }

  export type MeetupInviteSheetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupInviteSheet to aggregate.
     */
    where?: MeetupInviteSheetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupInviteSheets to fetch.
     */
    orderBy?: MeetupInviteSheetOrderByWithRelationInput | MeetupInviteSheetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupInviteSheetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupInviteSheets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupInviteSheets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetupInviteSheets
    **/
    _count?: true | MeetupInviteSheetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupInviteSheetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupInviteSheetMaxAggregateInputType
  }

  export type GetMeetupInviteSheetAggregateType<T extends MeetupInviteSheetAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetupInviteSheet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetupInviteSheet[P]>
      : GetScalarType<T[P], AggregateMeetupInviteSheet[P]>
  }




  export type MeetupInviteSheetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupInviteSheetWhereInput
    orderBy?: MeetupInviteSheetOrderByWithAggregationInput | MeetupInviteSheetOrderByWithAggregationInput[]
    by: MeetupInviteSheetScalarFieldEnum[] | MeetupInviteSheetScalarFieldEnum
    having?: MeetupInviteSheetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupInviteSheetCountAggregateInputType | true
    _min?: MeetupInviteSheetMinAggregateInputType
    _max?: MeetupInviteSheetMaxAggregateInputType
  }

  export type MeetupInviteSheetGroupByOutputType = {
    id: string
    link: string
    meetupId: string
    _count: MeetupInviteSheetCountAggregateOutputType | null
    _min: MeetupInviteSheetMinAggregateOutputType | null
    _max: MeetupInviteSheetMaxAggregateOutputType | null
  }

  type GetMeetupInviteSheetGroupByPayload<T extends MeetupInviteSheetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupInviteSheetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupInviteSheetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupInviteSheetGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupInviteSheetGroupByOutputType[P]>
        }
      >
    >


  export type MeetupInviteSheetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
    meetupId?: boolean
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetupInviteSheet"]>



  export type MeetupInviteSheetSelectScalar = {
    id?: boolean
    link?: boolean
    meetupId?: boolean
  }

  export type MeetupInviteSheetOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "link" | "meetupId", ExtArgs["result"]["meetupInviteSheet"]>
  export type MeetupInviteSheetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
  }

  export type $MeetupInviteSheetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetupInviteSheet"
    objects: {
      meetup: Prisma.$MeetupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      link: string
      meetupId: string
    }, ExtArgs["result"]["meetupInviteSheet"]>
    composites: {}
  }

  type MeetupInviteSheetGetPayload<S extends boolean | null | undefined | MeetupInviteSheetDefaultArgs> = $Result.GetResult<Prisma.$MeetupInviteSheetPayload, S>

  type MeetupInviteSheetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetupInviteSheetFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetupInviteSheetCountAggregateInputType | true
    }

  export interface MeetupInviteSheetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetupInviteSheet'], meta: { name: 'MeetupInviteSheet' } }
    /**
     * Find zero or one MeetupInviteSheet that matches the filter.
     * @param {MeetupInviteSheetFindUniqueArgs} args - Arguments to find a MeetupInviteSheet
     * @example
     * // Get one MeetupInviteSheet
     * const meetupInviteSheet = await prisma.meetupInviteSheet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetupInviteSheetFindUniqueArgs>(args: SelectSubset<T, MeetupInviteSheetFindUniqueArgs<ExtArgs>>): Prisma__MeetupInviteSheetClient<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetupInviteSheet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetupInviteSheetFindUniqueOrThrowArgs} args - Arguments to find a MeetupInviteSheet
     * @example
     * // Get one MeetupInviteSheet
     * const meetupInviteSheet = await prisma.meetupInviteSheet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetupInviteSheetFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetupInviteSheetFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetupInviteSheetClient<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupInviteSheet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupInviteSheetFindFirstArgs} args - Arguments to find a MeetupInviteSheet
     * @example
     * // Get one MeetupInviteSheet
     * const meetupInviteSheet = await prisma.meetupInviteSheet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetupInviteSheetFindFirstArgs>(args?: SelectSubset<T, MeetupInviteSheetFindFirstArgs<ExtArgs>>): Prisma__MeetupInviteSheetClient<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupInviteSheet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupInviteSheetFindFirstOrThrowArgs} args - Arguments to find a MeetupInviteSheet
     * @example
     * // Get one MeetupInviteSheet
     * const meetupInviteSheet = await prisma.meetupInviteSheet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetupInviteSheetFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetupInviteSheetFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetupInviteSheetClient<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetupInviteSheets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupInviteSheetFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetupInviteSheets
     * const meetupInviteSheets = await prisma.meetupInviteSheet.findMany()
     * 
     * // Get first 10 MeetupInviteSheets
     * const meetupInviteSheets = await prisma.meetupInviteSheet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupInviteSheetWithIdOnly = await prisma.meetupInviteSheet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetupInviteSheetFindManyArgs>(args?: SelectSubset<T, MeetupInviteSheetFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetupInviteSheet.
     * @param {MeetupInviteSheetCreateArgs} args - Arguments to create a MeetupInviteSheet.
     * @example
     * // Create one MeetupInviteSheet
     * const MeetupInviteSheet = await prisma.meetupInviteSheet.create({
     *   data: {
     *     // ... data to create a MeetupInviteSheet
     *   }
     * })
     * 
     */
    create<T extends MeetupInviteSheetCreateArgs>(args: SelectSubset<T, MeetupInviteSheetCreateArgs<ExtArgs>>): Prisma__MeetupInviteSheetClient<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetupInviteSheets.
     * @param {MeetupInviteSheetCreateManyArgs} args - Arguments to create many MeetupInviteSheets.
     * @example
     * // Create many MeetupInviteSheets
     * const meetupInviteSheet = await prisma.meetupInviteSheet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetupInviteSheetCreateManyArgs>(args?: SelectSubset<T, MeetupInviteSheetCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetupInviteSheet.
     * @param {MeetupInviteSheetDeleteArgs} args - Arguments to delete one MeetupInviteSheet.
     * @example
     * // Delete one MeetupInviteSheet
     * const MeetupInviteSheet = await prisma.meetupInviteSheet.delete({
     *   where: {
     *     // ... filter to delete one MeetupInviteSheet
     *   }
     * })
     * 
     */
    delete<T extends MeetupInviteSheetDeleteArgs>(args: SelectSubset<T, MeetupInviteSheetDeleteArgs<ExtArgs>>): Prisma__MeetupInviteSheetClient<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetupInviteSheet.
     * @param {MeetupInviteSheetUpdateArgs} args - Arguments to update one MeetupInviteSheet.
     * @example
     * // Update one MeetupInviteSheet
     * const meetupInviteSheet = await prisma.meetupInviteSheet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetupInviteSheetUpdateArgs>(args: SelectSubset<T, MeetupInviteSheetUpdateArgs<ExtArgs>>): Prisma__MeetupInviteSheetClient<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetupInviteSheets.
     * @param {MeetupInviteSheetDeleteManyArgs} args - Arguments to filter MeetupInviteSheets to delete.
     * @example
     * // Delete a few MeetupInviteSheets
     * const { count } = await prisma.meetupInviteSheet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetupInviteSheetDeleteManyArgs>(args?: SelectSubset<T, MeetupInviteSheetDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetupInviteSheets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupInviteSheetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetupInviteSheets
     * const meetupInviteSheet = await prisma.meetupInviteSheet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetupInviteSheetUpdateManyArgs>(args: SelectSubset<T, MeetupInviteSheetUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetupInviteSheet.
     * @param {MeetupInviteSheetUpsertArgs} args - Arguments to update or create a MeetupInviteSheet.
     * @example
     * // Update or create a MeetupInviteSheet
     * const meetupInviteSheet = await prisma.meetupInviteSheet.upsert({
     *   create: {
     *     // ... data to create a MeetupInviteSheet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetupInviteSheet we want to update
     *   }
     * })
     */
    upsert<T extends MeetupInviteSheetUpsertArgs>(args: SelectSubset<T, MeetupInviteSheetUpsertArgs<ExtArgs>>): Prisma__MeetupInviteSheetClient<$Result.GetResult<Prisma.$MeetupInviteSheetPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetupInviteSheets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupInviteSheetCountArgs} args - Arguments to filter MeetupInviteSheets to count.
     * @example
     * // Count the number of MeetupInviteSheets
     * const count = await prisma.meetupInviteSheet.count({
     *   where: {
     *     // ... the filter for the MeetupInviteSheets we want to count
     *   }
     * })
    **/
    count<T extends MeetupInviteSheetCountArgs>(
      args?: Subset<T, MeetupInviteSheetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupInviteSheetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetupInviteSheet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupInviteSheetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupInviteSheetAggregateArgs>(args: Subset<T, MeetupInviteSheetAggregateArgs>): Prisma.PrismaPromise<GetMeetupInviteSheetAggregateType<T>>

    /**
     * Group by MeetupInviteSheet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupInviteSheetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupInviteSheetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupInviteSheetGroupByArgs['orderBy'] }
        : { orderBy?: MeetupInviteSheetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupInviteSheetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupInviteSheetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetupInviteSheet model
   */
  readonly fields: MeetupInviteSheetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetupInviteSheet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupInviteSheetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetupInviteSheet model
   */
  interface MeetupInviteSheetFieldRefs {
    readonly id: FieldRef<"MeetupInviteSheet", 'String'>
    readonly link: FieldRef<"MeetupInviteSheet", 'String'>
    readonly meetupId: FieldRef<"MeetupInviteSheet", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MeetupInviteSheet findUnique
   */
  export type MeetupInviteSheetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * Filter, which MeetupInviteSheet to fetch.
     */
    where: MeetupInviteSheetWhereUniqueInput
  }

  /**
   * MeetupInviteSheet findUniqueOrThrow
   */
  export type MeetupInviteSheetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * Filter, which MeetupInviteSheet to fetch.
     */
    where: MeetupInviteSheetWhereUniqueInput
  }

  /**
   * MeetupInviteSheet findFirst
   */
  export type MeetupInviteSheetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * Filter, which MeetupInviteSheet to fetch.
     */
    where?: MeetupInviteSheetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupInviteSheets to fetch.
     */
    orderBy?: MeetupInviteSheetOrderByWithRelationInput | MeetupInviteSheetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupInviteSheets.
     */
    cursor?: MeetupInviteSheetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupInviteSheets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupInviteSheets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupInviteSheets.
     */
    distinct?: MeetupInviteSheetScalarFieldEnum | MeetupInviteSheetScalarFieldEnum[]
  }

  /**
   * MeetupInviteSheet findFirstOrThrow
   */
  export type MeetupInviteSheetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * Filter, which MeetupInviteSheet to fetch.
     */
    where?: MeetupInviteSheetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupInviteSheets to fetch.
     */
    orderBy?: MeetupInviteSheetOrderByWithRelationInput | MeetupInviteSheetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupInviteSheets.
     */
    cursor?: MeetupInviteSheetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupInviteSheets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupInviteSheets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupInviteSheets.
     */
    distinct?: MeetupInviteSheetScalarFieldEnum | MeetupInviteSheetScalarFieldEnum[]
  }

  /**
   * MeetupInviteSheet findMany
   */
  export type MeetupInviteSheetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * Filter, which MeetupInviteSheets to fetch.
     */
    where?: MeetupInviteSheetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupInviteSheets to fetch.
     */
    orderBy?: MeetupInviteSheetOrderByWithRelationInput | MeetupInviteSheetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetupInviteSheets.
     */
    cursor?: MeetupInviteSheetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupInviteSheets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupInviteSheets.
     */
    skip?: number
    distinct?: MeetupInviteSheetScalarFieldEnum | MeetupInviteSheetScalarFieldEnum[]
  }

  /**
   * MeetupInviteSheet create
   */
  export type MeetupInviteSheetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetupInviteSheet.
     */
    data: XOR<MeetupInviteSheetCreateInput, MeetupInviteSheetUncheckedCreateInput>
  }

  /**
   * MeetupInviteSheet createMany
   */
  export type MeetupInviteSheetCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetupInviteSheets.
     */
    data: MeetupInviteSheetCreateManyInput | MeetupInviteSheetCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetupInviteSheet update
   */
  export type MeetupInviteSheetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetupInviteSheet.
     */
    data: XOR<MeetupInviteSheetUpdateInput, MeetupInviteSheetUncheckedUpdateInput>
    /**
     * Choose, which MeetupInviteSheet to update.
     */
    where: MeetupInviteSheetWhereUniqueInput
  }

  /**
   * MeetupInviteSheet updateMany
   */
  export type MeetupInviteSheetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetupInviteSheets.
     */
    data: XOR<MeetupInviteSheetUpdateManyMutationInput, MeetupInviteSheetUncheckedUpdateManyInput>
    /**
     * Filter which MeetupInviteSheets to update
     */
    where?: MeetupInviteSheetWhereInput
    /**
     * Limit how many MeetupInviteSheets to update.
     */
    limit?: number
  }

  /**
   * MeetupInviteSheet upsert
   */
  export type MeetupInviteSheetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetupInviteSheet to update in case it exists.
     */
    where: MeetupInviteSheetWhereUniqueInput
    /**
     * In case the MeetupInviteSheet found by the `where` argument doesn't exist, create a new MeetupInviteSheet with this data.
     */
    create: XOR<MeetupInviteSheetCreateInput, MeetupInviteSheetUncheckedCreateInput>
    /**
     * In case the MeetupInviteSheet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupInviteSheetUpdateInput, MeetupInviteSheetUncheckedUpdateInput>
  }

  /**
   * MeetupInviteSheet delete
   */
  export type MeetupInviteSheetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
    /**
     * Filter which MeetupInviteSheet to delete.
     */
    where: MeetupInviteSheetWhereUniqueInput
  }

  /**
   * MeetupInviteSheet deleteMany
   */
  export type MeetupInviteSheetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupInviteSheets to delete
     */
    where?: MeetupInviteSheetWhereInput
    /**
     * Limit how many MeetupInviteSheets to delete.
     */
    limit?: number
  }

  /**
   * MeetupInviteSheet without action
   */
  export type MeetupInviteSheetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupInviteSheet
     */
    select?: MeetupInviteSheetSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupInviteSheet
     */
    omit?: MeetupInviteSheetOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInviteSheetInclude<ExtArgs> | null
  }


  /**
   * Model MeetupRole
   */

  export type AggregateMeetupRole = {
    _count: MeetupRoleCountAggregateOutputType | null
    _avg: MeetupRoleAvgAggregateOutputType | null
    _sum: MeetupRoleSumAggregateOutputType | null
    _min: MeetupRoleMinAggregateOutputType | null
    _max: MeetupRoleMaxAggregateOutputType | null
  }

  export type MeetupRoleAvgAggregateOutputType = {
    subscriptionPrice: Decimal | null
  }

  export type MeetupRoleSumAggregateOutputType = {
    subscriptionPrice: Decimal | null
  }

  export type MeetupRoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    subscriptionPrice: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetupRoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    subscriptionPrice: Decimal | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetupRoleCountAggregateOutputType = {
    id: number
    name: number
    subscriptionPrice: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetupRoleAvgAggregateInputType = {
    subscriptionPrice?: true
  }

  export type MeetupRoleSumAggregateInputType = {
    subscriptionPrice?: true
  }

  export type MeetupRoleMinAggregateInputType = {
    id?: true
    name?: true
    subscriptionPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetupRoleMaxAggregateInputType = {
    id?: true
    name?: true
    subscriptionPrice?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetupRoleCountAggregateInputType = {
    id?: true
    name?: true
    subscriptionPrice?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetupRoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupRole to aggregate.
     */
    where?: MeetupRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupRoles to fetch.
     */
    orderBy?: MeetupRoleOrderByWithRelationInput | MeetupRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetupRoles
    **/
    _count?: true | MeetupRoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MeetupRoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MeetupRoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupRoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupRoleMaxAggregateInputType
  }

  export type GetMeetupRoleAggregateType<T extends MeetupRoleAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetupRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetupRole[P]>
      : GetScalarType<T[P], AggregateMeetupRole[P]>
  }




  export type MeetupRoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupRoleWhereInput
    orderBy?: MeetupRoleOrderByWithAggregationInput | MeetupRoleOrderByWithAggregationInput[]
    by: MeetupRoleScalarFieldEnum[] | MeetupRoleScalarFieldEnum
    having?: MeetupRoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupRoleCountAggregateInputType | true
    _avg?: MeetupRoleAvgAggregateInputType
    _sum?: MeetupRoleSumAggregateInputType
    _min?: MeetupRoleMinAggregateInputType
    _max?: MeetupRoleMaxAggregateInputType
  }

  export type MeetupRoleGroupByOutputType = {
    id: string
    name: string
    subscriptionPrice: Decimal
    createdAt: Date
    updatedAt: Date
    _count: MeetupRoleCountAggregateOutputType | null
    _avg: MeetupRoleAvgAggregateOutputType | null
    _sum: MeetupRoleSumAggregateOutputType | null
    _min: MeetupRoleMinAggregateOutputType | null
    _max: MeetupRoleMaxAggregateOutputType | null
  }

  type GetMeetupRoleGroupByPayload<T extends MeetupRoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupRoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupRoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupRoleGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupRoleGroupByOutputType[P]>
        }
      >
    >


  export type MeetupRoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    subscriptionPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptions?: boolean | MeetupRole$subscriptionsArgs<ExtArgs>
    _count?: boolean | MeetupRoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetupRole"]>



  export type MeetupRoleSelectScalar = {
    id?: boolean
    name?: boolean
    subscriptionPrice?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MeetupRoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "subscriptionPrice" | "createdAt" | "updatedAt", ExtArgs["result"]["meetupRole"]>
  export type MeetupRoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptions?: boolean | MeetupRole$subscriptionsArgs<ExtArgs>
    _count?: boolean | MeetupRoleCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $MeetupRolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetupRole"
    objects: {
      subscriptions: Prisma.$SubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      subscriptionPrice: Prisma.Decimal
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meetupRole"]>
    composites: {}
  }

  type MeetupRoleGetPayload<S extends boolean | null | undefined | MeetupRoleDefaultArgs> = $Result.GetResult<Prisma.$MeetupRolePayload, S>

  type MeetupRoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetupRoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetupRoleCountAggregateInputType | true
    }

  export interface MeetupRoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetupRole'], meta: { name: 'MeetupRole' } }
    /**
     * Find zero or one MeetupRole that matches the filter.
     * @param {MeetupRoleFindUniqueArgs} args - Arguments to find a MeetupRole
     * @example
     * // Get one MeetupRole
     * const meetupRole = await prisma.meetupRole.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetupRoleFindUniqueArgs>(args: SelectSubset<T, MeetupRoleFindUniqueArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetupRole that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetupRoleFindUniqueOrThrowArgs} args - Arguments to find a MeetupRole
     * @example
     * // Get one MeetupRole
     * const meetupRole = await prisma.meetupRole.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetupRoleFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetupRoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupRole that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupRoleFindFirstArgs} args - Arguments to find a MeetupRole
     * @example
     * // Get one MeetupRole
     * const meetupRole = await prisma.meetupRole.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetupRoleFindFirstArgs>(args?: SelectSubset<T, MeetupRoleFindFirstArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupRole that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupRoleFindFirstOrThrowArgs} args - Arguments to find a MeetupRole
     * @example
     * // Get one MeetupRole
     * const meetupRole = await prisma.meetupRole.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetupRoleFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetupRoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetupRoles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupRoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetupRoles
     * const meetupRoles = await prisma.meetupRole.findMany()
     * 
     * // Get first 10 MeetupRoles
     * const meetupRoles = await prisma.meetupRole.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupRoleWithIdOnly = await prisma.meetupRole.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetupRoleFindManyArgs>(args?: SelectSubset<T, MeetupRoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetupRole.
     * @param {MeetupRoleCreateArgs} args - Arguments to create a MeetupRole.
     * @example
     * // Create one MeetupRole
     * const MeetupRole = await prisma.meetupRole.create({
     *   data: {
     *     // ... data to create a MeetupRole
     *   }
     * })
     * 
     */
    create<T extends MeetupRoleCreateArgs>(args: SelectSubset<T, MeetupRoleCreateArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetupRoles.
     * @param {MeetupRoleCreateManyArgs} args - Arguments to create many MeetupRoles.
     * @example
     * // Create many MeetupRoles
     * const meetupRole = await prisma.meetupRole.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetupRoleCreateManyArgs>(args?: SelectSubset<T, MeetupRoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetupRole.
     * @param {MeetupRoleDeleteArgs} args - Arguments to delete one MeetupRole.
     * @example
     * // Delete one MeetupRole
     * const MeetupRole = await prisma.meetupRole.delete({
     *   where: {
     *     // ... filter to delete one MeetupRole
     *   }
     * })
     * 
     */
    delete<T extends MeetupRoleDeleteArgs>(args: SelectSubset<T, MeetupRoleDeleteArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetupRole.
     * @param {MeetupRoleUpdateArgs} args - Arguments to update one MeetupRole.
     * @example
     * // Update one MeetupRole
     * const meetupRole = await prisma.meetupRole.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetupRoleUpdateArgs>(args: SelectSubset<T, MeetupRoleUpdateArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetupRoles.
     * @param {MeetupRoleDeleteManyArgs} args - Arguments to filter MeetupRoles to delete.
     * @example
     * // Delete a few MeetupRoles
     * const { count } = await prisma.meetupRole.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetupRoleDeleteManyArgs>(args?: SelectSubset<T, MeetupRoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetupRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupRoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetupRoles
     * const meetupRole = await prisma.meetupRole.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetupRoleUpdateManyArgs>(args: SelectSubset<T, MeetupRoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetupRole.
     * @param {MeetupRoleUpsertArgs} args - Arguments to update or create a MeetupRole.
     * @example
     * // Update or create a MeetupRole
     * const meetupRole = await prisma.meetupRole.upsert({
     *   create: {
     *     // ... data to create a MeetupRole
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetupRole we want to update
     *   }
     * })
     */
    upsert<T extends MeetupRoleUpsertArgs>(args: SelectSubset<T, MeetupRoleUpsertArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetupRoles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupRoleCountArgs} args - Arguments to filter MeetupRoles to count.
     * @example
     * // Count the number of MeetupRoles
     * const count = await prisma.meetupRole.count({
     *   where: {
     *     // ... the filter for the MeetupRoles we want to count
     *   }
     * })
    **/
    count<T extends MeetupRoleCountArgs>(
      args?: Subset<T, MeetupRoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupRoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetupRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupRoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupRoleAggregateArgs>(args: Subset<T, MeetupRoleAggregateArgs>): Prisma.PrismaPromise<GetMeetupRoleAggregateType<T>>

    /**
     * Group by MeetupRole.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupRoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupRoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupRoleGroupByArgs['orderBy'] }
        : { orderBy?: MeetupRoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupRoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetupRole model
   */
  readonly fields: MeetupRoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetupRole.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupRoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriptions<T extends MeetupRole$subscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, MeetupRole$subscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetupRole model
   */
  interface MeetupRoleFieldRefs {
    readonly id: FieldRef<"MeetupRole", 'String'>
    readonly name: FieldRef<"MeetupRole", 'String'>
    readonly subscriptionPrice: FieldRef<"MeetupRole", 'Decimal'>
    readonly createdAt: FieldRef<"MeetupRole", 'DateTime'>
    readonly updatedAt: FieldRef<"MeetupRole", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MeetupRole findUnique
   */
  export type MeetupRoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * Filter, which MeetupRole to fetch.
     */
    where: MeetupRoleWhereUniqueInput
  }

  /**
   * MeetupRole findUniqueOrThrow
   */
  export type MeetupRoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * Filter, which MeetupRole to fetch.
     */
    where: MeetupRoleWhereUniqueInput
  }

  /**
   * MeetupRole findFirst
   */
  export type MeetupRoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * Filter, which MeetupRole to fetch.
     */
    where?: MeetupRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupRoles to fetch.
     */
    orderBy?: MeetupRoleOrderByWithRelationInput | MeetupRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupRoles.
     */
    cursor?: MeetupRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupRoles.
     */
    distinct?: MeetupRoleScalarFieldEnum | MeetupRoleScalarFieldEnum[]
  }

  /**
   * MeetupRole findFirstOrThrow
   */
  export type MeetupRoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * Filter, which MeetupRole to fetch.
     */
    where?: MeetupRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupRoles to fetch.
     */
    orderBy?: MeetupRoleOrderByWithRelationInput | MeetupRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupRoles.
     */
    cursor?: MeetupRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupRoles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupRoles.
     */
    distinct?: MeetupRoleScalarFieldEnum | MeetupRoleScalarFieldEnum[]
  }

  /**
   * MeetupRole findMany
   */
  export type MeetupRoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * Filter, which MeetupRoles to fetch.
     */
    where?: MeetupRoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupRoles to fetch.
     */
    orderBy?: MeetupRoleOrderByWithRelationInput | MeetupRoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetupRoles.
     */
    cursor?: MeetupRoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupRoles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupRoles.
     */
    skip?: number
    distinct?: MeetupRoleScalarFieldEnum | MeetupRoleScalarFieldEnum[]
  }

  /**
   * MeetupRole create
   */
  export type MeetupRoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetupRole.
     */
    data: XOR<MeetupRoleCreateInput, MeetupRoleUncheckedCreateInput>
  }

  /**
   * MeetupRole createMany
   */
  export type MeetupRoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetupRoles.
     */
    data: MeetupRoleCreateManyInput | MeetupRoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetupRole update
   */
  export type MeetupRoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetupRole.
     */
    data: XOR<MeetupRoleUpdateInput, MeetupRoleUncheckedUpdateInput>
    /**
     * Choose, which MeetupRole to update.
     */
    where: MeetupRoleWhereUniqueInput
  }

  /**
   * MeetupRole updateMany
   */
  export type MeetupRoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetupRoles.
     */
    data: XOR<MeetupRoleUpdateManyMutationInput, MeetupRoleUncheckedUpdateManyInput>
    /**
     * Filter which MeetupRoles to update
     */
    where?: MeetupRoleWhereInput
    /**
     * Limit how many MeetupRoles to update.
     */
    limit?: number
  }

  /**
   * MeetupRole upsert
   */
  export type MeetupRoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetupRole to update in case it exists.
     */
    where: MeetupRoleWhereUniqueInput
    /**
     * In case the MeetupRole found by the `where` argument doesn't exist, create a new MeetupRole with this data.
     */
    create: XOR<MeetupRoleCreateInput, MeetupRoleUncheckedCreateInput>
    /**
     * In case the MeetupRole was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupRoleUpdateInput, MeetupRoleUncheckedUpdateInput>
  }

  /**
   * MeetupRole delete
   */
  export type MeetupRoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
    /**
     * Filter which MeetupRole to delete.
     */
    where: MeetupRoleWhereUniqueInput
  }

  /**
   * MeetupRole deleteMany
   */
  export type MeetupRoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupRoles to delete
     */
    where?: MeetupRoleWhereInput
    /**
     * Limit how many MeetupRoles to delete.
     */
    limit?: number
  }

  /**
   * MeetupRole.subscriptions
   */
  export type MeetupRole$subscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    cursor?: SubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * MeetupRole without action
   */
  export type MeetupRoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupRole
     */
    select?: MeetupRoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupRole
     */
    omit?: MeetupRoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupRoleInclude<ExtArgs> | null
  }


  /**
   * Model MeetupAdmin
   */

  export type AggregateMeetupAdmin = {
    _count: MeetupAdminCountAggregateOutputType | null
    _min: MeetupAdminMinAggregateOutputType | null
    _max: MeetupAdminMaxAggregateOutputType | null
  }

  export type MeetupAdminMinAggregateOutputType = {
    id: string | null
    meetupId: string | null
    personId: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetupAdminMaxAggregateOutputType = {
    id: string | null
    meetupId: string | null
    personId: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetupAdminCountAggregateOutputType = {
    id: number
    meetupId: number
    personId: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetupAdminMinAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetupAdminMaxAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetupAdminCountAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetupAdminAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupAdmin to aggregate.
     */
    where?: MeetupAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupAdmins to fetch.
     */
    orderBy?: MeetupAdminOrderByWithRelationInput | MeetupAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetupAdmins
    **/
    _count?: true | MeetupAdminCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupAdminMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupAdminMaxAggregateInputType
  }

  export type GetMeetupAdminAggregateType<T extends MeetupAdminAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetupAdmin]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetupAdmin[P]>
      : GetScalarType<T[P], AggregateMeetupAdmin[P]>
  }




  export type MeetupAdminGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupAdminWhereInput
    orderBy?: MeetupAdminOrderByWithAggregationInput | MeetupAdminOrderByWithAggregationInput[]
    by: MeetupAdminScalarFieldEnum[] | MeetupAdminScalarFieldEnum
    having?: MeetupAdminScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupAdminCountAggregateInputType | true
    _min?: MeetupAdminMinAggregateInputType
    _max?: MeetupAdminMaxAggregateInputType
  }

  export type MeetupAdminGroupByOutputType = {
    id: string
    meetupId: string
    personId: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: MeetupAdminCountAggregateOutputType | null
    _min: MeetupAdminMinAggregateOutputType | null
    _max: MeetupAdminMaxAggregateOutputType | null
  }

  type GetMeetupAdminGroupByPayload<T extends MeetupAdminGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupAdminGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupAdminGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupAdminGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupAdminGroupByOutputType[P]>
        }
      >
    >


  export type MeetupAdminSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetupId?: boolean
    personId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetupAdmin"]>



  export type MeetupAdminSelectScalar = {
    id?: boolean
    meetupId?: boolean
    personId?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MeetupAdminOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "meetupId" | "personId" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["meetupAdmin"]>
  export type MeetupAdminInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }

  export type $MeetupAdminPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetupAdmin"
    objects: {
      meetup: Prisma.$MeetupPayload<ExtArgs>
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      meetupId: string
      personId: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meetupAdmin"]>
    composites: {}
  }

  type MeetupAdminGetPayload<S extends boolean | null | undefined | MeetupAdminDefaultArgs> = $Result.GetResult<Prisma.$MeetupAdminPayload, S>

  type MeetupAdminCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetupAdminFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetupAdminCountAggregateInputType | true
    }

  export interface MeetupAdminDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetupAdmin'], meta: { name: 'MeetupAdmin' } }
    /**
     * Find zero or one MeetupAdmin that matches the filter.
     * @param {MeetupAdminFindUniqueArgs} args - Arguments to find a MeetupAdmin
     * @example
     * // Get one MeetupAdmin
     * const meetupAdmin = await prisma.meetupAdmin.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetupAdminFindUniqueArgs>(args: SelectSubset<T, MeetupAdminFindUniqueArgs<ExtArgs>>): Prisma__MeetupAdminClient<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetupAdmin that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetupAdminFindUniqueOrThrowArgs} args - Arguments to find a MeetupAdmin
     * @example
     * // Get one MeetupAdmin
     * const meetupAdmin = await prisma.meetupAdmin.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetupAdminFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetupAdminFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetupAdminClient<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupAdmin that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupAdminFindFirstArgs} args - Arguments to find a MeetupAdmin
     * @example
     * // Get one MeetupAdmin
     * const meetupAdmin = await prisma.meetupAdmin.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetupAdminFindFirstArgs>(args?: SelectSubset<T, MeetupAdminFindFirstArgs<ExtArgs>>): Prisma__MeetupAdminClient<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupAdmin that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupAdminFindFirstOrThrowArgs} args - Arguments to find a MeetupAdmin
     * @example
     * // Get one MeetupAdmin
     * const meetupAdmin = await prisma.meetupAdmin.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetupAdminFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetupAdminFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetupAdminClient<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetupAdmins that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupAdminFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetupAdmins
     * const meetupAdmins = await prisma.meetupAdmin.findMany()
     * 
     * // Get first 10 MeetupAdmins
     * const meetupAdmins = await prisma.meetupAdmin.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupAdminWithIdOnly = await prisma.meetupAdmin.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetupAdminFindManyArgs>(args?: SelectSubset<T, MeetupAdminFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetupAdmin.
     * @param {MeetupAdminCreateArgs} args - Arguments to create a MeetupAdmin.
     * @example
     * // Create one MeetupAdmin
     * const MeetupAdmin = await prisma.meetupAdmin.create({
     *   data: {
     *     // ... data to create a MeetupAdmin
     *   }
     * })
     * 
     */
    create<T extends MeetupAdminCreateArgs>(args: SelectSubset<T, MeetupAdminCreateArgs<ExtArgs>>): Prisma__MeetupAdminClient<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetupAdmins.
     * @param {MeetupAdminCreateManyArgs} args - Arguments to create many MeetupAdmins.
     * @example
     * // Create many MeetupAdmins
     * const meetupAdmin = await prisma.meetupAdmin.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetupAdminCreateManyArgs>(args?: SelectSubset<T, MeetupAdminCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetupAdmin.
     * @param {MeetupAdminDeleteArgs} args - Arguments to delete one MeetupAdmin.
     * @example
     * // Delete one MeetupAdmin
     * const MeetupAdmin = await prisma.meetupAdmin.delete({
     *   where: {
     *     // ... filter to delete one MeetupAdmin
     *   }
     * })
     * 
     */
    delete<T extends MeetupAdminDeleteArgs>(args: SelectSubset<T, MeetupAdminDeleteArgs<ExtArgs>>): Prisma__MeetupAdminClient<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetupAdmin.
     * @param {MeetupAdminUpdateArgs} args - Arguments to update one MeetupAdmin.
     * @example
     * // Update one MeetupAdmin
     * const meetupAdmin = await prisma.meetupAdmin.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetupAdminUpdateArgs>(args: SelectSubset<T, MeetupAdminUpdateArgs<ExtArgs>>): Prisma__MeetupAdminClient<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetupAdmins.
     * @param {MeetupAdminDeleteManyArgs} args - Arguments to filter MeetupAdmins to delete.
     * @example
     * // Delete a few MeetupAdmins
     * const { count } = await prisma.meetupAdmin.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetupAdminDeleteManyArgs>(args?: SelectSubset<T, MeetupAdminDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetupAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupAdminUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetupAdmins
     * const meetupAdmin = await prisma.meetupAdmin.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetupAdminUpdateManyArgs>(args: SelectSubset<T, MeetupAdminUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetupAdmin.
     * @param {MeetupAdminUpsertArgs} args - Arguments to update or create a MeetupAdmin.
     * @example
     * // Update or create a MeetupAdmin
     * const meetupAdmin = await prisma.meetupAdmin.upsert({
     *   create: {
     *     // ... data to create a MeetupAdmin
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetupAdmin we want to update
     *   }
     * })
     */
    upsert<T extends MeetupAdminUpsertArgs>(args: SelectSubset<T, MeetupAdminUpsertArgs<ExtArgs>>): Prisma__MeetupAdminClient<$Result.GetResult<Prisma.$MeetupAdminPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetupAdmins.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupAdminCountArgs} args - Arguments to filter MeetupAdmins to count.
     * @example
     * // Count the number of MeetupAdmins
     * const count = await prisma.meetupAdmin.count({
     *   where: {
     *     // ... the filter for the MeetupAdmins we want to count
     *   }
     * })
    **/
    count<T extends MeetupAdminCountArgs>(
      args?: Subset<T, MeetupAdminCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupAdminCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetupAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupAdminAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupAdminAggregateArgs>(args: Subset<T, MeetupAdminAggregateArgs>): Prisma.PrismaPromise<GetMeetupAdminAggregateType<T>>

    /**
     * Group by MeetupAdmin.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupAdminGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupAdminGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupAdminGroupByArgs['orderBy'] }
        : { orderBy?: MeetupAdminGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupAdminGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupAdminGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetupAdmin model
   */
  readonly fields: MeetupAdminFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetupAdmin.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupAdminClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetupAdmin model
   */
  interface MeetupAdminFieldRefs {
    readonly id: FieldRef<"MeetupAdmin", 'String'>
    readonly meetupId: FieldRef<"MeetupAdmin", 'String'>
    readonly personId: FieldRef<"MeetupAdmin", 'String'>
    readonly role: FieldRef<"MeetupAdmin", 'String'>
    readonly createdAt: FieldRef<"MeetupAdmin", 'DateTime'>
    readonly updatedAt: FieldRef<"MeetupAdmin", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MeetupAdmin findUnique
   */
  export type MeetupAdminFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * Filter, which MeetupAdmin to fetch.
     */
    where: MeetupAdminWhereUniqueInput
  }

  /**
   * MeetupAdmin findUniqueOrThrow
   */
  export type MeetupAdminFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * Filter, which MeetupAdmin to fetch.
     */
    where: MeetupAdminWhereUniqueInput
  }

  /**
   * MeetupAdmin findFirst
   */
  export type MeetupAdminFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * Filter, which MeetupAdmin to fetch.
     */
    where?: MeetupAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupAdmins to fetch.
     */
    orderBy?: MeetupAdminOrderByWithRelationInput | MeetupAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupAdmins.
     */
    cursor?: MeetupAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupAdmins.
     */
    distinct?: MeetupAdminScalarFieldEnum | MeetupAdminScalarFieldEnum[]
  }

  /**
   * MeetupAdmin findFirstOrThrow
   */
  export type MeetupAdminFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * Filter, which MeetupAdmin to fetch.
     */
    where?: MeetupAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupAdmins to fetch.
     */
    orderBy?: MeetupAdminOrderByWithRelationInput | MeetupAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupAdmins.
     */
    cursor?: MeetupAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupAdmins.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupAdmins.
     */
    distinct?: MeetupAdminScalarFieldEnum | MeetupAdminScalarFieldEnum[]
  }

  /**
   * MeetupAdmin findMany
   */
  export type MeetupAdminFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * Filter, which MeetupAdmins to fetch.
     */
    where?: MeetupAdminWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupAdmins to fetch.
     */
    orderBy?: MeetupAdminOrderByWithRelationInput | MeetupAdminOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetupAdmins.
     */
    cursor?: MeetupAdminWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupAdmins from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupAdmins.
     */
    skip?: number
    distinct?: MeetupAdminScalarFieldEnum | MeetupAdminScalarFieldEnum[]
  }

  /**
   * MeetupAdmin create
   */
  export type MeetupAdminCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetupAdmin.
     */
    data: XOR<MeetupAdminCreateInput, MeetupAdminUncheckedCreateInput>
  }

  /**
   * MeetupAdmin createMany
   */
  export type MeetupAdminCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetupAdmins.
     */
    data: MeetupAdminCreateManyInput | MeetupAdminCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetupAdmin update
   */
  export type MeetupAdminUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetupAdmin.
     */
    data: XOR<MeetupAdminUpdateInput, MeetupAdminUncheckedUpdateInput>
    /**
     * Choose, which MeetupAdmin to update.
     */
    where: MeetupAdminWhereUniqueInput
  }

  /**
   * MeetupAdmin updateMany
   */
  export type MeetupAdminUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetupAdmins.
     */
    data: XOR<MeetupAdminUpdateManyMutationInput, MeetupAdminUncheckedUpdateManyInput>
    /**
     * Filter which MeetupAdmins to update
     */
    where?: MeetupAdminWhereInput
    /**
     * Limit how many MeetupAdmins to update.
     */
    limit?: number
  }

  /**
   * MeetupAdmin upsert
   */
  export type MeetupAdminUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetupAdmin to update in case it exists.
     */
    where: MeetupAdminWhereUniqueInput
    /**
     * In case the MeetupAdmin found by the `where` argument doesn't exist, create a new MeetupAdmin with this data.
     */
    create: XOR<MeetupAdminCreateInput, MeetupAdminUncheckedCreateInput>
    /**
     * In case the MeetupAdmin was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupAdminUpdateInput, MeetupAdminUncheckedUpdateInput>
  }

  /**
   * MeetupAdmin delete
   */
  export type MeetupAdminDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
    /**
     * Filter which MeetupAdmin to delete.
     */
    where: MeetupAdminWhereUniqueInput
  }

  /**
   * MeetupAdmin deleteMany
   */
  export type MeetupAdminDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupAdmins to delete
     */
    where?: MeetupAdminWhereInput
    /**
     * Limit how many MeetupAdmins to delete.
     */
    limit?: number
  }

  /**
   * MeetupAdmin without action
   */
  export type MeetupAdminDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupAdmin
     */
    select?: MeetupAdminSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupAdmin
     */
    omit?: MeetupAdminOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupAdminInclude<ExtArgs> | null
  }


  /**
   * Model MeetupFollower
   */

  export type AggregateMeetupFollower = {
    _count: MeetupFollowerCountAggregateOutputType | null
    _min: MeetupFollowerMinAggregateOutputType | null
    _max: MeetupFollowerMaxAggregateOutputType | null
  }

  export type MeetupFollowerMinAggregateOutputType = {
    id: string | null
    meetupId: string | null
    personId: string | null
    createdAt: Date | null
  }

  export type MeetupFollowerMaxAggregateOutputType = {
    id: string | null
    meetupId: string | null
    personId: string | null
    createdAt: Date | null
  }

  export type MeetupFollowerCountAggregateOutputType = {
    id: number
    meetupId: number
    personId: number
    createdAt: number
    _all: number
  }


  export type MeetupFollowerMinAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    createdAt?: true
  }

  export type MeetupFollowerMaxAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    createdAt?: true
  }

  export type MeetupFollowerCountAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    createdAt?: true
    _all?: true
  }

  export type MeetupFollowerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupFollower to aggregate.
     */
    where?: MeetupFollowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupFollowers to fetch.
     */
    orderBy?: MeetupFollowerOrderByWithRelationInput | MeetupFollowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupFollowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupFollowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupFollowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetupFollowers
    **/
    _count?: true | MeetupFollowerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupFollowerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupFollowerMaxAggregateInputType
  }

  export type GetMeetupFollowerAggregateType<T extends MeetupFollowerAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetupFollower]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetupFollower[P]>
      : GetScalarType<T[P], AggregateMeetupFollower[P]>
  }




  export type MeetupFollowerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupFollowerWhereInput
    orderBy?: MeetupFollowerOrderByWithAggregationInput | MeetupFollowerOrderByWithAggregationInput[]
    by: MeetupFollowerScalarFieldEnum[] | MeetupFollowerScalarFieldEnum
    having?: MeetupFollowerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupFollowerCountAggregateInputType | true
    _min?: MeetupFollowerMinAggregateInputType
    _max?: MeetupFollowerMaxAggregateInputType
  }

  export type MeetupFollowerGroupByOutputType = {
    id: string
    meetupId: string
    personId: string
    createdAt: Date
    _count: MeetupFollowerCountAggregateOutputType | null
    _min: MeetupFollowerMinAggregateOutputType | null
    _max: MeetupFollowerMaxAggregateOutputType | null
  }

  type GetMeetupFollowerGroupByPayload<T extends MeetupFollowerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupFollowerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupFollowerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupFollowerGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupFollowerGroupByOutputType[P]>
        }
      >
    >


  export type MeetupFollowerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetupId?: boolean
    personId?: boolean
    createdAt?: boolean
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetupFollower"]>



  export type MeetupFollowerSelectScalar = {
    id?: boolean
    meetupId?: boolean
    personId?: boolean
    createdAt?: boolean
  }

  export type MeetupFollowerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "meetupId" | "personId" | "createdAt", ExtArgs["result"]["meetupFollower"]>
  export type MeetupFollowerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }

  export type $MeetupFollowerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetupFollower"
    objects: {
      meetup: Prisma.$MeetupPayload<ExtArgs>
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      meetupId: string
      personId: string
      createdAt: Date
    }, ExtArgs["result"]["meetupFollower"]>
    composites: {}
  }

  type MeetupFollowerGetPayload<S extends boolean | null | undefined | MeetupFollowerDefaultArgs> = $Result.GetResult<Prisma.$MeetupFollowerPayload, S>

  type MeetupFollowerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetupFollowerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetupFollowerCountAggregateInputType | true
    }

  export interface MeetupFollowerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetupFollower'], meta: { name: 'MeetupFollower' } }
    /**
     * Find zero or one MeetupFollower that matches the filter.
     * @param {MeetupFollowerFindUniqueArgs} args - Arguments to find a MeetupFollower
     * @example
     * // Get one MeetupFollower
     * const meetupFollower = await prisma.meetupFollower.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetupFollowerFindUniqueArgs>(args: SelectSubset<T, MeetupFollowerFindUniqueArgs<ExtArgs>>): Prisma__MeetupFollowerClient<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetupFollower that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetupFollowerFindUniqueOrThrowArgs} args - Arguments to find a MeetupFollower
     * @example
     * // Get one MeetupFollower
     * const meetupFollower = await prisma.meetupFollower.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetupFollowerFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetupFollowerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetupFollowerClient<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupFollower that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFollowerFindFirstArgs} args - Arguments to find a MeetupFollower
     * @example
     * // Get one MeetupFollower
     * const meetupFollower = await prisma.meetupFollower.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetupFollowerFindFirstArgs>(args?: SelectSubset<T, MeetupFollowerFindFirstArgs<ExtArgs>>): Prisma__MeetupFollowerClient<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupFollower that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFollowerFindFirstOrThrowArgs} args - Arguments to find a MeetupFollower
     * @example
     * // Get one MeetupFollower
     * const meetupFollower = await prisma.meetupFollower.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetupFollowerFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetupFollowerFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetupFollowerClient<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetupFollowers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFollowerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetupFollowers
     * const meetupFollowers = await prisma.meetupFollower.findMany()
     * 
     * // Get first 10 MeetupFollowers
     * const meetupFollowers = await prisma.meetupFollower.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupFollowerWithIdOnly = await prisma.meetupFollower.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetupFollowerFindManyArgs>(args?: SelectSubset<T, MeetupFollowerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetupFollower.
     * @param {MeetupFollowerCreateArgs} args - Arguments to create a MeetupFollower.
     * @example
     * // Create one MeetupFollower
     * const MeetupFollower = await prisma.meetupFollower.create({
     *   data: {
     *     // ... data to create a MeetupFollower
     *   }
     * })
     * 
     */
    create<T extends MeetupFollowerCreateArgs>(args: SelectSubset<T, MeetupFollowerCreateArgs<ExtArgs>>): Prisma__MeetupFollowerClient<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetupFollowers.
     * @param {MeetupFollowerCreateManyArgs} args - Arguments to create many MeetupFollowers.
     * @example
     * // Create many MeetupFollowers
     * const meetupFollower = await prisma.meetupFollower.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetupFollowerCreateManyArgs>(args?: SelectSubset<T, MeetupFollowerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetupFollower.
     * @param {MeetupFollowerDeleteArgs} args - Arguments to delete one MeetupFollower.
     * @example
     * // Delete one MeetupFollower
     * const MeetupFollower = await prisma.meetupFollower.delete({
     *   where: {
     *     // ... filter to delete one MeetupFollower
     *   }
     * })
     * 
     */
    delete<T extends MeetupFollowerDeleteArgs>(args: SelectSubset<T, MeetupFollowerDeleteArgs<ExtArgs>>): Prisma__MeetupFollowerClient<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetupFollower.
     * @param {MeetupFollowerUpdateArgs} args - Arguments to update one MeetupFollower.
     * @example
     * // Update one MeetupFollower
     * const meetupFollower = await prisma.meetupFollower.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetupFollowerUpdateArgs>(args: SelectSubset<T, MeetupFollowerUpdateArgs<ExtArgs>>): Prisma__MeetupFollowerClient<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetupFollowers.
     * @param {MeetupFollowerDeleteManyArgs} args - Arguments to filter MeetupFollowers to delete.
     * @example
     * // Delete a few MeetupFollowers
     * const { count } = await prisma.meetupFollower.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetupFollowerDeleteManyArgs>(args?: SelectSubset<T, MeetupFollowerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetupFollowers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFollowerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetupFollowers
     * const meetupFollower = await prisma.meetupFollower.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetupFollowerUpdateManyArgs>(args: SelectSubset<T, MeetupFollowerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetupFollower.
     * @param {MeetupFollowerUpsertArgs} args - Arguments to update or create a MeetupFollower.
     * @example
     * // Update or create a MeetupFollower
     * const meetupFollower = await prisma.meetupFollower.upsert({
     *   create: {
     *     // ... data to create a MeetupFollower
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetupFollower we want to update
     *   }
     * })
     */
    upsert<T extends MeetupFollowerUpsertArgs>(args: SelectSubset<T, MeetupFollowerUpsertArgs<ExtArgs>>): Prisma__MeetupFollowerClient<$Result.GetResult<Prisma.$MeetupFollowerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetupFollowers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFollowerCountArgs} args - Arguments to filter MeetupFollowers to count.
     * @example
     * // Count the number of MeetupFollowers
     * const count = await prisma.meetupFollower.count({
     *   where: {
     *     // ... the filter for the MeetupFollowers we want to count
     *   }
     * })
    **/
    count<T extends MeetupFollowerCountArgs>(
      args?: Subset<T, MeetupFollowerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupFollowerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetupFollower.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFollowerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupFollowerAggregateArgs>(args: Subset<T, MeetupFollowerAggregateArgs>): Prisma.PrismaPromise<GetMeetupFollowerAggregateType<T>>

    /**
     * Group by MeetupFollower.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupFollowerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupFollowerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupFollowerGroupByArgs['orderBy'] }
        : { orderBy?: MeetupFollowerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupFollowerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupFollowerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetupFollower model
   */
  readonly fields: MeetupFollowerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetupFollower.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupFollowerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetupFollower model
   */
  interface MeetupFollowerFieldRefs {
    readonly id: FieldRef<"MeetupFollower", 'String'>
    readonly meetupId: FieldRef<"MeetupFollower", 'String'>
    readonly personId: FieldRef<"MeetupFollower", 'String'>
    readonly createdAt: FieldRef<"MeetupFollower", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MeetupFollower findUnique
   */
  export type MeetupFollowerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * Filter, which MeetupFollower to fetch.
     */
    where: MeetupFollowerWhereUniqueInput
  }

  /**
   * MeetupFollower findUniqueOrThrow
   */
  export type MeetupFollowerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * Filter, which MeetupFollower to fetch.
     */
    where: MeetupFollowerWhereUniqueInput
  }

  /**
   * MeetupFollower findFirst
   */
  export type MeetupFollowerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * Filter, which MeetupFollower to fetch.
     */
    where?: MeetupFollowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupFollowers to fetch.
     */
    orderBy?: MeetupFollowerOrderByWithRelationInput | MeetupFollowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupFollowers.
     */
    cursor?: MeetupFollowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupFollowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupFollowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupFollowers.
     */
    distinct?: MeetupFollowerScalarFieldEnum | MeetupFollowerScalarFieldEnum[]
  }

  /**
   * MeetupFollower findFirstOrThrow
   */
  export type MeetupFollowerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * Filter, which MeetupFollower to fetch.
     */
    where?: MeetupFollowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupFollowers to fetch.
     */
    orderBy?: MeetupFollowerOrderByWithRelationInput | MeetupFollowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupFollowers.
     */
    cursor?: MeetupFollowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupFollowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupFollowers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupFollowers.
     */
    distinct?: MeetupFollowerScalarFieldEnum | MeetupFollowerScalarFieldEnum[]
  }

  /**
   * MeetupFollower findMany
   */
  export type MeetupFollowerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * Filter, which MeetupFollowers to fetch.
     */
    where?: MeetupFollowerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupFollowers to fetch.
     */
    orderBy?: MeetupFollowerOrderByWithRelationInput | MeetupFollowerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetupFollowers.
     */
    cursor?: MeetupFollowerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupFollowers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupFollowers.
     */
    skip?: number
    distinct?: MeetupFollowerScalarFieldEnum | MeetupFollowerScalarFieldEnum[]
  }

  /**
   * MeetupFollower create
   */
  export type MeetupFollowerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetupFollower.
     */
    data: XOR<MeetupFollowerCreateInput, MeetupFollowerUncheckedCreateInput>
  }

  /**
   * MeetupFollower createMany
   */
  export type MeetupFollowerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetupFollowers.
     */
    data: MeetupFollowerCreateManyInput | MeetupFollowerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetupFollower update
   */
  export type MeetupFollowerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetupFollower.
     */
    data: XOR<MeetupFollowerUpdateInput, MeetupFollowerUncheckedUpdateInput>
    /**
     * Choose, which MeetupFollower to update.
     */
    where: MeetupFollowerWhereUniqueInput
  }

  /**
   * MeetupFollower updateMany
   */
  export type MeetupFollowerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetupFollowers.
     */
    data: XOR<MeetupFollowerUpdateManyMutationInput, MeetupFollowerUncheckedUpdateManyInput>
    /**
     * Filter which MeetupFollowers to update
     */
    where?: MeetupFollowerWhereInput
    /**
     * Limit how many MeetupFollowers to update.
     */
    limit?: number
  }

  /**
   * MeetupFollower upsert
   */
  export type MeetupFollowerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetupFollower to update in case it exists.
     */
    where: MeetupFollowerWhereUniqueInput
    /**
     * In case the MeetupFollower found by the `where` argument doesn't exist, create a new MeetupFollower with this data.
     */
    create: XOR<MeetupFollowerCreateInput, MeetupFollowerUncheckedCreateInput>
    /**
     * In case the MeetupFollower was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupFollowerUpdateInput, MeetupFollowerUncheckedUpdateInput>
  }

  /**
   * MeetupFollower delete
   */
  export type MeetupFollowerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
    /**
     * Filter which MeetupFollower to delete.
     */
    where: MeetupFollowerWhereUniqueInput
  }

  /**
   * MeetupFollower deleteMany
   */
  export type MeetupFollowerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupFollowers to delete
     */
    where?: MeetupFollowerWhereInput
    /**
     * Limit how many MeetupFollowers to delete.
     */
    limit?: number
  }

  /**
   * MeetupFollower without action
   */
  export type MeetupFollowerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupFollower
     */
    select?: MeetupFollowerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupFollower
     */
    omit?: MeetupFollowerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupFollowerInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetups?: boolean | Category$meetupsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>



  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["category"]>
  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetups?: boolean | Category$meetupsArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      meetups: Prisma.$MeetupPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetups<T extends Category$meetupsArgs<ExtArgs> = {}>(args?: Subset<T, Category$meetupsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
    readonly createdAt: FieldRef<"Category", 'DateTime'>
    readonly updatedAt: FieldRef<"Category", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to update.
     */
    limit?: number
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
    /**
     * Limit how many Categories to delete.
     */
    limit?: number
  }

  /**
   * Category.meetups
   */
  export type Category$meetupsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Meetup
     */
    select?: MeetupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Meetup
     */
    omit?: MeetupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupInclude<ExtArgs> | null
    where?: MeetupWhereInput
    orderBy?: MeetupOrderByWithRelationInput | MeetupOrderByWithRelationInput[]
    cursor?: MeetupWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MeetupScalarFieldEnum | MeetupScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Category
     */
    omit?: CategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Subscription
   */

  export type AggregateSubscription = {
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  export type SubscriptionMinAggregateOutputType = {
    id: string | null
    personId: string | null
    meetupId: string | null
    meetupRoleId: string | null
    certificateLink: string | null
    presenceConfirmation: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionMaxAggregateOutputType = {
    id: string | null
    personId: string | null
    meetupId: string | null
    meetupRoleId: string | null
    certificateLink: string | null
    presenceConfirmation: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionCountAggregateOutputType = {
    id: number
    personId: number
    meetupId: number
    meetupRoleId: number
    certificateLink: number
    presenceConfirmation: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionMinAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    meetupRoleId?: true
    certificateLink?: true
    presenceConfirmation?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionMaxAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    meetupRoleId?: true
    certificateLink?: true
    presenceConfirmation?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionCountAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    meetupRoleId?: true
    certificateLink?: true
    presenceConfirmation?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscription to aggregate.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Subscriptions
    **/
    _count?: true | SubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionMaxAggregateInputType
  }

  export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscription[P]>
      : GetScalarType<T[P], AggregateSubscription[P]>
  }




  export type SubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionWhereInput
    orderBy?: SubscriptionOrderByWithAggregationInput | SubscriptionOrderByWithAggregationInput[]
    by: SubscriptionScalarFieldEnum[] | SubscriptionScalarFieldEnum
    having?: SubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionCountAggregateInputType | true
    _min?: SubscriptionMinAggregateInputType
    _max?: SubscriptionMaxAggregateInputType
  }

  export type SubscriptionGroupByOutputType = {
    id: string
    personId: string
    meetupId: string
    meetupRoleId: string
    certificateLink: string | null
    presenceConfirmation: boolean | null
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionCountAggregateOutputType | null
    _min: SubscriptionMinAggregateOutputType | null
    _max: SubscriptionMaxAggregateOutputType | null
  }

  type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personId?: boolean
    meetupId?: boolean
    meetupRoleId?: boolean
    certificateLink?: boolean
    presenceConfirmation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    meetupRole?: boolean | MeetupRoleDefaultArgs<ExtArgs>
    subscriptionPayments?: boolean | Subscription$subscriptionPaymentsArgs<ExtArgs>
    _count?: boolean | SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscription"]>



  export type SubscriptionSelectScalar = {
    id?: boolean
    personId?: boolean
    meetupId?: boolean
    meetupRoleId?: boolean
    certificateLink?: boolean
    presenceConfirmation?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "personId" | "meetupId" | "meetupRoleId" | "certificateLink" | "presenceConfirmation" | "createdAt" | "updatedAt", ExtArgs["result"]["subscription"]>
  export type SubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    meetupRole?: boolean | MeetupRoleDefaultArgs<ExtArgs>
    subscriptionPayments?: boolean | Subscription$subscriptionPaymentsArgs<ExtArgs>
    _count?: boolean | SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Subscription"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
      meetup: Prisma.$MeetupPayload<ExtArgs>
      meetupRole: Prisma.$MeetupRolePayload<ExtArgs>
      subscriptionPayments: Prisma.$SubscriptionPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      personId: string
      meetupId: string
      meetupRoleId: string
      certificateLink: string | null
      presenceConfirmation: boolean | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscription"]>
    composites: {}
  }

  type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPayload, S>

  type SubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionCountAggregateInputType | true
    }

  export interface SubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
    /**
     * Find zero or one Subscription that matches the filter.
     * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionFindUniqueArgs>(args: SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionFindFirstArgs>(args?: SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Subscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
     * @example
     * // Get one Subscription
     * const subscription = await prisma.subscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Subscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Subscriptions
     * const subscriptions = await prisma.subscription.findMany()
     * 
     * // Get first 10 Subscriptions
     * const subscriptions = await prisma.subscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionFindManyArgs>(args?: SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Subscription.
     * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
     * @example
     * // Create one Subscription
     * const Subscription = await prisma.subscription.create({
     *   data: {
     *     // ... data to create a Subscription
     *   }
     * })
     * 
     */
    create<T extends SubscriptionCreateArgs>(args: SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Subscriptions.
     * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
     * @example
     * // Create many Subscriptions
     * const subscription = await prisma.subscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionCreateManyArgs>(args?: SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Subscription.
     * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
     * @example
     * // Delete one Subscription
     * const Subscription = await prisma.subscription.delete({
     *   where: {
     *     // ... filter to delete one Subscription
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionDeleteArgs>(args: SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Subscription.
     * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
     * @example
     * // Update one Subscription
     * const subscription = await prisma.subscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionUpdateArgs>(args: SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Subscriptions.
     * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
     * @example
     * // Delete a few Subscriptions
     * const { count } = await prisma.subscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionDeleteManyArgs>(args?: SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Subscriptions
     * const subscription = await prisma.subscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionUpdateManyArgs>(args: SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Subscription.
     * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
     * @example
     * // Update or create a Subscription
     * const subscription = await prisma.subscription.upsert({
     *   create: {
     *     // ... data to create a Subscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Subscription we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionUpsertArgs>(args: SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Subscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
     * @example
     * // Count the number of Subscriptions
     * const count = await prisma.subscription.count({
     *   where: {
     *     // ... the filter for the Subscriptions we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionCountArgs>(
      args?: Subset<T, SubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionAggregateArgs>(args: Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

    /**
     * Group by Subscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Subscription model
   */
  readonly fields: SubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Subscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    meetupRole<T extends MeetupRoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupRoleDefaultArgs<ExtArgs>>): Prisma__MeetupRoleClient<$Result.GetResult<Prisma.$MeetupRolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    subscriptionPayments<T extends Subscription$subscriptionPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Subscription$subscriptionPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Subscription model
   */
  interface SubscriptionFieldRefs {
    readonly id: FieldRef<"Subscription", 'String'>
    readonly personId: FieldRef<"Subscription", 'String'>
    readonly meetupId: FieldRef<"Subscription", 'String'>
    readonly meetupRoleId: FieldRef<"Subscription", 'String'>
    readonly certificateLink: FieldRef<"Subscription", 'String'>
    readonly presenceConfirmation: FieldRef<"Subscription", 'Boolean'>
    readonly createdAt: FieldRef<"Subscription", 'DateTime'>
    readonly updatedAt: FieldRef<"Subscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Subscription findUnique
   */
  export type SubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findUniqueOrThrow
   */
  export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription findFirst
   */
  export type SubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findFirstOrThrow
   */
  export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscription to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Subscriptions.
     */
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription findMany
   */
  export type SubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which Subscriptions to fetch.
     */
    where?: SubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Subscriptions to fetch.
     */
    orderBy?: SubscriptionOrderByWithRelationInput | SubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Subscriptions.
     */
    cursor?: SubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Subscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Subscriptions.
     */
    skip?: number
    distinct?: SubscriptionScalarFieldEnum | SubscriptionScalarFieldEnum[]
  }

  /**
   * Subscription create
   */
  export type SubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a Subscription.
     */
    data: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
  }

  /**
   * Subscription createMany
   */
  export type SubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Subscriptions.
     */
    data: SubscriptionCreateManyInput | SubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Subscription update
   */
  export type SubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a Subscription.
     */
    data: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
    /**
     * Choose, which Subscription to update.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription updateMany
   */
  export type SubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Subscriptions.
     */
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which Subscriptions to update
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to update.
     */
    limit?: number
  }

  /**
   * Subscription upsert
   */
  export type SubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the Subscription to update in case it exists.
     */
    where: SubscriptionWhereUniqueInput
    /**
     * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
     */
    create: XOR<SubscriptionCreateInput, SubscriptionUncheckedCreateInput>
    /**
     * In case the Subscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionUpdateInput, SubscriptionUncheckedUpdateInput>
  }

  /**
   * Subscription delete
   */
  export type SubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
    /**
     * Filter which Subscription to delete.
     */
    where: SubscriptionWhereUniqueInput
  }

  /**
   * Subscription deleteMany
   */
  export type SubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Subscriptions to delete
     */
    where?: SubscriptionWhereInput
    /**
     * Limit how many Subscriptions to delete.
     */
    limit?: number
  }

  /**
   * Subscription.subscriptionPayments
   */
  export type Subscription$subscriptionPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    where?: SubscriptionPaymentWhereInput
    orderBy?: SubscriptionPaymentOrderByWithRelationInput | SubscriptionPaymentOrderByWithRelationInput[]
    cursor?: SubscriptionPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionPaymentScalarFieldEnum | SubscriptionPaymentScalarFieldEnum[]
  }

  /**
   * Subscription without action
   */
  export type SubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Subscription
     */
    select?: SubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Subscription
     */
    omit?: SubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model Invite
   */

  export type AggregateInvite = {
    _count: InviteCountAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  export type InviteMinAggregateOutputType = {
    id: string | null
    personId: string | null
    meetupId: string | null
    link: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InviteMaxAggregateOutputType = {
    id: string | null
    personId: string | null
    meetupId: string | null
    link: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type InviteCountAggregateOutputType = {
    id: number
    personId: number
    meetupId: number
    link: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type InviteMinAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    link?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InviteMaxAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    link?: true
    createdAt?: true
    updatedAt?: true
  }

  export type InviteCountAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    link?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type InviteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invite to aggregate.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Invites
    **/
    _count?: true | InviteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InviteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InviteMaxAggregateInputType
  }

  export type GetInviteAggregateType<T extends InviteAggregateArgs> = {
        [P in keyof T & keyof AggregateInvite]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInvite[P]>
      : GetScalarType<T[P], AggregateInvite[P]>
  }




  export type InviteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InviteWhereInput
    orderBy?: InviteOrderByWithAggregationInput | InviteOrderByWithAggregationInput[]
    by: InviteScalarFieldEnum[] | InviteScalarFieldEnum
    having?: InviteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InviteCountAggregateInputType | true
    _min?: InviteMinAggregateInputType
    _max?: InviteMaxAggregateInputType
  }

  export type InviteGroupByOutputType = {
    id: string
    personId: string
    meetupId: string
    link: string
    createdAt: Date
    updatedAt: Date
    _count: InviteCountAggregateOutputType | null
    _min: InviteMinAggregateOutputType | null
    _max: InviteMaxAggregateOutputType | null
  }

  type GetInviteGroupByPayload<T extends InviteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InviteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InviteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InviteGroupByOutputType[P]>
            : GetScalarType<T[P], InviteGroupByOutputType[P]>
        }
      >
    >


  export type InviteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personId?: boolean
    meetupId?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["invite"]>



  export type InviteSelectScalar = {
    id?: boolean
    personId?: boolean
    meetupId?: boolean
    link?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type InviteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "personId" | "meetupId" | "link" | "createdAt" | "updatedAt", ExtArgs["result"]["invite"]>
  export type InviteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
  }

  export type $InvitePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Invite"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
      meetup: Prisma.$MeetupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      personId: string
      meetupId: string
      link: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["invite"]>
    composites: {}
  }

  type InviteGetPayload<S extends boolean | null | undefined | InviteDefaultArgs> = $Result.GetResult<Prisma.$InvitePayload, S>

  type InviteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InviteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InviteCountAggregateInputType | true
    }

  export interface InviteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Invite'], meta: { name: 'Invite' } }
    /**
     * Find zero or one Invite that matches the filter.
     * @param {InviteFindUniqueArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InviteFindUniqueArgs>(args: SelectSubset<T, InviteFindUniqueArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Invite that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InviteFindUniqueOrThrowArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InviteFindUniqueOrThrowArgs>(args: SelectSubset<T, InviteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invite that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindFirstArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InviteFindFirstArgs>(args?: SelectSubset<T, InviteFindFirstArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Invite that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindFirstOrThrowArgs} args - Arguments to find a Invite
     * @example
     * // Get one Invite
     * const invite = await prisma.invite.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InviteFindFirstOrThrowArgs>(args?: SelectSubset<T, InviteFindFirstOrThrowArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Invites that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Invites
     * const invites = await prisma.invite.findMany()
     * 
     * // Get first 10 Invites
     * const invites = await prisma.invite.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inviteWithIdOnly = await prisma.invite.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InviteFindManyArgs>(args?: SelectSubset<T, InviteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Invite.
     * @param {InviteCreateArgs} args - Arguments to create a Invite.
     * @example
     * // Create one Invite
     * const Invite = await prisma.invite.create({
     *   data: {
     *     // ... data to create a Invite
     *   }
     * })
     * 
     */
    create<T extends InviteCreateArgs>(args: SelectSubset<T, InviteCreateArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Invites.
     * @param {InviteCreateManyArgs} args - Arguments to create many Invites.
     * @example
     * // Create many Invites
     * const invite = await prisma.invite.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InviteCreateManyArgs>(args?: SelectSubset<T, InviteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Invite.
     * @param {InviteDeleteArgs} args - Arguments to delete one Invite.
     * @example
     * // Delete one Invite
     * const Invite = await prisma.invite.delete({
     *   where: {
     *     // ... filter to delete one Invite
     *   }
     * })
     * 
     */
    delete<T extends InviteDeleteArgs>(args: SelectSubset<T, InviteDeleteArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Invite.
     * @param {InviteUpdateArgs} args - Arguments to update one Invite.
     * @example
     * // Update one Invite
     * const invite = await prisma.invite.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InviteUpdateArgs>(args: SelectSubset<T, InviteUpdateArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Invites.
     * @param {InviteDeleteManyArgs} args - Arguments to filter Invites to delete.
     * @example
     * // Delete a few Invites
     * const { count } = await prisma.invite.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InviteDeleteManyArgs>(args?: SelectSubset<T, InviteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Invites
     * const invite = await prisma.invite.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InviteUpdateManyArgs>(args: SelectSubset<T, InviteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Invite.
     * @param {InviteUpsertArgs} args - Arguments to update or create a Invite.
     * @example
     * // Update or create a Invite
     * const invite = await prisma.invite.upsert({
     *   create: {
     *     // ... data to create a Invite
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Invite we want to update
     *   }
     * })
     */
    upsert<T extends InviteUpsertArgs>(args: SelectSubset<T, InviteUpsertArgs<ExtArgs>>): Prisma__InviteClient<$Result.GetResult<Prisma.$InvitePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Invites.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteCountArgs} args - Arguments to filter Invites to count.
     * @example
     * // Count the number of Invites
     * const count = await prisma.invite.count({
     *   where: {
     *     // ... the filter for the Invites we want to count
     *   }
     * })
    **/
    count<T extends InviteCountArgs>(
      args?: Subset<T, InviteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InviteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InviteAggregateArgs>(args: Subset<T, InviteAggregateArgs>): Prisma.PrismaPromise<GetInviteAggregateType<T>>

    /**
     * Group by Invite.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InviteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InviteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InviteGroupByArgs['orderBy'] }
        : { orderBy?: InviteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InviteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInviteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Invite model
   */
  readonly fields: InviteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Invite.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InviteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Invite model
   */
  interface InviteFieldRefs {
    readonly id: FieldRef<"Invite", 'String'>
    readonly personId: FieldRef<"Invite", 'String'>
    readonly meetupId: FieldRef<"Invite", 'String'>
    readonly link: FieldRef<"Invite", 'String'>
    readonly createdAt: FieldRef<"Invite", 'DateTime'>
    readonly updatedAt: FieldRef<"Invite", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Invite findUnique
   */
  export type InviteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite findUniqueOrThrow
   */
  export type InviteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite findFirst
   */
  export type InviteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invites.
     */
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite findFirstOrThrow
   */
  export type InviteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invite to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Invites.
     */
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite findMany
   */
  export type InviteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter, which Invites to fetch.
     */
    where?: InviteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Invites to fetch.
     */
    orderBy?: InviteOrderByWithRelationInput | InviteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Invites.
     */
    cursor?: InviteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Invites from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Invites.
     */
    skip?: number
    distinct?: InviteScalarFieldEnum | InviteScalarFieldEnum[]
  }

  /**
   * Invite create
   */
  export type InviteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The data needed to create a Invite.
     */
    data: XOR<InviteCreateInput, InviteUncheckedCreateInput>
  }

  /**
   * Invite createMany
   */
  export type InviteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Invites.
     */
    data: InviteCreateManyInput | InviteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Invite update
   */
  export type InviteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The data needed to update a Invite.
     */
    data: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
    /**
     * Choose, which Invite to update.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite updateMany
   */
  export type InviteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Invites.
     */
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyInput>
    /**
     * Filter which Invites to update
     */
    where?: InviteWhereInput
    /**
     * Limit how many Invites to update.
     */
    limit?: number
  }

  /**
   * Invite upsert
   */
  export type InviteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * The filter to search for the Invite to update in case it exists.
     */
    where: InviteWhereUniqueInput
    /**
     * In case the Invite found by the `where` argument doesn't exist, create a new Invite with this data.
     */
    create: XOR<InviteCreateInput, InviteUncheckedCreateInput>
    /**
     * In case the Invite was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InviteUpdateInput, InviteUncheckedUpdateInput>
  }

  /**
   * Invite delete
   */
  export type InviteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
    /**
     * Filter which Invite to delete.
     */
    where: InviteWhereUniqueInput
  }

  /**
   * Invite deleteMany
   */
  export type InviteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Invites to delete
     */
    where?: InviteWhereInput
    /**
     * Limit how many Invites to delete.
     */
    limit?: number
  }

  /**
   * Invite without action
   */
  export type InviteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Invite
     */
    select?: InviteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Invite
     */
    omit?: InviteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InviteInclude<ExtArgs> | null
  }


  /**
   * Model Payment
   */

  export type AggregatePayment = {
    _count: PaymentCountAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  export type PaymentMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PaymentCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PaymentMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PaymentCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payment to aggregate.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Payments
    **/
    _count?: true | PaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PaymentMaxAggregateInputType
  }

  export type GetPaymentAggregateType<T extends PaymentAggregateArgs> = {
        [P in keyof T & keyof AggregatePayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayment[P]>
      : GetScalarType<T[P], AggregatePayment[P]>
  }




  export type PaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PaymentWhereInput
    orderBy?: PaymentOrderByWithAggregationInput | PaymentOrderByWithAggregationInput[]
    by: PaymentScalarFieldEnum[] | PaymentScalarFieldEnum
    having?: PaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PaymentCountAggregateInputType | true
    _min?: PaymentMinAggregateInputType
    _max?: PaymentMaxAggregateInputType
  }

  export type PaymentGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    _count: PaymentCountAggregateOutputType | null
    _min: PaymentMinAggregateOutputType | null
    _max: PaymentMaxAggregateOutputType | null
  }

  type GetPaymentGroupByPayload<T extends PaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PaymentGroupByOutputType[P]>
            : GetScalarType<T[P], PaymentGroupByOutputType[P]>
        }
      >
    >


  export type PaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscriptionPayments?: boolean | Payment$subscriptionPaymentsArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payment"]>



  export type PaymentSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt", ExtArgs["result"]["payment"]>
  export type PaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscriptionPayments?: boolean | Payment$subscriptionPaymentsArgs<ExtArgs>
    _count?: boolean | PaymentCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $PaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Payment"
    objects: {
      subscriptionPayments: Prisma.$SubscriptionPaymentPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payment"]>
    composites: {}
  }

  type PaymentGetPayload<S extends boolean | null | undefined | PaymentDefaultArgs> = $Result.GetResult<Prisma.$PaymentPayload, S>

  type PaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PaymentCountAggregateInputType | true
    }

  export interface PaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Payment'], meta: { name: 'Payment' } }
    /**
     * Find zero or one Payment that matches the filter.
     * @param {PaymentFindUniqueArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PaymentFindUniqueArgs>(args: SelectSubset<T, PaymentFindUniqueArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Payment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PaymentFindUniqueOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, PaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PaymentFindFirstArgs>(args?: SelectSubset<T, PaymentFindFirstArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Payment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindFirstOrThrowArgs} args - Arguments to find a Payment
     * @example
     * // Get one Payment
     * const payment = await prisma.payment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, PaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Payments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Payments
     * const payments = await prisma.payment.findMany()
     * 
     * // Get first 10 Payments
     * const payments = await prisma.payment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const paymentWithIdOnly = await prisma.payment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PaymentFindManyArgs>(args?: SelectSubset<T, PaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Payment.
     * @param {PaymentCreateArgs} args - Arguments to create a Payment.
     * @example
     * // Create one Payment
     * const Payment = await prisma.payment.create({
     *   data: {
     *     // ... data to create a Payment
     *   }
     * })
     * 
     */
    create<T extends PaymentCreateArgs>(args: SelectSubset<T, PaymentCreateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Payments.
     * @param {PaymentCreateManyArgs} args - Arguments to create many Payments.
     * @example
     * // Create many Payments
     * const payment = await prisma.payment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PaymentCreateManyArgs>(args?: SelectSubset<T, PaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Payment.
     * @param {PaymentDeleteArgs} args - Arguments to delete one Payment.
     * @example
     * // Delete one Payment
     * const Payment = await prisma.payment.delete({
     *   where: {
     *     // ... filter to delete one Payment
     *   }
     * })
     * 
     */
    delete<T extends PaymentDeleteArgs>(args: SelectSubset<T, PaymentDeleteArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Payment.
     * @param {PaymentUpdateArgs} args - Arguments to update one Payment.
     * @example
     * // Update one Payment
     * const payment = await prisma.payment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PaymentUpdateArgs>(args: SelectSubset<T, PaymentUpdateArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Payments.
     * @param {PaymentDeleteManyArgs} args - Arguments to filter Payments to delete.
     * @example
     * // Delete a few Payments
     * const { count } = await prisma.payment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PaymentDeleteManyArgs>(args?: SelectSubset<T, PaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Payments
     * const payment = await prisma.payment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PaymentUpdateManyArgs>(args: SelectSubset<T, PaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Payment.
     * @param {PaymentUpsertArgs} args - Arguments to update or create a Payment.
     * @example
     * // Update or create a Payment
     * const payment = await prisma.payment.upsert({
     *   create: {
     *     // ... data to create a Payment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Payment we want to update
     *   }
     * })
     */
    upsert<T extends PaymentUpsertArgs>(args: SelectSubset<T, PaymentUpsertArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Payments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentCountArgs} args - Arguments to filter Payments to count.
     * @example
     * // Count the number of Payments
     * const count = await prisma.payment.count({
     *   where: {
     *     // ... the filter for the Payments we want to count
     *   }
     * })
    **/
    count<T extends PaymentCountArgs>(
      args?: Subset<T, PaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PaymentAggregateArgs>(args: Subset<T, PaymentAggregateArgs>): Prisma.PrismaPromise<GetPaymentAggregateType<T>>

    /**
     * Group by Payment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PaymentGroupByArgs['orderBy'] }
        : { orderBy?: PaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Payment model
   */
  readonly fields: PaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Payment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscriptionPayments<T extends Payment$subscriptionPaymentsArgs<ExtArgs> = {}>(args?: Subset<T, Payment$subscriptionPaymentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Payment model
   */
  interface PaymentFieldRefs {
    readonly id: FieldRef<"Payment", 'String'>
    readonly createdAt: FieldRef<"Payment", 'DateTime'>
    readonly updatedAt: FieldRef<"Payment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Payment findUnique
   */
  export type PaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findUniqueOrThrow
   */
  export type PaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment findFirst
   */
  export type PaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findFirstOrThrow
   */
  export type PaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payment to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Payments.
     */
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment findMany
   */
  export type PaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter, which Payments to fetch.
     */
    where?: PaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Payments to fetch.
     */
    orderBy?: PaymentOrderByWithRelationInput | PaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Payments.
     */
    cursor?: PaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Payments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Payments.
     */
    skip?: number
    distinct?: PaymentScalarFieldEnum | PaymentScalarFieldEnum[]
  }

  /**
   * Payment create
   */
  export type PaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a Payment.
     */
    data: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
  }

  /**
   * Payment createMany
   */
  export type PaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Payments.
     */
    data: PaymentCreateManyInput | PaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Payment update
   */
  export type PaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a Payment.
     */
    data: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
    /**
     * Choose, which Payment to update.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment updateMany
   */
  export type PaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Payments.
     */
    data: XOR<PaymentUpdateManyMutationInput, PaymentUncheckedUpdateManyInput>
    /**
     * Filter which Payments to update
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to update.
     */
    limit?: number
  }

  /**
   * Payment upsert
   */
  export type PaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the Payment to update in case it exists.
     */
    where: PaymentWhereUniqueInput
    /**
     * In case the Payment found by the `where` argument doesn't exist, create a new Payment with this data.
     */
    create: XOR<PaymentCreateInput, PaymentUncheckedCreateInput>
    /**
     * In case the Payment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PaymentUpdateInput, PaymentUncheckedUpdateInput>
  }

  /**
   * Payment delete
   */
  export type PaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
    /**
     * Filter which Payment to delete.
     */
    where: PaymentWhereUniqueInput
  }

  /**
   * Payment deleteMany
   */
  export type PaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Payments to delete
     */
    where?: PaymentWhereInput
    /**
     * Limit how many Payments to delete.
     */
    limit?: number
  }

  /**
   * Payment.subscriptionPayments
   */
  export type Payment$subscriptionPaymentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    where?: SubscriptionPaymentWhereInput
    orderBy?: SubscriptionPaymentOrderByWithRelationInput | SubscriptionPaymentOrderByWithRelationInput[]
    cursor?: SubscriptionPaymentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubscriptionPaymentScalarFieldEnum | SubscriptionPaymentScalarFieldEnum[]
  }

  /**
   * Payment without action
   */
  export type PaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Payment
     */
    select?: PaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Payment
     */
    omit?: PaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PaymentInclude<ExtArgs> | null
  }


  /**
   * Model SubscriptionPayment
   */

  export type AggregateSubscriptionPayment = {
    _count: SubscriptionPaymentCountAggregateOutputType | null
    _avg: SubscriptionPaymentAvgAggregateOutputType | null
    _sum: SubscriptionPaymentSumAggregateOutputType | null
    _min: SubscriptionPaymentMinAggregateOutputType | null
    _max: SubscriptionPaymentMaxAggregateOutputType | null
  }

  export type SubscriptionPaymentAvgAggregateOutputType = {
    price: Decimal | null
  }

  export type SubscriptionPaymentSumAggregateOutputType = {
    price: Decimal | null
  }

  export type SubscriptionPaymentMinAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    paymentId: string | null
    price: Decimal | null
    paymentStatus: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionPaymentMaxAggregateOutputType = {
    id: string | null
    subscriptionId: string | null
    paymentId: string | null
    price: Decimal | null
    paymentStatus: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SubscriptionPaymentCountAggregateOutputType = {
    id: number
    subscriptionId: number
    paymentId: number
    price: number
    paymentStatus: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SubscriptionPaymentAvgAggregateInputType = {
    price?: true
  }

  export type SubscriptionPaymentSumAggregateInputType = {
    price?: true
  }

  export type SubscriptionPaymentMinAggregateInputType = {
    id?: true
    subscriptionId?: true
    paymentId?: true
    price?: true
    paymentStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionPaymentMaxAggregateInputType = {
    id?: true
    subscriptionId?: true
    paymentId?: true
    price?: true
    paymentStatus?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SubscriptionPaymentCountAggregateInputType = {
    id?: true
    subscriptionId?: true
    paymentId?: true
    price?: true
    paymentStatus?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SubscriptionPaymentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPayment to aggregate.
     */
    where?: SubscriptionPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPayments to fetch.
     */
    orderBy?: SubscriptionPaymentOrderByWithRelationInput | SubscriptionPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubscriptionPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SubscriptionPayments
    **/
    _count?: true | SubscriptionPaymentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubscriptionPaymentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubscriptionPaymentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubscriptionPaymentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubscriptionPaymentMaxAggregateInputType
  }

  export type GetSubscriptionPaymentAggregateType<T extends SubscriptionPaymentAggregateArgs> = {
        [P in keyof T & keyof AggregateSubscriptionPayment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubscriptionPayment[P]>
      : GetScalarType<T[P], AggregateSubscriptionPayment[P]>
  }




  export type SubscriptionPaymentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubscriptionPaymentWhereInput
    orderBy?: SubscriptionPaymentOrderByWithAggregationInput | SubscriptionPaymentOrderByWithAggregationInput[]
    by: SubscriptionPaymentScalarFieldEnum[] | SubscriptionPaymentScalarFieldEnum
    having?: SubscriptionPaymentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubscriptionPaymentCountAggregateInputType | true
    _avg?: SubscriptionPaymentAvgAggregateInputType
    _sum?: SubscriptionPaymentSumAggregateInputType
    _min?: SubscriptionPaymentMinAggregateInputType
    _max?: SubscriptionPaymentMaxAggregateInputType
  }

  export type SubscriptionPaymentGroupByOutputType = {
    id: string
    subscriptionId: string
    paymentId: string
    price: Decimal
    paymentStatus: boolean
    createdAt: Date
    updatedAt: Date
    _count: SubscriptionPaymentCountAggregateOutputType | null
    _avg: SubscriptionPaymentAvgAggregateOutputType | null
    _sum: SubscriptionPaymentSumAggregateOutputType | null
    _min: SubscriptionPaymentMinAggregateOutputType | null
    _max: SubscriptionPaymentMaxAggregateOutputType | null
  }

  type GetSubscriptionPaymentGroupByPayload<T extends SubscriptionPaymentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubscriptionPaymentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubscriptionPaymentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubscriptionPaymentGroupByOutputType[P]>
            : GetScalarType<T[P], SubscriptionPaymentGroupByOutputType[P]>
        }
      >
    >


  export type SubscriptionPaymentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    subscriptionId?: boolean
    paymentId?: boolean
    price?: boolean
    paymentStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["subscriptionPayment"]>



  export type SubscriptionPaymentSelectScalar = {
    id?: boolean
    subscriptionId?: boolean
    paymentId?: boolean
    price?: boolean
    paymentStatus?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SubscriptionPaymentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "subscriptionId" | "paymentId" | "price" | "paymentStatus" | "createdAt" | "updatedAt", ExtArgs["result"]["subscriptionPayment"]>
  export type SubscriptionPaymentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    subscription?: boolean | SubscriptionDefaultArgs<ExtArgs>
    payment?: boolean | PaymentDefaultArgs<ExtArgs>
  }

  export type $SubscriptionPaymentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SubscriptionPayment"
    objects: {
      subscription: Prisma.$SubscriptionPayload<ExtArgs>
      payment: Prisma.$PaymentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      subscriptionId: string
      paymentId: string
      price: Prisma.Decimal
      paymentStatus: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["subscriptionPayment"]>
    composites: {}
  }

  type SubscriptionPaymentGetPayload<S extends boolean | null | undefined | SubscriptionPaymentDefaultArgs> = $Result.GetResult<Prisma.$SubscriptionPaymentPayload, S>

  type SubscriptionPaymentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SubscriptionPaymentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SubscriptionPaymentCountAggregateInputType | true
    }

  export interface SubscriptionPaymentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SubscriptionPayment'], meta: { name: 'SubscriptionPayment' } }
    /**
     * Find zero or one SubscriptionPayment that matches the filter.
     * @param {SubscriptionPaymentFindUniqueArgs} args - Arguments to find a SubscriptionPayment
     * @example
     * // Get one SubscriptionPayment
     * const subscriptionPayment = await prisma.subscriptionPayment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SubscriptionPaymentFindUniqueArgs>(args: SelectSubset<T, SubscriptionPaymentFindUniqueArgs<ExtArgs>>): Prisma__SubscriptionPaymentClient<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SubscriptionPayment that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SubscriptionPaymentFindUniqueOrThrowArgs} args - Arguments to find a SubscriptionPayment
     * @example
     * // Get one SubscriptionPayment
     * const subscriptionPayment = await prisma.subscriptionPayment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SubscriptionPaymentFindUniqueOrThrowArgs>(args: SelectSubset<T, SubscriptionPaymentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPaymentClient<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPayment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPaymentFindFirstArgs} args - Arguments to find a SubscriptionPayment
     * @example
     * // Get one SubscriptionPayment
     * const subscriptionPayment = await prisma.subscriptionPayment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SubscriptionPaymentFindFirstArgs>(args?: SelectSubset<T, SubscriptionPaymentFindFirstArgs<ExtArgs>>): Prisma__SubscriptionPaymentClient<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SubscriptionPayment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPaymentFindFirstOrThrowArgs} args - Arguments to find a SubscriptionPayment
     * @example
     * // Get one SubscriptionPayment
     * const subscriptionPayment = await prisma.subscriptionPayment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SubscriptionPaymentFindFirstOrThrowArgs>(args?: SelectSubset<T, SubscriptionPaymentFindFirstOrThrowArgs<ExtArgs>>): Prisma__SubscriptionPaymentClient<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SubscriptionPayments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPaymentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SubscriptionPayments
     * const subscriptionPayments = await prisma.subscriptionPayment.findMany()
     * 
     * // Get first 10 SubscriptionPayments
     * const subscriptionPayments = await prisma.subscriptionPayment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const subscriptionPaymentWithIdOnly = await prisma.subscriptionPayment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SubscriptionPaymentFindManyArgs>(args?: SelectSubset<T, SubscriptionPaymentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SubscriptionPayment.
     * @param {SubscriptionPaymentCreateArgs} args - Arguments to create a SubscriptionPayment.
     * @example
     * // Create one SubscriptionPayment
     * const SubscriptionPayment = await prisma.subscriptionPayment.create({
     *   data: {
     *     // ... data to create a SubscriptionPayment
     *   }
     * })
     * 
     */
    create<T extends SubscriptionPaymentCreateArgs>(args: SelectSubset<T, SubscriptionPaymentCreateArgs<ExtArgs>>): Prisma__SubscriptionPaymentClient<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SubscriptionPayments.
     * @param {SubscriptionPaymentCreateManyArgs} args - Arguments to create many SubscriptionPayments.
     * @example
     * // Create many SubscriptionPayments
     * const subscriptionPayment = await prisma.subscriptionPayment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SubscriptionPaymentCreateManyArgs>(args?: SelectSubset<T, SubscriptionPaymentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a SubscriptionPayment.
     * @param {SubscriptionPaymentDeleteArgs} args - Arguments to delete one SubscriptionPayment.
     * @example
     * // Delete one SubscriptionPayment
     * const SubscriptionPayment = await prisma.subscriptionPayment.delete({
     *   where: {
     *     // ... filter to delete one SubscriptionPayment
     *   }
     * })
     * 
     */
    delete<T extends SubscriptionPaymentDeleteArgs>(args: SelectSubset<T, SubscriptionPaymentDeleteArgs<ExtArgs>>): Prisma__SubscriptionPaymentClient<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SubscriptionPayment.
     * @param {SubscriptionPaymentUpdateArgs} args - Arguments to update one SubscriptionPayment.
     * @example
     * // Update one SubscriptionPayment
     * const subscriptionPayment = await prisma.subscriptionPayment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SubscriptionPaymentUpdateArgs>(args: SelectSubset<T, SubscriptionPaymentUpdateArgs<ExtArgs>>): Prisma__SubscriptionPaymentClient<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SubscriptionPayments.
     * @param {SubscriptionPaymentDeleteManyArgs} args - Arguments to filter SubscriptionPayments to delete.
     * @example
     * // Delete a few SubscriptionPayments
     * const { count } = await prisma.subscriptionPayment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SubscriptionPaymentDeleteManyArgs>(args?: SelectSubset<T, SubscriptionPaymentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SubscriptionPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPaymentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SubscriptionPayments
     * const subscriptionPayment = await prisma.subscriptionPayment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SubscriptionPaymentUpdateManyArgs>(args: SelectSubset<T, SubscriptionPaymentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SubscriptionPayment.
     * @param {SubscriptionPaymentUpsertArgs} args - Arguments to update or create a SubscriptionPayment.
     * @example
     * // Update or create a SubscriptionPayment
     * const subscriptionPayment = await prisma.subscriptionPayment.upsert({
     *   create: {
     *     // ... data to create a SubscriptionPayment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SubscriptionPayment we want to update
     *   }
     * })
     */
    upsert<T extends SubscriptionPaymentUpsertArgs>(args: SelectSubset<T, SubscriptionPaymentUpsertArgs<ExtArgs>>): Prisma__SubscriptionPaymentClient<$Result.GetResult<Prisma.$SubscriptionPaymentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SubscriptionPayments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPaymentCountArgs} args - Arguments to filter SubscriptionPayments to count.
     * @example
     * // Count the number of SubscriptionPayments
     * const count = await prisma.subscriptionPayment.count({
     *   where: {
     *     // ... the filter for the SubscriptionPayments we want to count
     *   }
     * })
    **/
    count<T extends SubscriptionPaymentCountArgs>(
      args?: Subset<T, SubscriptionPaymentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubscriptionPaymentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SubscriptionPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPaymentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubscriptionPaymentAggregateArgs>(args: Subset<T, SubscriptionPaymentAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionPaymentAggregateType<T>>

    /**
     * Group by SubscriptionPayment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubscriptionPaymentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubscriptionPaymentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubscriptionPaymentGroupByArgs['orderBy'] }
        : { orderBy?: SubscriptionPaymentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubscriptionPaymentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionPaymentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SubscriptionPayment model
   */
  readonly fields: SubscriptionPaymentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SubscriptionPayment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubscriptionPaymentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    subscription<T extends SubscriptionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubscriptionDefaultArgs<ExtArgs>>): Prisma__SubscriptionClient<$Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payment<T extends PaymentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PaymentDefaultArgs<ExtArgs>>): Prisma__PaymentClient<$Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SubscriptionPayment model
   */
  interface SubscriptionPaymentFieldRefs {
    readonly id: FieldRef<"SubscriptionPayment", 'String'>
    readonly subscriptionId: FieldRef<"SubscriptionPayment", 'String'>
    readonly paymentId: FieldRef<"SubscriptionPayment", 'String'>
    readonly price: FieldRef<"SubscriptionPayment", 'Decimal'>
    readonly paymentStatus: FieldRef<"SubscriptionPayment", 'Boolean'>
    readonly createdAt: FieldRef<"SubscriptionPayment", 'DateTime'>
    readonly updatedAt: FieldRef<"SubscriptionPayment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SubscriptionPayment findUnique
   */
  export type SubscriptionPaymentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPayment to fetch.
     */
    where: SubscriptionPaymentWhereUniqueInput
  }

  /**
   * SubscriptionPayment findUniqueOrThrow
   */
  export type SubscriptionPaymentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPayment to fetch.
     */
    where: SubscriptionPaymentWhereUniqueInput
  }

  /**
   * SubscriptionPayment findFirst
   */
  export type SubscriptionPaymentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPayment to fetch.
     */
    where?: SubscriptionPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPayments to fetch.
     */
    orderBy?: SubscriptionPaymentOrderByWithRelationInput | SubscriptionPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPayments.
     */
    cursor?: SubscriptionPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPayments.
     */
    distinct?: SubscriptionPaymentScalarFieldEnum | SubscriptionPaymentScalarFieldEnum[]
  }

  /**
   * SubscriptionPayment findFirstOrThrow
   */
  export type SubscriptionPaymentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPayment to fetch.
     */
    where?: SubscriptionPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPayments to fetch.
     */
    orderBy?: SubscriptionPaymentOrderByWithRelationInput | SubscriptionPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SubscriptionPayments.
     */
    cursor?: SubscriptionPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPayments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SubscriptionPayments.
     */
    distinct?: SubscriptionPaymentScalarFieldEnum | SubscriptionPaymentScalarFieldEnum[]
  }

  /**
   * SubscriptionPayment findMany
   */
  export type SubscriptionPaymentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * Filter, which SubscriptionPayments to fetch.
     */
    where?: SubscriptionPaymentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SubscriptionPayments to fetch.
     */
    orderBy?: SubscriptionPaymentOrderByWithRelationInput | SubscriptionPaymentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SubscriptionPayments.
     */
    cursor?: SubscriptionPaymentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SubscriptionPayments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SubscriptionPayments.
     */
    skip?: number
    distinct?: SubscriptionPaymentScalarFieldEnum | SubscriptionPaymentScalarFieldEnum[]
  }

  /**
   * SubscriptionPayment create
   */
  export type SubscriptionPaymentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * The data needed to create a SubscriptionPayment.
     */
    data: XOR<SubscriptionPaymentCreateInput, SubscriptionPaymentUncheckedCreateInput>
  }

  /**
   * SubscriptionPayment createMany
   */
  export type SubscriptionPaymentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SubscriptionPayments.
     */
    data: SubscriptionPaymentCreateManyInput | SubscriptionPaymentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SubscriptionPayment update
   */
  export type SubscriptionPaymentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * The data needed to update a SubscriptionPayment.
     */
    data: XOR<SubscriptionPaymentUpdateInput, SubscriptionPaymentUncheckedUpdateInput>
    /**
     * Choose, which SubscriptionPayment to update.
     */
    where: SubscriptionPaymentWhereUniqueInput
  }

  /**
   * SubscriptionPayment updateMany
   */
  export type SubscriptionPaymentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SubscriptionPayments.
     */
    data: XOR<SubscriptionPaymentUpdateManyMutationInput, SubscriptionPaymentUncheckedUpdateManyInput>
    /**
     * Filter which SubscriptionPayments to update
     */
    where?: SubscriptionPaymentWhereInput
    /**
     * Limit how many SubscriptionPayments to update.
     */
    limit?: number
  }

  /**
   * SubscriptionPayment upsert
   */
  export type SubscriptionPaymentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * The filter to search for the SubscriptionPayment to update in case it exists.
     */
    where: SubscriptionPaymentWhereUniqueInput
    /**
     * In case the SubscriptionPayment found by the `where` argument doesn't exist, create a new SubscriptionPayment with this data.
     */
    create: XOR<SubscriptionPaymentCreateInput, SubscriptionPaymentUncheckedCreateInput>
    /**
     * In case the SubscriptionPayment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubscriptionPaymentUpdateInput, SubscriptionPaymentUncheckedUpdateInput>
  }

  /**
   * SubscriptionPayment delete
   */
  export type SubscriptionPaymentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
    /**
     * Filter which SubscriptionPayment to delete.
     */
    where: SubscriptionPaymentWhereUniqueInput
  }

  /**
   * SubscriptionPayment deleteMany
   */
  export type SubscriptionPaymentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SubscriptionPayments to delete
     */
    where?: SubscriptionPaymentWhereInput
    /**
     * Limit how many SubscriptionPayments to delete.
     */
    limit?: number
  }

  /**
   * SubscriptionPayment without action
   */
  export type SubscriptionPaymentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubscriptionPayment
     */
    select?: SubscriptionPaymentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SubscriptionPayment
     */
    omit?: SubscriptionPaymentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SubscriptionPaymentInclude<ExtArgs> | null
  }


  /**
   * Model Certificate
   */

  export type AggregateCertificate = {
    _count: CertificateCountAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  export type CertificateMinAggregateOutputType = {
    id: string | null
    personId: string | null
    meetupId: string | null
    link: string | null
    securityCode: string | null
    datetime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CertificateMaxAggregateOutputType = {
    id: string | null
    personId: string | null
    meetupId: string | null
    link: string | null
    securityCode: string | null
    datetime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CertificateCountAggregateOutputType = {
    id: number
    personId: number
    meetupId: number
    link: number
    securityCode: number
    datetime: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CertificateMinAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    link?: true
    securityCode?: true
    datetime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CertificateMaxAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    link?: true
    securityCode?: true
    datetime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CertificateCountAggregateInputType = {
    id?: true
    personId?: true
    meetupId?: true
    link?: true
    securityCode?: true
    datetime?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CertificateAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificate to aggregate.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Certificates
    **/
    _count?: true | CertificateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CertificateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CertificateMaxAggregateInputType
  }

  export type GetCertificateAggregateType<T extends CertificateAggregateArgs> = {
        [P in keyof T & keyof AggregateCertificate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCertificate[P]>
      : GetScalarType<T[P], AggregateCertificate[P]>
  }




  export type CertificateGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CertificateWhereInput
    orderBy?: CertificateOrderByWithAggregationInput | CertificateOrderByWithAggregationInput[]
    by: CertificateScalarFieldEnum[] | CertificateScalarFieldEnum
    having?: CertificateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CertificateCountAggregateInputType | true
    _min?: CertificateMinAggregateInputType
    _max?: CertificateMaxAggregateInputType
  }

  export type CertificateGroupByOutputType = {
    id: string
    personId: string
    meetupId: string
    link: string
    securityCode: string
    datetime: Date
    createdAt: Date
    updatedAt: Date
    _count: CertificateCountAggregateOutputType | null
    _min: CertificateMinAggregateOutputType | null
    _max: CertificateMaxAggregateOutputType | null
  }

  type GetCertificateGroupByPayload<T extends CertificateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CertificateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CertificateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CertificateGroupByOutputType[P]>
            : GetScalarType<T[P], CertificateGroupByOutputType[P]>
        }
      >
    >


  export type CertificateSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personId?: boolean
    meetupId?: boolean
    link?: boolean
    securityCode?: boolean
    datetime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    person?: boolean | PersonDefaultArgs<ExtArgs>
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["certificate"]>



  export type CertificateSelectScalar = {
    id?: boolean
    personId?: boolean
    meetupId?: boolean
    link?: boolean
    securityCode?: boolean
    datetime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CertificateOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "personId" | "meetupId" | "link" | "securityCode" | "datetime" | "createdAt" | "updatedAt", ExtArgs["result"]["certificate"]>
  export type CertificateInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    person?: boolean | PersonDefaultArgs<ExtArgs>
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
  }

  export type $CertificatePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Certificate"
    objects: {
      person: Prisma.$PersonPayload<ExtArgs>
      meetup: Prisma.$MeetupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      personId: string
      meetupId: string
      link: string
      securityCode: string
      datetime: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["certificate"]>
    composites: {}
  }

  type CertificateGetPayload<S extends boolean | null | undefined | CertificateDefaultArgs> = $Result.GetResult<Prisma.$CertificatePayload, S>

  type CertificateCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CertificateFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CertificateCountAggregateInputType | true
    }

  export interface CertificateDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Certificate'], meta: { name: 'Certificate' } }
    /**
     * Find zero or one Certificate that matches the filter.
     * @param {CertificateFindUniqueArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CertificateFindUniqueArgs>(args: SelectSubset<T, CertificateFindUniqueArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Certificate that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CertificateFindUniqueOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CertificateFindUniqueOrThrowArgs>(args: SelectSubset<T, CertificateFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CertificateFindFirstArgs>(args?: SelectSubset<T, CertificateFindFirstArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Certificate that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindFirstOrThrowArgs} args - Arguments to find a Certificate
     * @example
     * // Get one Certificate
     * const certificate = await prisma.certificate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CertificateFindFirstOrThrowArgs>(args?: SelectSubset<T, CertificateFindFirstOrThrowArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Certificates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Certificates
     * const certificates = await prisma.certificate.findMany()
     * 
     * // Get first 10 Certificates
     * const certificates = await prisma.certificate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const certificateWithIdOnly = await prisma.certificate.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CertificateFindManyArgs>(args?: SelectSubset<T, CertificateFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Certificate.
     * @param {CertificateCreateArgs} args - Arguments to create a Certificate.
     * @example
     * // Create one Certificate
     * const Certificate = await prisma.certificate.create({
     *   data: {
     *     // ... data to create a Certificate
     *   }
     * })
     * 
     */
    create<T extends CertificateCreateArgs>(args: SelectSubset<T, CertificateCreateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Certificates.
     * @param {CertificateCreateManyArgs} args - Arguments to create many Certificates.
     * @example
     * // Create many Certificates
     * const certificate = await prisma.certificate.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CertificateCreateManyArgs>(args?: SelectSubset<T, CertificateCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Certificate.
     * @param {CertificateDeleteArgs} args - Arguments to delete one Certificate.
     * @example
     * // Delete one Certificate
     * const Certificate = await prisma.certificate.delete({
     *   where: {
     *     // ... filter to delete one Certificate
     *   }
     * })
     * 
     */
    delete<T extends CertificateDeleteArgs>(args: SelectSubset<T, CertificateDeleteArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Certificate.
     * @param {CertificateUpdateArgs} args - Arguments to update one Certificate.
     * @example
     * // Update one Certificate
     * const certificate = await prisma.certificate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CertificateUpdateArgs>(args: SelectSubset<T, CertificateUpdateArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Certificates.
     * @param {CertificateDeleteManyArgs} args - Arguments to filter Certificates to delete.
     * @example
     * // Delete a few Certificates
     * const { count } = await prisma.certificate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CertificateDeleteManyArgs>(args?: SelectSubset<T, CertificateDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Certificates
     * const certificate = await prisma.certificate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CertificateUpdateManyArgs>(args: SelectSubset<T, CertificateUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Certificate.
     * @param {CertificateUpsertArgs} args - Arguments to update or create a Certificate.
     * @example
     * // Update or create a Certificate
     * const certificate = await prisma.certificate.upsert({
     *   create: {
     *     // ... data to create a Certificate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Certificate we want to update
     *   }
     * })
     */
    upsert<T extends CertificateUpsertArgs>(args: SelectSubset<T, CertificateUpsertArgs<ExtArgs>>): Prisma__CertificateClient<$Result.GetResult<Prisma.$CertificatePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Certificates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateCountArgs} args - Arguments to filter Certificates to count.
     * @example
     * // Count the number of Certificates
     * const count = await prisma.certificate.count({
     *   where: {
     *     // ... the filter for the Certificates we want to count
     *   }
     * })
    **/
    count<T extends CertificateCountArgs>(
      args?: Subset<T, CertificateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CertificateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CertificateAggregateArgs>(args: Subset<T, CertificateAggregateArgs>): Prisma.PrismaPromise<GetCertificateAggregateType<T>>

    /**
     * Group by Certificate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CertificateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CertificateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CertificateGroupByArgs['orderBy'] }
        : { orderBy?: CertificateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CertificateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCertificateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Certificate model
   */
  readonly fields: CertificateFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Certificate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CertificateClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Certificate model
   */
  interface CertificateFieldRefs {
    readonly id: FieldRef<"Certificate", 'String'>
    readonly personId: FieldRef<"Certificate", 'String'>
    readonly meetupId: FieldRef<"Certificate", 'String'>
    readonly link: FieldRef<"Certificate", 'String'>
    readonly securityCode: FieldRef<"Certificate", 'String'>
    readonly datetime: FieldRef<"Certificate", 'DateTime'>
    readonly createdAt: FieldRef<"Certificate", 'DateTime'>
    readonly updatedAt: FieldRef<"Certificate", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Certificate findUnique
   */
  export type CertificateFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findUniqueOrThrow
   */
  export type CertificateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate findFirst
   */
  export type CertificateFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findFirstOrThrow
   */
  export type CertificateFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificate to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Certificates.
     */
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate findMany
   */
  export type CertificateFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter, which Certificates to fetch.
     */
    where?: CertificateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Certificates to fetch.
     */
    orderBy?: CertificateOrderByWithRelationInput | CertificateOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Certificates.
     */
    cursor?: CertificateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Certificates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Certificates.
     */
    skip?: number
    distinct?: CertificateScalarFieldEnum | CertificateScalarFieldEnum[]
  }

  /**
   * Certificate create
   */
  export type CertificateCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to create a Certificate.
     */
    data: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
  }

  /**
   * Certificate createMany
   */
  export type CertificateCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Certificates.
     */
    data: CertificateCreateManyInput | CertificateCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Certificate update
   */
  export type CertificateUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The data needed to update a Certificate.
     */
    data: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
    /**
     * Choose, which Certificate to update.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate updateMany
   */
  export type CertificateUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Certificates.
     */
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyInput>
    /**
     * Filter which Certificates to update
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to update.
     */
    limit?: number
  }

  /**
   * Certificate upsert
   */
  export type CertificateUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * The filter to search for the Certificate to update in case it exists.
     */
    where: CertificateWhereUniqueInput
    /**
     * In case the Certificate found by the `where` argument doesn't exist, create a new Certificate with this data.
     */
    create: XOR<CertificateCreateInput, CertificateUncheckedCreateInput>
    /**
     * In case the Certificate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CertificateUpdateInput, CertificateUncheckedUpdateInput>
  }

  /**
   * Certificate delete
   */
  export type CertificateDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
    /**
     * Filter which Certificate to delete.
     */
    where: CertificateWhereUniqueInput
  }

  /**
   * Certificate deleteMany
   */
  export type CertificateDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Certificates to delete
     */
    where?: CertificateWhereInput
    /**
     * Limit how many Certificates to delete.
     */
    limit?: number
  }

  /**
   * Certificate without action
   */
  export type CertificateDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Certificate
     */
    select?: CertificateSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Certificate
     */
    omit?: CertificateOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CertificateInclude<ExtArgs> | null
  }


  /**
   * Model MeetupMedia
   */

  export type AggregateMeetupMedia = {
    _count: MeetupMediaCountAggregateOutputType | null
    _min: MeetupMediaMinAggregateOutputType | null
    _max: MeetupMediaMaxAggregateOutputType | null
  }

  export type MeetupMediaMinAggregateOutputType = {
    id: string | null
    meetupId: string | null
    personId: string | null
    link: string | null
    datetime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetupMediaMaxAggregateOutputType = {
    id: string | null
    meetupId: string | null
    personId: string | null
    link: string | null
    datetime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type MeetupMediaCountAggregateOutputType = {
    id: number
    meetupId: number
    personId: number
    link: number
    datetime: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type MeetupMediaMinAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    link?: true
    datetime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetupMediaMaxAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    link?: true
    datetime?: true
    createdAt?: true
    updatedAt?: true
  }

  export type MeetupMediaCountAggregateInputType = {
    id?: true
    meetupId?: true
    personId?: true
    link?: true
    datetime?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type MeetupMediaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupMedia to aggregate.
     */
    where?: MeetupMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupMedias to fetch.
     */
    orderBy?: MeetupMediaOrderByWithRelationInput | MeetupMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MeetupMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MeetupMedias
    **/
    _count?: true | MeetupMediaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MeetupMediaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MeetupMediaMaxAggregateInputType
  }

  export type GetMeetupMediaAggregateType<T extends MeetupMediaAggregateArgs> = {
        [P in keyof T & keyof AggregateMeetupMedia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMeetupMedia[P]>
      : GetScalarType<T[P], AggregateMeetupMedia[P]>
  }




  export type MeetupMediaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MeetupMediaWhereInput
    orderBy?: MeetupMediaOrderByWithAggregationInput | MeetupMediaOrderByWithAggregationInput[]
    by: MeetupMediaScalarFieldEnum[] | MeetupMediaScalarFieldEnum
    having?: MeetupMediaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MeetupMediaCountAggregateInputType | true
    _min?: MeetupMediaMinAggregateInputType
    _max?: MeetupMediaMaxAggregateInputType
  }

  export type MeetupMediaGroupByOutputType = {
    id: string
    meetupId: string
    personId: string
    link: string
    datetime: Date
    createdAt: Date
    updatedAt: Date
    _count: MeetupMediaCountAggregateOutputType | null
    _min: MeetupMediaMinAggregateOutputType | null
    _max: MeetupMediaMaxAggregateOutputType | null
  }

  type GetMeetupMediaGroupByPayload<T extends MeetupMediaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MeetupMediaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MeetupMediaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MeetupMediaGroupByOutputType[P]>
            : GetScalarType<T[P], MeetupMediaGroupByOutputType[P]>
        }
      >
    >


  export type MeetupMediaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    meetupId?: boolean
    personId?: boolean
    link?: boolean
    datetime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["meetupMedia"]>



  export type MeetupMediaSelectScalar = {
    id?: boolean
    meetupId?: boolean
    personId?: boolean
    link?: boolean
    datetime?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type MeetupMediaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "meetupId" | "personId" | "link" | "datetime" | "createdAt" | "updatedAt", ExtArgs["result"]["meetupMedia"]>
  export type MeetupMediaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }

  export type $MeetupMediaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MeetupMedia"
    objects: {
      meetup: Prisma.$MeetupPayload<ExtArgs>
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      meetupId: string
      personId: string
      link: string
      datetime: Date
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["meetupMedia"]>
    composites: {}
  }

  type MeetupMediaGetPayload<S extends boolean | null | undefined | MeetupMediaDefaultArgs> = $Result.GetResult<Prisma.$MeetupMediaPayload, S>

  type MeetupMediaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MeetupMediaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MeetupMediaCountAggregateInputType | true
    }

  export interface MeetupMediaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MeetupMedia'], meta: { name: 'MeetupMedia' } }
    /**
     * Find zero or one MeetupMedia that matches the filter.
     * @param {MeetupMediaFindUniqueArgs} args - Arguments to find a MeetupMedia
     * @example
     * // Get one MeetupMedia
     * const meetupMedia = await prisma.meetupMedia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MeetupMediaFindUniqueArgs>(args: SelectSubset<T, MeetupMediaFindUniqueArgs<ExtArgs>>): Prisma__MeetupMediaClient<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MeetupMedia that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MeetupMediaFindUniqueOrThrowArgs} args - Arguments to find a MeetupMedia
     * @example
     * // Get one MeetupMedia
     * const meetupMedia = await prisma.meetupMedia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MeetupMediaFindUniqueOrThrowArgs>(args: SelectSubset<T, MeetupMediaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MeetupMediaClient<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupMedia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupMediaFindFirstArgs} args - Arguments to find a MeetupMedia
     * @example
     * // Get one MeetupMedia
     * const meetupMedia = await prisma.meetupMedia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MeetupMediaFindFirstArgs>(args?: SelectSubset<T, MeetupMediaFindFirstArgs<ExtArgs>>): Prisma__MeetupMediaClient<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MeetupMedia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupMediaFindFirstOrThrowArgs} args - Arguments to find a MeetupMedia
     * @example
     * // Get one MeetupMedia
     * const meetupMedia = await prisma.meetupMedia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MeetupMediaFindFirstOrThrowArgs>(args?: SelectSubset<T, MeetupMediaFindFirstOrThrowArgs<ExtArgs>>): Prisma__MeetupMediaClient<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MeetupMedias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupMediaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MeetupMedias
     * const meetupMedias = await prisma.meetupMedia.findMany()
     * 
     * // Get first 10 MeetupMedias
     * const meetupMedias = await prisma.meetupMedia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const meetupMediaWithIdOnly = await prisma.meetupMedia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MeetupMediaFindManyArgs>(args?: SelectSubset<T, MeetupMediaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MeetupMedia.
     * @param {MeetupMediaCreateArgs} args - Arguments to create a MeetupMedia.
     * @example
     * // Create one MeetupMedia
     * const MeetupMedia = await prisma.meetupMedia.create({
     *   data: {
     *     // ... data to create a MeetupMedia
     *   }
     * })
     * 
     */
    create<T extends MeetupMediaCreateArgs>(args: SelectSubset<T, MeetupMediaCreateArgs<ExtArgs>>): Prisma__MeetupMediaClient<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MeetupMedias.
     * @param {MeetupMediaCreateManyArgs} args - Arguments to create many MeetupMedias.
     * @example
     * // Create many MeetupMedias
     * const meetupMedia = await prisma.meetupMedia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MeetupMediaCreateManyArgs>(args?: SelectSubset<T, MeetupMediaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a MeetupMedia.
     * @param {MeetupMediaDeleteArgs} args - Arguments to delete one MeetupMedia.
     * @example
     * // Delete one MeetupMedia
     * const MeetupMedia = await prisma.meetupMedia.delete({
     *   where: {
     *     // ... filter to delete one MeetupMedia
     *   }
     * })
     * 
     */
    delete<T extends MeetupMediaDeleteArgs>(args: SelectSubset<T, MeetupMediaDeleteArgs<ExtArgs>>): Prisma__MeetupMediaClient<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MeetupMedia.
     * @param {MeetupMediaUpdateArgs} args - Arguments to update one MeetupMedia.
     * @example
     * // Update one MeetupMedia
     * const meetupMedia = await prisma.meetupMedia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MeetupMediaUpdateArgs>(args: SelectSubset<T, MeetupMediaUpdateArgs<ExtArgs>>): Prisma__MeetupMediaClient<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MeetupMedias.
     * @param {MeetupMediaDeleteManyArgs} args - Arguments to filter MeetupMedias to delete.
     * @example
     * // Delete a few MeetupMedias
     * const { count } = await prisma.meetupMedia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MeetupMediaDeleteManyArgs>(args?: SelectSubset<T, MeetupMediaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MeetupMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupMediaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MeetupMedias
     * const meetupMedia = await prisma.meetupMedia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MeetupMediaUpdateManyArgs>(args: SelectSubset<T, MeetupMediaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one MeetupMedia.
     * @param {MeetupMediaUpsertArgs} args - Arguments to update or create a MeetupMedia.
     * @example
     * // Update or create a MeetupMedia
     * const meetupMedia = await prisma.meetupMedia.upsert({
     *   create: {
     *     // ... data to create a MeetupMedia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MeetupMedia we want to update
     *   }
     * })
     */
    upsert<T extends MeetupMediaUpsertArgs>(args: SelectSubset<T, MeetupMediaUpsertArgs<ExtArgs>>): Prisma__MeetupMediaClient<$Result.GetResult<Prisma.$MeetupMediaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MeetupMedias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupMediaCountArgs} args - Arguments to filter MeetupMedias to count.
     * @example
     * // Count the number of MeetupMedias
     * const count = await prisma.meetupMedia.count({
     *   where: {
     *     // ... the filter for the MeetupMedias we want to count
     *   }
     * })
    **/
    count<T extends MeetupMediaCountArgs>(
      args?: Subset<T, MeetupMediaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MeetupMediaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MeetupMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupMediaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MeetupMediaAggregateArgs>(args: Subset<T, MeetupMediaAggregateArgs>): Prisma.PrismaPromise<GetMeetupMediaAggregateType<T>>

    /**
     * Group by MeetupMedia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MeetupMediaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MeetupMediaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MeetupMediaGroupByArgs['orderBy'] }
        : { orderBy?: MeetupMediaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MeetupMediaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMeetupMediaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MeetupMedia model
   */
  readonly fields: MeetupMediaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MeetupMedia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MeetupMediaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MeetupMedia model
   */
  interface MeetupMediaFieldRefs {
    readonly id: FieldRef<"MeetupMedia", 'String'>
    readonly meetupId: FieldRef<"MeetupMedia", 'String'>
    readonly personId: FieldRef<"MeetupMedia", 'String'>
    readonly link: FieldRef<"MeetupMedia", 'String'>
    readonly datetime: FieldRef<"MeetupMedia", 'DateTime'>
    readonly createdAt: FieldRef<"MeetupMedia", 'DateTime'>
    readonly updatedAt: FieldRef<"MeetupMedia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * MeetupMedia findUnique
   */
  export type MeetupMediaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * Filter, which MeetupMedia to fetch.
     */
    where: MeetupMediaWhereUniqueInput
  }

  /**
   * MeetupMedia findUniqueOrThrow
   */
  export type MeetupMediaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * Filter, which MeetupMedia to fetch.
     */
    where: MeetupMediaWhereUniqueInput
  }

  /**
   * MeetupMedia findFirst
   */
  export type MeetupMediaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * Filter, which MeetupMedia to fetch.
     */
    where?: MeetupMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupMedias to fetch.
     */
    orderBy?: MeetupMediaOrderByWithRelationInput | MeetupMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupMedias.
     */
    cursor?: MeetupMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupMedias.
     */
    distinct?: MeetupMediaScalarFieldEnum | MeetupMediaScalarFieldEnum[]
  }

  /**
   * MeetupMedia findFirstOrThrow
   */
  export type MeetupMediaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * Filter, which MeetupMedia to fetch.
     */
    where?: MeetupMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupMedias to fetch.
     */
    orderBy?: MeetupMediaOrderByWithRelationInput | MeetupMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MeetupMedias.
     */
    cursor?: MeetupMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupMedias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MeetupMedias.
     */
    distinct?: MeetupMediaScalarFieldEnum | MeetupMediaScalarFieldEnum[]
  }

  /**
   * MeetupMedia findMany
   */
  export type MeetupMediaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * Filter, which MeetupMedias to fetch.
     */
    where?: MeetupMediaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MeetupMedias to fetch.
     */
    orderBy?: MeetupMediaOrderByWithRelationInput | MeetupMediaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MeetupMedias.
     */
    cursor?: MeetupMediaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MeetupMedias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MeetupMedias.
     */
    skip?: number
    distinct?: MeetupMediaScalarFieldEnum | MeetupMediaScalarFieldEnum[]
  }

  /**
   * MeetupMedia create
   */
  export type MeetupMediaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * The data needed to create a MeetupMedia.
     */
    data: XOR<MeetupMediaCreateInput, MeetupMediaUncheckedCreateInput>
  }

  /**
   * MeetupMedia createMany
   */
  export type MeetupMediaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MeetupMedias.
     */
    data: MeetupMediaCreateManyInput | MeetupMediaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * MeetupMedia update
   */
  export type MeetupMediaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * The data needed to update a MeetupMedia.
     */
    data: XOR<MeetupMediaUpdateInput, MeetupMediaUncheckedUpdateInput>
    /**
     * Choose, which MeetupMedia to update.
     */
    where: MeetupMediaWhereUniqueInput
  }

  /**
   * MeetupMedia updateMany
   */
  export type MeetupMediaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MeetupMedias.
     */
    data: XOR<MeetupMediaUpdateManyMutationInput, MeetupMediaUncheckedUpdateManyInput>
    /**
     * Filter which MeetupMedias to update
     */
    where?: MeetupMediaWhereInput
    /**
     * Limit how many MeetupMedias to update.
     */
    limit?: number
  }

  /**
   * MeetupMedia upsert
   */
  export type MeetupMediaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * The filter to search for the MeetupMedia to update in case it exists.
     */
    where: MeetupMediaWhereUniqueInput
    /**
     * In case the MeetupMedia found by the `where` argument doesn't exist, create a new MeetupMedia with this data.
     */
    create: XOR<MeetupMediaCreateInput, MeetupMediaUncheckedCreateInput>
    /**
     * In case the MeetupMedia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MeetupMediaUpdateInput, MeetupMediaUncheckedUpdateInput>
  }

  /**
   * MeetupMedia delete
   */
  export type MeetupMediaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
    /**
     * Filter which MeetupMedia to delete.
     */
    where: MeetupMediaWhereUniqueInput
  }

  /**
   * MeetupMedia deleteMany
   */
  export type MeetupMediaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MeetupMedias to delete
     */
    where?: MeetupMediaWhereInput
    /**
     * Limit how many MeetupMedias to delete.
     */
    limit?: number
  }

  /**
   * MeetupMedia without action
   */
  export type MeetupMediaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MeetupMedia
     */
    select?: MeetupMediaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MeetupMedia
     */
    omit?: MeetupMediaOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MeetupMediaInclude<ExtArgs> | null
  }


  /**
   * Model GuestLoad
   */

  export type AggregateGuestLoad = {
    _count: GuestLoadCountAggregateOutputType | null
    _avg: GuestLoadAvgAggregateOutputType | null
    _sum: GuestLoadSumAggregateOutputType | null
    _min: GuestLoadMinAggregateOutputType | null
    _max: GuestLoadMaxAggregateOutputType | null
  }

  export type GuestLoadAvgAggregateOutputType = {
    count: number | null
  }

  export type GuestLoadSumAggregateOutputType = {
    count: number | null
  }

  export type GuestLoadMinAggregateOutputType = {
    id: string | null
    link: string | null
    meetupId: string | null
    personId: string | null
    datetime: Date | null
    count: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuestLoadMaxAggregateOutputType = {
    id: string | null
    link: string | null
    meetupId: string | null
    personId: string | null
    datetime: Date | null
    count: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type GuestLoadCountAggregateOutputType = {
    id: number
    link: number
    meetupId: number
    personId: number
    datetime: number
    count: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type GuestLoadAvgAggregateInputType = {
    count?: true
  }

  export type GuestLoadSumAggregateInputType = {
    count?: true
  }

  export type GuestLoadMinAggregateInputType = {
    id?: true
    link?: true
    meetupId?: true
    personId?: true
    datetime?: true
    count?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuestLoadMaxAggregateInputType = {
    id?: true
    link?: true
    meetupId?: true
    personId?: true
    datetime?: true
    count?: true
    createdAt?: true
    updatedAt?: true
  }

  export type GuestLoadCountAggregateInputType = {
    id?: true
    link?: true
    meetupId?: true
    personId?: true
    datetime?: true
    count?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type GuestLoadAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GuestLoad to aggregate.
     */
    where?: GuestLoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuestLoads to fetch.
     */
    orderBy?: GuestLoadOrderByWithRelationInput | GuestLoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GuestLoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuestLoads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuestLoads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GuestLoads
    **/
    _count?: true | GuestLoadCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuestLoadAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuestLoadSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuestLoadMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuestLoadMaxAggregateInputType
  }

  export type GetGuestLoadAggregateType<T extends GuestLoadAggregateArgs> = {
        [P in keyof T & keyof AggregateGuestLoad]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuestLoad[P]>
      : GetScalarType<T[P], AggregateGuestLoad[P]>
  }




  export type GuestLoadGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: GuestLoadWhereInput
    orderBy?: GuestLoadOrderByWithAggregationInput | GuestLoadOrderByWithAggregationInput[]
    by: GuestLoadScalarFieldEnum[] | GuestLoadScalarFieldEnum
    having?: GuestLoadScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuestLoadCountAggregateInputType | true
    _avg?: GuestLoadAvgAggregateInputType
    _sum?: GuestLoadSumAggregateInputType
    _min?: GuestLoadMinAggregateInputType
    _max?: GuestLoadMaxAggregateInputType
  }

  export type GuestLoadGroupByOutputType = {
    id: string
    link: string
    meetupId: string
    personId: string
    datetime: Date
    count: number
    createdAt: Date
    updatedAt: Date
    _count: GuestLoadCountAggregateOutputType | null
    _avg: GuestLoadAvgAggregateOutputType | null
    _sum: GuestLoadSumAggregateOutputType | null
    _min: GuestLoadMinAggregateOutputType | null
    _max: GuestLoadMaxAggregateOutputType | null
  }

  type GetGuestLoadGroupByPayload<T extends GuestLoadGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuestLoadGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuestLoadGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuestLoadGroupByOutputType[P]>
            : GetScalarType<T[P], GuestLoadGroupByOutputType[P]>
        }
      >
    >


  export type GuestLoadSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    link?: boolean
    meetupId?: boolean
    personId?: boolean
    datetime?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guestLoad"]>



  export type GuestLoadSelectScalar = {
    id?: boolean
    link?: boolean
    meetupId?: boolean
    personId?: boolean
    datetime?: boolean
    count?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type GuestLoadOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "link" | "meetupId" | "personId" | "datetime" | "count" | "createdAt" | "updatedAt", ExtArgs["result"]["guestLoad"]>
  export type GuestLoadInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meetup?: boolean | MeetupDefaultArgs<ExtArgs>
    person?: boolean | PersonDefaultArgs<ExtArgs>
  }

  export type $GuestLoadPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "GuestLoad"
    objects: {
      meetup: Prisma.$MeetupPayload<ExtArgs>
      person: Prisma.$PersonPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      link: string
      meetupId: string
      personId: string
      datetime: Date
      count: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["guestLoad"]>
    composites: {}
  }

  type GuestLoadGetPayload<S extends boolean | null | undefined | GuestLoadDefaultArgs> = $Result.GetResult<Prisma.$GuestLoadPayload, S>

  type GuestLoadCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<GuestLoadFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: GuestLoadCountAggregateInputType | true
    }

  export interface GuestLoadDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GuestLoad'], meta: { name: 'GuestLoad' } }
    /**
     * Find zero or one GuestLoad that matches the filter.
     * @param {GuestLoadFindUniqueArgs} args - Arguments to find a GuestLoad
     * @example
     * // Get one GuestLoad
     * const guestLoad = await prisma.guestLoad.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends GuestLoadFindUniqueArgs>(args: SelectSubset<T, GuestLoadFindUniqueArgs<ExtArgs>>): Prisma__GuestLoadClient<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one GuestLoad that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {GuestLoadFindUniqueOrThrowArgs} args - Arguments to find a GuestLoad
     * @example
     * // Get one GuestLoad
     * const guestLoad = await prisma.guestLoad.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends GuestLoadFindUniqueOrThrowArgs>(args: SelectSubset<T, GuestLoadFindUniqueOrThrowArgs<ExtArgs>>): Prisma__GuestLoadClient<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GuestLoad that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestLoadFindFirstArgs} args - Arguments to find a GuestLoad
     * @example
     * // Get one GuestLoad
     * const guestLoad = await prisma.guestLoad.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends GuestLoadFindFirstArgs>(args?: SelectSubset<T, GuestLoadFindFirstArgs<ExtArgs>>): Prisma__GuestLoadClient<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first GuestLoad that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestLoadFindFirstOrThrowArgs} args - Arguments to find a GuestLoad
     * @example
     * // Get one GuestLoad
     * const guestLoad = await prisma.guestLoad.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends GuestLoadFindFirstOrThrowArgs>(args?: SelectSubset<T, GuestLoadFindFirstOrThrowArgs<ExtArgs>>): Prisma__GuestLoadClient<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more GuestLoads that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestLoadFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GuestLoads
     * const guestLoads = await prisma.guestLoad.findMany()
     * 
     * // Get first 10 GuestLoads
     * const guestLoads = await prisma.guestLoad.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guestLoadWithIdOnly = await prisma.guestLoad.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends GuestLoadFindManyArgs>(args?: SelectSubset<T, GuestLoadFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a GuestLoad.
     * @param {GuestLoadCreateArgs} args - Arguments to create a GuestLoad.
     * @example
     * // Create one GuestLoad
     * const GuestLoad = await prisma.guestLoad.create({
     *   data: {
     *     // ... data to create a GuestLoad
     *   }
     * })
     * 
     */
    create<T extends GuestLoadCreateArgs>(args: SelectSubset<T, GuestLoadCreateArgs<ExtArgs>>): Prisma__GuestLoadClient<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many GuestLoads.
     * @param {GuestLoadCreateManyArgs} args - Arguments to create many GuestLoads.
     * @example
     * // Create many GuestLoads
     * const guestLoad = await prisma.guestLoad.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends GuestLoadCreateManyArgs>(args?: SelectSubset<T, GuestLoadCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GuestLoad.
     * @param {GuestLoadDeleteArgs} args - Arguments to delete one GuestLoad.
     * @example
     * // Delete one GuestLoad
     * const GuestLoad = await prisma.guestLoad.delete({
     *   where: {
     *     // ... filter to delete one GuestLoad
     *   }
     * })
     * 
     */
    delete<T extends GuestLoadDeleteArgs>(args: SelectSubset<T, GuestLoadDeleteArgs<ExtArgs>>): Prisma__GuestLoadClient<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one GuestLoad.
     * @param {GuestLoadUpdateArgs} args - Arguments to update one GuestLoad.
     * @example
     * // Update one GuestLoad
     * const guestLoad = await prisma.guestLoad.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends GuestLoadUpdateArgs>(args: SelectSubset<T, GuestLoadUpdateArgs<ExtArgs>>): Prisma__GuestLoadClient<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more GuestLoads.
     * @param {GuestLoadDeleteManyArgs} args - Arguments to filter GuestLoads to delete.
     * @example
     * // Delete a few GuestLoads
     * const { count } = await prisma.guestLoad.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends GuestLoadDeleteManyArgs>(args?: SelectSubset<T, GuestLoadDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuestLoads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestLoadUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GuestLoads
     * const guestLoad = await prisma.guestLoad.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends GuestLoadUpdateManyArgs>(args: SelectSubset<T, GuestLoadUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GuestLoad.
     * @param {GuestLoadUpsertArgs} args - Arguments to update or create a GuestLoad.
     * @example
     * // Update or create a GuestLoad
     * const guestLoad = await prisma.guestLoad.upsert({
     *   create: {
     *     // ... data to create a GuestLoad
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GuestLoad we want to update
     *   }
     * })
     */
    upsert<T extends GuestLoadUpsertArgs>(args: SelectSubset<T, GuestLoadUpsertArgs<ExtArgs>>): Prisma__GuestLoadClient<$Result.GetResult<Prisma.$GuestLoadPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of GuestLoads.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestLoadCountArgs} args - Arguments to filter GuestLoads to count.
     * @example
     * // Count the number of GuestLoads
     * const count = await prisma.guestLoad.count({
     *   where: {
     *     // ... the filter for the GuestLoads we want to count
     *   }
     * })
    **/
    count<T extends GuestLoadCountArgs>(
      args?: Subset<T, GuestLoadCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuestLoadCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GuestLoad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestLoadAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuestLoadAggregateArgs>(args: Subset<T, GuestLoadAggregateArgs>): Prisma.PrismaPromise<GetGuestLoadAggregateType<T>>

    /**
     * Group by GuestLoad.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestLoadGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GuestLoadGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GuestLoadGroupByArgs['orderBy'] }
        : { orderBy?: GuestLoadGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GuestLoadGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuestLoadGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the GuestLoad model
   */
  readonly fields: GuestLoadFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for GuestLoad.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__GuestLoadClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    meetup<T extends MeetupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MeetupDefaultArgs<ExtArgs>>): Prisma__MeetupClient<$Result.GetResult<Prisma.$MeetupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    person<T extends PersonDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonDefaultArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the GuestLoad model
   */
  interface GuestLoadFieldRefs {
    readonly id: FieldRef<"GuestLoad", 'String'>
    readonly link: FieldRef<"GuestLoad", 'String'>
    readonly meetupId: FieldRef<"GuestLoad", 'String'>
    readonly personId: FieldRef<"GuestLoad", 'String'>
    readonly datetime: FieldRef<"GuestLoad", 'DateTime'>
    readonly count: FieldRef<"GuestLoad", 'Int'>
    readonly createdAt: FieldRef<"GuestLoad", 'DateTime'>
    readonly updatedAt: FieldRef<"GuestLoad", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * GuestLoad findUnique
   */
  export type GuestLoadFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * Filter, which GuestLoad to fetch.
     */
    where: GuestLoadWhereUniqueInput
  }

  /**
   * GuestLoad findUniqueOrThrow
   */
  export type GuestLoadFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * Filter, which GuestLoad to fetch.
     */
    where: GuestLoadWhereUniqueInput
  }

  /**
   * GuestLoad findFirst
   */
  export type GuestLoadFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * Filter, which GuestLoad to fetch.
     */
    where?: GuestLoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuestLoads to fetch.
     */
    orderBy?: GuestLoadOrderByWithRelationInput | GuestLoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuestLoads.
     */
    cursor?: GuestLoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuestLoads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuestLoads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuestLoads.
     */
    distinct?: GuestLoadScalarFieldEnum | GuestLoadScalarFieldEnum[]
  }

  /**
   * GuestLoad findFirstOrThrow
   */
  export type GuestLoadFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * Filter, which GuestLoad to fetch.
     */
    where?: GuestLoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuestLoads to fetch.
     */
    orderBy?: GuestLoadOrderByWithRelationInput | GuestLoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GuestLoads.
     */
    cursor?: GuestLoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuestLoads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuestLoads.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GuestLoads.
     */
    distinct?: GuestLoadScalarFieldEnum | GuestLoadScalarFieldEnum[]
  }

  /**
   * GuestLoad findMany
   */
  export type GuestLoadFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * Filter, which GuestLoads to fetch.
     */
    where?: GuestLoadWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GuestLoads to fetch.
     */
    orderBy?: GuestLoadOrderByWithRelationInput | GuestLoadOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GuestLoads.
     */
    cursor?: GuestLoadWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GuestLoads from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GuestLoads.
     */
    skip?: number
    distinct?: GuestLoadScalarFieldEnum | GuestLoadScalarFieldEnum[]
  }

  /**
   * GuestLoad create
   */
  export type GuestLoadCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * The data needed to create a GuestLoad.
     */
    data: XOR<GuestLoadCreateInput, GuestLoadUncheckedCreateInput>
  }

  /**
   * GuestLoad createMany
   */
  export type GuestLoadCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many GuestLoads.
     */
    data: GuestLoadCreateManyInput | GuestLoadCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * GuestLoad update
   */
  export type GuestLoadUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * The data needed to update a GuestLoad.
     */
    data: XOR<GuestLoadUpdateInput, GuestLoadUncheckedUpdateInput>
    /**
     * Choose, which GuestLoad to update.
     */
    where: GuestLoadWhereUniqueInput
  }

  /**
   * GuestLoad updateMany
   */
  export type GuestLoadUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update GuestLoads.
     */
    data: XOR<GuestLoadUpdateManyMutationInput, GuestLoadUncheckedUpdateManyInput>
    /**
     * Filter which GuestLoads to update
     */
    where?: GuestLoadWhereInput
    /**
     * Limit how many GuestLoads to update.
     */
    limit?: number
  }

  /**
   * GuestLoad upsert
   */
  export type GuestLoadUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * The filter to search for the GuestLoad to update in case it exists.
     */
    where: GuestLoadWhereUniqueInput
    /**
     * In case the GuestLoad found by the `where` argument doesn't exist, create a new GuestLoad with this data.
     */
    create: XOR<GuestLoadCreateInput, GuestLoadUncheckedCreateInput>
    /**
     * In case the GuestLoad was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GuestLoadUpdateInput, GuestLoadUncheckedUpdateInput>
  }

  /**
   * GuestLoad delete
   */
  export type GuestLoadDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
    /**
     * Filter which GuestLoad to delete.
     */
    where: GuestLoadWhereUniqueInput
  }

  /**
   * GuestLoad deleteMany
   */
  export type GuestLoadDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which GuestLoads to delete
     */
    where?: GuestLoadWhereInput
    /**
     * Limit how many GuestLoads to delete.
     */
    limit?: number
  }

  /**
   * GuestLoad without action
   */
  export type GuestLoadDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestLoad
     */
    select?: GuestLoadSelect<ExtArgs> | null
    /**
     * Omit specific fields from the GuestLoad
     */
    omit?: GuestLoadOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: GuestLoadInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    expiresAt: 'expiresAt',
    token: 'token',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    accessTokenExpiresAt: 'accessTokenExpiresAt',
    refreshTokenExpiresAt: 'refreshTokenExpiresAt',
    scope: 'scope',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value',
    expiresAt: 'expiresAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const PersonScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    gender: 'gender',
    birthdate: 'birthdate',
    cpf: 'cpf',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    mapLink: 'mapLink',
    state: 'state',
    city: 'city',
    district: 'district',
    street: 'street',
    number: 'number',
    complement: 'complement',
    zipcode: 'zipcode',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const MeetupScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    locationName: 'locationName',
    start: 'start',
    end: 'end',
    addressId: 'addressId',
    categoryId: 'categoryId',
    creatorId: 'creatorId',
    certificateModelId: 'certificateModelId',
    image: 'image',
    workload: 'workload',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetupScalarFieldEnum = (typeof MeetupScalarFieldEnum)[keyof typeof MeetupScalarFieldEnum]


  export const MeetupNotificationScalarFieldEnum: {
    id: 'id',
    text: 'text',
    meetupId: 'meetupId',
    personId: 'personId',
    createdAt: 'createdAt'
  };

  export type MeetupNotificationScalarFieldEnum = (typeof MeetupNotificationScalarFieldEnum)[keyof typeof MeetupNotificationScalarFieldEnum]


  export const CertificateModelScalarFieldEnum: {
    id: 'id',
    imageLink: 'imageLink',
    content: 'content',
    createdAt: 'createdAt'
  };

  export type CertificateModelScalarFieldEnum = (typeof CertificateModelScalarFieldEnum)[keyof typeof CertificateModelScalarFieldEnum]


  export const MeetupInviteSheetScalarFieldEnum: {
    id: 'id',
    link: 'link',
    meetupId: 'meetupId'
  };

  export type MeetupInviteSheetScalarFieldEnum = (typeof MeetupInviteSheetScalarFieldEnum)[keyof typeof MeetupInviteSheetScalarFieldEnum]


  export const MeetupRoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    subscriptionPrice: 'subscriptionPrice',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetupRoleScalarFieldEnum = (typeof MeetupRoleScalarFieldEnum)[keyof typeof MeetupRoleScalarFieldEnum]


  export const MeetupAdminScalarFieldEnum: {
    id: 'id',
    meetupId: 'meetupId',
    personId: 'personId',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetupAdminScalarFieldEnum = (typeof MeetupAdminScalarFieldEnum)[keyof typeof MeetupAdminScalarFieldEnum]


  export const MeetupFollowerScalarFieldEnum: {
    id: 'id',
    meetupId: 'meetupId',
    personId: 'personId',
    createdAt: 'createdAt'
  };

  export type MeetupFollowerScalarFieldEnum = (typeof MeetupFollowerScalarFieldEnum)[keyof typeof MeetupFollowerScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const SubscriptionScalarFieldEnum: {
    id: 'id',
    personId: 'personId',
    meetupId: 'meetupId',
    meetupRoleId: 'meetupRoleId',
    certificateLink: 'certificateLink',
    presenceConfirmation: 'presenceConfirmation',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionScalarFieldEnum = (typeof SubscriptionScalarFieldEnum)[keyof typeof SubscriptionScalarFieldEnum]


  export const InviteScalarFieldEnum: {
    id: 'id',
    personId: 'personId',
    meetupId: 'meetupId',
    link: 'link',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type InviteScalarFieldEnum = (typeof InviteScalarFieldEnum)[keyof typeof InviteScalarFieldEnum]


  export const PaymentScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PaymentScalarFieldEnum = (typeof PaymentScalarFieldEnum)[keyof typeof PaymentScalarFieldEnum]


  export const SubscriptionPaymentScalarFieldEnum: {
    id: 'id',
    subscriptionId: 'subscriptionId',
    paymentId: 'paymentId',
    price: 'price',
    paymentStatus: 'paymentStatus',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SubscriptionPaymentScalarFieldEnum = (typeof SubscriptionPaymentScalarFieldEnum)[keyof typeof SubscriptionPaymentScalarFieldEnum]


  export const CertificateScalarFieldEnum: {
    id: 'id',
    personId: 'personId',
    meetupId: 'meetupId',
    link: 'link',
    securityCode: 'securityCode',
    datetime: 'datetime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CertificateScalarFieldEnum = (typeof CertificateScalarFieldEnum)[keyof typeof CertificateScalarFieldEnum]


  export const MeetupMediaScalarFieldEnum: {
    id: 'id',
    meetupId: 'meetupId',
    personId: 'personId',
    link: 'link',
    datetime: 'datetime',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type MeetupMediaScalarFieldEnum = (typeof MeetupMediaScalarFieldEnum)[keyof typeof MeetupMediaScalarFieldEnum]


  export const GuestLoadScalarFieldEnum: {
    id: 'id',
    link: 'link',
    meetupId: 'meetupId',
    personId: 'personId',
    datetime: 'datetime',
    count: 'count',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type GuestLoadScalarFieldEnum = (typeof GuestLoadScalarFieldEnum)[keyof typeof GuestLoadScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const UserOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    image: 'image'
  };

  export type UserOrderByRelevanceFieldEnum = (typeof UserOrderByRelevanceFieldEnum)[keyof typeof UserOrderByRelevanceFieldEnum]


  export const SessionOrderByRelevanceFieldEnum: {
    id: 'id',
    token: 'token',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    userId: 'userId'
  };

  export type SessionOrderByRelevanceFieldEnum = (typeof SessionOrderByRelevanceFieldEnum)[keyof typeof SessionOrderByRelevanceFieldEnum]


  export const AccountOrderByRelevanceFieldEnum: {
    id: 'id',
    accountId: 'accountId',
    providerId: 'providerId',
    userId: 'userId',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    idToken: 'idToken',
    scope: 'scope',
    password: 'password'
  };

  export type AccountOrderByRelevanceFieldEnum = (typeof AccountOrderByRelevanceFieldEnum)[keyof typeof AccountOrderByRelevanceFieldEnum]


  export const VerificationOrderByRelevanceFieldEnum: {
    id: 'id',
    identifier: 'identifier',
    value: 'value'
  };

  export type VerificationOrderByRelevanceFieldEnum = (typeof VerificationOrderByRelevanceFieldEnum)[keyof typeof VerificationOrderByRelevanceFieldEnum]


  export const PersonOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    gender: 'gender',
    cpf: 'cpf',
    userId: 'userId'
  };

  export type PersonOrderByRelevanceFieldEnum = (typeof PersonOrderByRelevanceFieldEnum)[keyof typeof PersonOrderByRelevanceFieldEnum]


  export const AddressOrderByRelevanceFieldEnum: {
    id: 'id',
    mapLink: 'mapLink',
    state: 'state',
    city: 'city',
    district: 'district',
    street: 'street',
    number: 'number',
    complement: 'complement',
    zipcode: 'zipcode'
  };

  export type AddressOrderByRelevanceFieldEnum = (typeof AddressOrderByRelevanceFieldEnum)[keyof typeof AddressOrderByRelevanceFieldEnum]


  export const MeetupOrderByRelevanceFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    locationName: 'locationName',
    addressId: 'addressId',
    categoryId: 'categoryId',
    creatorId: 'creatorId',
    certificateModelId: 'certificateModelId',
    image: 'image'
  };

  export type MeetupOrderByRelevanceFieldEnum = (typeof MeetupOrderByRelevanceFieldEnum)[keyof typeof MeetupOrderByRelevanceFieldEnum]


  export const MeetupNotificationOrderByRelevanceFieldEnum: {
    id: 'id',
    text: 'text',
    meetupId: 'meetupId',
    personId: 'personId'
  };

  export type MeetupNotificationOrderByRelevanceFieldEnum = (typeof MeetupNotificationOrderByRelevanceFieldEnum)[keyof typeof MeetupNotificationOrderByRelevanceFieldEnum]


  export const CertificateModelOrderByRelevanceFieldEnum: {
    id: 'id',
    imageLink: 'imageLink',
    content: 'content'
  };

  export type CertificateModelOrderByRelevanceFieldEnum = (typeof CertificateModelOrderByRelevanceFieldEnum)[keyof typeof CertificateModelOrderByRelevanceFieldEnum]


  export const MeetupInviteSheetOrderByRelevanceFieldEnum: {
    id: 'id',
    link: 'link',
    meetupId: 'meetupId'
  };

  export type MeetupInviteSheetOrderByRelevanceFieldEnum = (typeof MeetupInviteSheetOrderByRelevanceFieldEnum)[keyof typeof MeetupInviteSheetOrderByRelevanceFieldEnum]


  export const MeetupRoleOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type MeetupRoleOrderByRelevanceFieldEnum = (typeof MeetupRoleOrderByRelevanceFieldEnum)[keyof typeof MeetupRoleOrderByRelevanceFieldEnum]


  export const MeetupAdminOrderByRelevanceFieldEnum: {
    id: 'id',
    meetupId: 'meetupId',
    personId: 'personId',
    role: 'role'
  };

  export type MeetupAdminOrderByRelevanceFieldEnum = (typeof MeetupAdminOrderByRelevanceFieldEnum)[keyof typeof MeetupAdminOrderByRelevanceFieldEnum]


  export const MeetupFollowerOrderByRelevanceFieldEnum: {
    id: 'id',
    meetupId: 'meetupId',
    personId: 'personId'
  };

  export type MeetupFollowerOrderByRelevanceFieldEnum = (typeof MeetupFollowerOrderByRelevanceFieldEnum)[keyof typeof MeetupFollowerOrderByRelevanceFieldEnum]


  export const CategoryOrderByRelevanceFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryOrderByRelevanceFieldEnum = (typeof CategoryOrderByRelevanceFieldEnum)[keyof typeof CategoryOrderByRelevanceFieldEnum]


  export const SubscriptionOrderByRelevanceFieldEnum: {
    id: 'id',
    personId: 'personId',
    meetupId: 'meetupId',
    meetupRoleId: 'meetupRoleId',
    certificateLink: 'certificateLink'
  };

  export type SubscriptionOrderByRelevanceFieldEnum = (typeof SubscriptionOrderByRelevanceFieldEnum)[keyof typeof SubscriptionOrderByRelevanceFieldEnum]


  export const InviteOrderByRelevanceFieldEnum: {
    id: 'id',
    personId: 'personId',
    meetupId: 'meetupId',
    link: 'link'
  };

  export type InviteOrderByRelevanceFieldEnum = (typeof InviteOrderByRelevanceFieldEnum)[keyof typeof InviteOrderByRelevanceFieldEnum]


  export const PaymentOrderByRelevanceFieldEnum: {
    id: 'id'
  };

  export type PaymentOrderByRelevanceFieldEnum = (typeof PaymentOrderByRelevanceFieldEnum)[keyof typeof PaymentOrderByRelevanceFieldEnum]


  export const SubscriptionPaymentOrderByRelevanceFieldEnum: {
    id: 'id',
    subscriptionId: 'subscriptionId',
    paymentId: 'paymentId'
  };

  export type SubscriptionPaymentOrderByRelevanceFieldEnum = (typeof SubscriptionPaymentOrderByRelevanceFieldEnum)[keyof typeof SubscriptionPaymentOrderByRelevanceFieldEnum]


  export const CertificateOrderByRelevanceFieldEnum: {
    id: 'id',
    personId: 'personId',
    meetupId: 'meetupId',
    link: 'link',
    securityCode: 'securityCode'
  };

  export type CertificateOrderByRelevanceFieldEnum = (typeof CertificateOrderByRelevanceFieldEnum)[keyof typeof CertificateOrderByRelevanceFieldEnum]


  export const MeetupMediaOrderByRelevanceFieldEnum: {
    id: 'id',
    meetupId: 'meetupId',
    personId: 'personId',
    link: 'link'
  };

  export type MeetupMediaOrderByRelevanceFieldEnum = (typeof MeetupMediaOrderByRelevanceFieldEnum)[keyof typeof MeetupMediaOrderByRelevanceFieldEnum]


  export const GuestLoadOrderByRelevanceFieldEnum: {
    id: 'id',
    link: 'link',
    meetupId: 'meetupId',
    personId: 'personId'
  };

  export type GuestLoadOrderByRelevanceFieldEnum = (typeof GuestLoadOrderByRelevanceFieldEnum)[keyof typeof GuestLoadOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'MeetupStatus'
   */
  export type EnumMeetupStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'MeetupStatus'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    person?: XOR<PersonNullableScalarRelationFilter, PersonWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sessions?: SessionOrderByRelationAggregateInput
    accounts?: AccountOrderByRelationAggregateInput
    person?: PersonOrderByWithRelationInput
    _relevance?: UserOrderByRelevanceInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    emailVerified?: BoolFilter<"User"> | boolean
    image?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    sessions?: SessionListRelationFilter
    accounts?: AccountListRelationFilter
    person?: XOR<PersonNullableScalarRelationFilter, PersonWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    emailVerified?: BoolWithAggregatesFilter<"User"> | boolean
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: SessionOrderByRelevanceInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    token?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "token">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    token?: StringWithAggregatesFilter<"Session"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Session"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"Session"> | string | null
    userId?: StringWithAggregatesFilter<"Session"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    _relevance?: AccountOrderByRelevanceInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrderInput | SortOrder
    refreshToken?: SortOrderInput | SortOrder
    idToken?: SortOrderInput | SortOrder
    accessTokenExpiresAt?: SortOrderInput | SortOrder
    refreshTokenExpiresAt?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    password?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    accountId?: StringWithAggregatesFilter<"Account"> | string
    providerId?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    accessToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refreshToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    idToken?: StringNullableWithAggregatesFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableWithAggregatesFilter<"Account"> | Date | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    password?: StringNullableWithAggregatesFilter<"Account"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type VerificationWhereInput = {
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    id?: StringFilter<"Verification"> | string
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _relevance?: VerificationOrderByRelevanceInput
  }

  export type VerificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VerificationWhereInput | VerificationWhereInput[]
    OR?: VerificationWhereInput[]
    NOT?: VerificationWhereInput | VerificationWhereInput[]
    identifier?: StringFilter<"Verification"> | string
    value?: StringFilter<"Verification"> | string
    expiresAt?: DateTimeFilter<"Verification"> | Date | string
    createdAt?: DateTimeFilter<"Verification"> | Date | string
    updatedAt?: DateTimeFilter<"Verification"> | Date | string
  }, "id">

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    OR?: VerificationScalarWhereWithAggregatesInput[]
    NOT?: VerificationScalarWhereWithAggregatesInput | VerificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Verification"> | string
    identifier?: StringWithAggregatesFilter<"Verification"> | string
    value?: StringWithAggregatesFilter<"Verification"> | string
    expiresAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Verification"> | Date | string
  }

  export type PersonWhereInput = {
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    id?: StringFilter<"Person"> | string
    name?: StringFilter<"Person"> | string
    email?: StringFilter<"Person"> | string
    phone?: StringNullableFilter<"Person"> | string | null
    gender?: StringNullableFilter<"Person"> | string | null
    birthdate?: DateTimeNullableFilter<"Person"> | Date | string | null
    cpf?: StringNullableFilter<"Person"> | string | null
    createdAt?: DateTimeFilter<"Person"> | Date | string
    updatedAt?: DateTimeFilter<"Person"> | Date | string
    userId?: StringNullableFilter<"Person"> | string | null
    meetupAdmins?: MeetupAdminListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    invites?: InviteListRelationFilter
    certificates?: CertificateListRelationFilter
    meetupMedias?: MeetupMediaListRelationFilter
    guestLoads?: GuestLoadListRelationFilter
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    created_meetups?: MeetupListRelationFilter
    followingMeetups?: MeetupFollowerListRelationFilter
    notifications?: MeetupNotificationListRelationFilter
  }

  export type PersonOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    birthdate?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    meetupAdmins?: MeetupAdminOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    invites?: InviteOrderByRelationAggregateInput
    certificates?: CertificateOrderByRelationAggregateInput
    meetupMedias?: MeetupMediaOrderByRelationAggregateInput
    guestLoads?: GuestLoadOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    created_meetups?: MeetupOrderByRelationAggregateInput
    followingMeetups?: MeetupFollowerOrderByRelationAggregateInput
    notifications?: MeetupNotificationOrderByRelationAggregateInput
    _relevance?: PersonOrderByRelevanceInput
  }

  export type PersonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    cpf?: string
    userId?: string
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    name?: StringFilter<"Person"> | string
    phone?: StringNullableFilter<"Person"> | string | null
    gender?: StringNullableFilter<"Person"> | string | null
    birthdate?: DateTimeNullableFilter<"Person"> | Date | string | null
    createdAt?: DateTimeFilter<"Person"> | Date | string
    updatedAt?: DateTimeFilter<"Person"> | Date | string
    meetupAdmins?: MeetupAdminListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    invites?: InviteListRelationFilter
    certificates?: CertificateListRelationFilter
    meetupMedias?: MeetupMediaListRelationFilter
    guestLoads?: GuestLoadListRelationFilter
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    created_meetups?: MeetupListRelationFilter
    followingMeetups?: MeetupFollowerListRelationFilter
    notifications?: MeetupNotificationListRelationFilter
  }, "id" | "email" | "cpf" | "userId">

  export type PersonOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    gender?: SortOrderInput | SortOrder
    birthdate?: SortOrderInput | SortOrder
    cpf?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrderInput | SortOrder
    _count?: PersonCountOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    OR?: PersonScalarWhereWithAggregatesInput[]
    NOT?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Person"> | string
    name?: StringWithAggregatesFilter<"Person"> | string
    email?: StringWithAggregatesFilter<"Person"> | string
    phone?: StringNullableWithAggregatesFilter<"Person"> | string | null
    gender?: StringNullableWithAggregatesFilter<"Person"> | string | null
    birthdate?: DateTimeNullableWithAggregatesFilter<"Person"> | Date | string | null
    cpf?: StringNullableWithAggregatesFilter<"Person"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Person"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Person"> | Date | string
    userId?: StringNullableWithAggregatesFilter<"Person"> | string | null
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: StringFilter<"Address"> | string
    mapLink?: StringNullableFilter<"Address"> | string | null
    state?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    district?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    number?: StringNullableFilter<"Address"> | string | null
    complement?: StringNullableFilter<"Address"> | string | null
    zipcode?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    meetups?: MeetupListRelationFilter
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    mapLink?: SortOrderInput | SortOrder
    state?: SortOrder
    city?: SortOrder
    district?: SortOrder
    street?: SortOrder
    number?: SortOrderInput | SortOrder
    complement?: SortOrderInput | SortOrder
    zipcode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetups?: MeetupOrderByRelationAggregateInput
    _relevance?: AddressOrderByRelevanceInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    mapLink?: StringNullableFilter<"Address"> | string | null
    state?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    district?: StringFilter<"Address"> | string
    street?: StringFilter<"Address"> | string
    number?: StringNullableFilter<"Address"> | string | null
    complement?: StringNullableFilter<"Address"> | string | null
    zipcode?: StringFilter<"Address"> | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    meetups?: MeetupListRelationFilter
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    mapLink?: SortOrderInput | SortOrder
    state?: SortOrder
    city?: SortOrder
    district?: SortOrder
    street?: SortOrder
    number?: SortOrderInput | SortOrder
    complement?: SortOrderInput | SortOrder
    zipcode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Address"> | string
    mapLink?: StringNullableWithAggregatesFilter<"Address"> | string | null
    state?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    district?: StringWithAggregatesFilter<"Address"> | string
    street?: StringWithAggregatesFilter<"Address"> | string
    number?: StringNullableWithAggregatesFilter<"Address"> | string | null
    complement?: StringNullableWithAggregatesFilter<"Address"> | string | null
    zipcode?: StringWithAggregatesFilter<"Address"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
  }

  export type MeetupWhereInput = {
    AND?: MeetupWhereInput | MeetupWhereInput[]
    OR?: MeetupWhereInput[]
    NOT?: MeetupWhereInput | MeetupWhereInput[]
    id?: StringFilter<"Meetup"> | string
    title?: StringFilter<"Meetup"> | string
    description?: StringNullableFilter<"Meetup"> | string | null
    locationName?: StringNullableFilter<"Meetup"> | string | null
    start?: DateTimeNullableFilter<"Meetup"> | Date | string | null
    end?: DateTimeNullableFilter<"Meetup"> | Date | string | null
    addressId?: StringNullableFilter<"Meetup"> | string | null
    categoryId?: StringFilter<"Meetup"> | string
    creatorId?: StringFilter<"Meetup"> | string
    certificateModelId?: StringNullableFilter<"Meetup"> | string | null
    image?: StringNullableFilter<"Meetup"> | string | null
    workload?: IntNullableFilter<"Meetup"> | number | null
    status?: EnumMeetupStatusFilter<"Meetup"> | $Enums.MeetupStatus
    createdAt?: DateTimeFilter<"Meetup"> | Date | string
    updatedAt?: DateTimeFilter<"Meetup"> | Date | string
    address?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    meetupAdmins?: MeetupAdminListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    invites?: InviteListRelationFilter
    certificates?: CertificateListRelationFilter
    meetupMedias?: MeetupMediaListRelationFilter
    guestLoads?: GuestLoadListRelationFilter
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    creator?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    followers?: MeetupFollowerListRelationFilter
    inviteSheets?: MeetupInviteSheetListRelationFilter
    certificateModel?: XOR<CertificateModelNullableScalarRelationFilter, CertificateModelWhereInput> | null
    notifications?: MeetupNotificationListRelationFilter
  }

  export type MeetupOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    locationName?: SortOrderInput | SortOrder
    start?: SortOrderInput | SortOrder
    end?: SortOrderInput | SortOrder
    addressId?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    creatorId?: SortOrder
    certificateModelId?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    workload?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    address?: AddressOrderByWithRelationInput
    meetupAdmins?: MeetupAdminOrderByRelationAggregateInput
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    invites?: InviteOrderByRelationAggregateInput
    certificates?: CertificateOrderByRelationAggregateInput
    meetupMedias?: MeetupMediaOrderByRelationAggregateInput
    guestLoads?: GuestLoadOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
    creator?: PersonOrderByWithRelationInput
    followers?: MeetupFollowerOrderByRelationAggregateInput
    inviteSheets?: MeetupInviteSheetOrderByRelationAggregateInput
    certificateModel?: CertificateModelOrderByWithRelationInput
    notifications?: MeetupNotificationOrderByRelationAggregateInput
    _relevance?: MeetupOrderByRelevanceInput
  }

  export type MeetupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    certificateModelId?: string
    AND?: MeetupWhereInput | MeetupWhereInput[]
    OR?: MeetupWhereInput[]
    NOT?: MeetupWhereInput | MeetupWhereInput[]
    title?: StringFilter<"Meetup"> | string
    description?: StringNullableFilter<"Meetup"> | string | null
    locationName?: StringNullableFilter<"Meetup"> | string | null
    start?: DateTimeNullableFilter<"Meetup"> | Date | string | null
    end?: DateTimeNullableFilter<"Meetup"> | Date | string | null
    addressId?: StringNullableFilter<"Meetup"> | string | null
    categoryId?: StringFilter<"Meetup"> | string
    creatorId?: StringFilter<"Meetup"> | string
    image?: StringNullableFilter<"Meetup"> | string | null
    workload?: IntNullableFilter<"Meetup"> | number | null
    status?: EnumMeetupStatusFilter<"Meetup"> | $Enums.MeetupStatus
    createdAt?: DateTimeFilter<"Meetup"> | Date | string
    updatedAt?: DateTimeFilter<"Meetup"> | Date | string
    address?: XOR<AddressNullableScalarRelationFilter, AddressWhereInput> | null
    meetupAdmins?: MeetupAdminListRelationFilter
    subscriptions?: SubscriptionListRelationFilter
    invites?: InviteListRelationFilter
    certificates?: CertificateListRelationFilter
    meetupMedias?: MeetupMediaListRelationFilter
    guestLoads?: GuestLoadListRelationFilter
    category?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    creator?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    followers?: MeetupFollowerListRelationFilter
    inviteSheets?: MeetupInviteSheetListRelationFilter
    certificateModel?: XOR<CertificateModelNullableScalarRelationFilter, CertificateModelWhereInput> | null
    notifications?: MeetupNotificationListRelationFilter
  }, "id" | "certificateModelId">

  export type MeetupOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    locationName?: SortOrderInput | SortOrder
    start?: SortOrderInput | SortOrder
    end?: SortOrderInput | SortOrder
    addressId?: SortOrderInput | SortOrder
    categoryId?: SortOrder
    creatorId?: SortOrder
    certificateModelId?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    workload?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetupCountOrderByAggregateInput
    _avg?: MeetupAvgOrderByAggregateInput
    _max?: MeetupMaxOrderByAggregateInput
    _min?: MeetupMinOrderByAggregateInput
    _sum?: MeetupSumOrderByAggregateInput
  }

  export type MeetupScalarWhereWithAggregatesInput = {
    AND?: MeetupScalarWhereWithAggregatesInput | MeetupScalarWhereWithAggregatesInput[]
    OR?: MeetupScalarWhereWithAggregatesInput[]
    NOT?: MeetupScalarWhereWithAggregatesInput | MeetupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Meetup"> | string
    title?: StringWithAggregatesFilter<"Meetup"> | string
    description?: StringNullableWithAggregatesFilter<"Meetup"> | string | null
    locationName?: StringNullableWithAggregatesFilter<"Meetup"> | string | null
    start?: DateTimeNullableWithAggregatesFilter<"Meetup"> | Date | string | null
    end?: DateTimeNullableWithAggregatesFilter<"Meetup"> | Date | string | null
    addressId?: StringNullableWithAggregatesFilter<"Meetup"> | string | null
    categoryId?: StringWithAggregatesFilter<"Meetup"> | string
    creatorId?: StringWithAggregatesFilter<"Meetup"> | string
    certificateModelId?: StringNullableWithAggregatesFilter<"Meetup"> | string | null
    image?: StringNullableWithAggregatesFilter<"Meetup"> | string | null
    workload?: IntNullableWithAggregatesFilter<"Meetup"> | number | null
    status?: EnumMeetupStatusWithAggregatesFilter<"Meetup"> | $Enums.MeetupStatus
    createdAt?: DateTimeWithAggregatesFilter<"Meetup"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Meetup"> | Date | string
  }

  export type MeetupNotificationWhereInput = {
    AND?: MeetupNotificationWhereInput | MeetupNotificationWhereInput[]
    OR?: MeetupNotificationWhereInput[]
    NOT?: MeetupNotificationWhereInput | MeetupNotificationWhereInput[]
    id?: StringFilter<"MeetupNotification"> | string
    text?: StringFilter<"MeetupNotification"> | string
    meetupId?: StringFilter<"MeetupNotification"> | string
    personId?: StringFilter<"MeetupNotification"> | string
    createdAt?: DateTimeFilter<"MeetupNotification"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }

  export type MeetupNotificationOrderByWithRelationInput = {
    id?: SortOrder
    text?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
    meetup?: MeetupOrderByWithRelationInput
    person?: PersonOrderByWithRelationInput
    _relevance?: MeetupNotificationOrderByRelevanceInput
  }

  export type MeetupNotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MeetupNotificationWhereInput | MeetupNotificationWhereInput[]
    OR?: MeetupNotificationWhereInput[]
    NOT?: MeetupNotificationWhereInput | MeetupNotificationWhereInput[]
    text?: StringFilter<"MeetupNotification"> | string
    meetupId?: StringFilter<"MeetupNotification"> | string
    personId?: StringFilter<"MeetupNotification"> | string
    createdAt?: DateTimeFilter<"MeetupNotification"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }, "id">

  export type MeetupNotificationOrderByWithAggregationInput = {
    id?: SortOrder
    text?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
    _count?: MeetupNotificationCountOrderByAggregateInput
    _max?: MeetupNotificationMaxOrderByAggregateInput
    _min?: MeetupNotificationMinOrderByAggregateInput
  }

  export type MeetupNotificationScalarWhereWithAggregatesInput = {
    AND?: MeetupNotificationScalarWhereWithAggregatesInput | MeetupNotificationScalarWhereWithAggregatesInput[]
    OR?: MeetupNotificationScalarWhereWithAggregatesInput[]
    NOT?: MeetupNotificationScalarWhereWithAggregatesInput | MeetupNotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MeetupNotification"> | string
    text?: StringWithAggregatesFilter<"MeetupNotification"> | string
    meetupId?: StringWithAggregatesFilter<"MeetupNotification"> | string
    personId?: StringWithAggregatesFilter<"MeetupNotification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MeetupNotification"> | Date | string
  }

  export type CertificateModelWhereInput = {
    AND?: CertificateModelWhereInput | CertificateModelWhereInput[]
    OR?: CertificateModelWhereInput[]
    NOT?: CertificateModelWhereInput | CertificateModelWhereInput[]
    id?: StringFilter<"CertificateModel"> | string
    imageLink?: StringFilter<"CertificateModel"> | string
    content?: StringFilter<"CertificateModel"> | string
    createdAt?: DateTimeFilter<"CertificateModel"> | Date | string
    meetup?: XOR<MeetupNullableScalarRelationFilter, MeetupWhereInput> | null
  }

  export type CertificateModelOrderByWithRelationInput = {
    id?: SortOrder
    imageLink?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    meetup?: MeetupOrderByWithRelationInput
    _relevance?: CertificateModelOrderByRelevanceInput
  }

  export type CertificateModelWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CertificateModelWhereInput | CertificateModelWhereInput[]
    OR?: CertificateModelWhereInput[]
    NOT?: CertificateModelWhereInput | CertificateModelWhereInput[]
    imageLink?: StringFilter<"CertificateModel"> | string
    content?: StringFilter<"CertificateModel"> | string
    createdAt?: DateTimeFilter<"CertificateModel"> | Date | string
    meetup?: XOR<MeetupNullableScalarRelationFilter, MeetupWhereInput> | null
  }, "id">

  export type CertificateModelOrderByWithAggregationInput = {
    id?: SortOrder
    imageLink?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    _count?: CertificateModelCountOrderByAggregateInput
    _max?: CertificateModelMaxOrderByAggregateInput
    _min?: CertificateModelMinOrderByAggregateInput
  }

  export type CertificateModelScalarWhereWithAggregatesInput = {
    AND?: CertificateModelScalarWhereWithAggregatesInput | CertificateModelScalarWhereWithAggregatesInput[]
    OR?: CertificateModelScalarWhereWithAggregatesInput[]
    NOT?: CertificateModelScalarWhereWithAggregatesInput | CertificateModelScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CertificateModel"> | string
    imageLink?: StringWithAggregatesFilter<"CertificateModel"> | string
    content?: StringWithAggregatesFilter<"CertificateModel"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CertificateModel"> | Date | string
  }

  export type MeetupInviteSheetWhereInput = {
    AND?: MeetupInviteSheetWhereInput | MeetupInviteSheetWhereInput[]
    OR?: MeetupInviteSheetWhereInput[]
    NOT?: MeetupInviteSheetWhereInput | MeetupInviteSheetWhereInput[]
    id?: StringFilter<"MeetupInviteSheet"> | string
    link?: StringFilter<"MeetupInviteSheet"> | string
    meetupId?: StringFilter<"MeetupInviteSheet"> | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
  }

  export type MeetupInviteSheetOrderByWithRelationInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
    meetup?: MeetupOrderByWithRelationInput
    _relevance?: MeetupInviteSheetOrderByRelevanceInput
  }

  export type MeetupInviteSheetWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MeetupInviteSheetWhereInput | MeetupInviteSheetWhereInput[]
    OR?: MeetupInviteSheetWhereInput[]
    NOT?: MeetupInviteSheetWhereInput | MeetupInviteSheetWhereInput[]
    link?: StringFilter<"MeetupInviteSheet"> | string
    meetupId?: StringFilter<"MeetupInviteSheet"> | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
  }, "id">

  export type MeetupInviteSheetOrderByWithAggregationInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
    _count?: MeetupInviteSheetCountOrderByAggregateInput
    _max?: MeetupInviteSheetMaxOrderByAggregateInput
    _min?: MeetupInviteSheetMinOrderByAggregateInput
  }

  export type MeetupInviteSheetScalarWhereWithAggregatesInput = {
    AND?: MeetupInviteSheetScalarWhereWithAggregatesInput | MeetupInviteSheetScalarWhereWithAggregatesInput[]
    OR?: MeetupInviteSheetScalarWhereWithAggregatesInput[]
    NOT?: MeetupInviteSheetScalarWhereWithAggregatesInput | MeetupInviteSheetScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MeetupInviteSheet"> | string
    link?: StringWithAggregatesFilter<"MeetupInviteSheet"> | string
    meetupId?: StringWithAggregatesFilter<"MeetupInviteSheet"> | string
  }

  export type MeetupRoleWhereInput = {
    AND?: MeetupRoleWhereInput | MeetupRoleWhereInput[]
    OR?: MeetupRoleWhereInput[]
    NOT?: MeetupRoleWhereInput | MeetupRoleWhereInput[]
    id?: StringFilter<"MeetupRole"> | string
    name?: StringFilter<"MeetupRole"> | string
    subscriptionPrice?: DecimalFilter<"MeetupRole"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"MeetupRole"> | Date | string
    updatedAt?: DateTimeFilter<"MeetupRole"> | Date | string
    subscriptions?: SubscriptionListRelationFilter
  }

  export type MeetupRoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptions?: SubscriptionOrderByRelationAggregateInput
    _relevance?: MeetupRoleOrderByRelevanceInput
  }

  export type MeetupRoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MeetupRoleWhereInput | MeetupRoleWhereInput[]
    OR?: MeetupRoleWhereInput[]
    NOT?: MeetupRoleWhereInput | MeetupRoleWhereInput[]
    name?: StringFilter<"MeetupRole"> | string
    subscriptionPrice?: DecimalFilter<"MeetupRole"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFilter<"MeetupRole"> | Date | string
    updatedAt?: DateTimeFilter<"MeetupRole"> | Date | string
    subscriptions?: SubscriptionListRelationFilter
  }, "id">

  export type MeetupRoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetupRoleCountOrderByAggregateInput
    _avg?: MeetupRoleAvgOrderByAggregateInput
    _max?: MeetupRoleMaxOrderByAggregateInput
    _min?: MeetupRoleMinOrderByAggregateInput
    _sum?: MeetupRoleSumOrderByAggregateInput
  }

  export type MeetupRoleScalarWhereWithAggregatesInput = {
    AND?: MeetupRoleScalarWhereWithAggregatesInput | MeetupRoleScalarWhereWithAggregatesInput[]
    OR?: MeetupRoleScalarWhereWithAggregatesInput[]
    NOT?: MeetupRoleScalarWhereWithAggregatesInput | MeetupRoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MeetupRole"> | string
    name?: StringWithAggregatesFilter<"MeetupRole"> | string
    subscriptionPrice?: DecimalWithAggregatesFilter<"MeetupRole"> | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeWithAggregatesFilter<"MeetupRole"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MeetupRole"> | Date | string
  }

  export type MeetupAdminWhereInput = {
    AND?: MeetupAdminWhereInput | MeetupAdminWhereInput[]
    OR?: MeetupAdminWhereInput[]
    NOT?: MeetupAdminWhereInput | MeetupAdminWhereInput[]
    id?: StringFilter<"MeetupAdmin"> | string
    meetupId?: StringFilter<"MeetupAdmin"> | string
    personId?: StringFilter<"MeetupAdmin"> | string
    role?: StringFilter<"MeetupAdmin"> | string
    createdAt?: DateTimeFilter<"MeetupAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"MeetupAdmin"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }

  export type MeetupAdminOrderByWithRelationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetup?: MeetupOrderByWithRelationInput
    person?: PersonOrderByWithRelationInput
    _relevance?: MeetupAdminOrderByRelevanceInput
  }

  export type MeetupAdminWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    meetupId_personId?: MeetupAdminMeetupIdPersonIdCompoundUniqueInput
    AND?: MeetupAdminWhereInput | MeetupAdminWhereInput[]
    OR?: MeetupAdminWhereInput[]
    NOT?: MeetupAdminWhereInput | MeetupAdminWhereInput[]
    meetupId?: StringFilter<"MeetupAdmin"> | string
    personId?: StringFilter<"MeetupAdmin"> | string
    role?: StringFilter<"MeetupAdmin"> | string
    createdAt?: DateTimeFilter<"MeetupAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"MeetupAdmin"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }, "id" | "meetupId_personId">

  export type MeetupAdminOrderByWithAggregationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetupAdminCountOrderByAggregateInput
    _max?: MeetupAdminMaxOrderByAggregateInput
    _min?: MeetupAdminMinOrderByAggregateInput
  }

  export type MeetupAdminScalarWhereWithAggregatesInput = {
    AND?: MeetupAdminScalarWhereWithAggregatesInput | MeetupAdminScalarWhereWithAggregatesInput[]
    OR?: MeetupAdminScalarWhereWithAggregatesInput[]
    NOT?: MeetupAdminScalarWhereWithAggregatesInput | MeetupAdminScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MeetupAdmin"> | string
    meetupId?: StringWithAggregatesFilter<"MeetupAdmin"> | string
    personId?: StringWithAggregatesFilter<"MeetupAdmin"> | string
    role?: StringWithAggregatesFilter<"MeetupAdmin"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MeetupAdmin"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MeetupAdmin"> | Date | string
  }

  export type MeetupFollowerWhereInput = {
    AND?: MeetupFollowerWhereInput | MeetupFollowerWhereInput[]
    OR?: MeetupFollowerWhereInput[]
    NOT?: MeetupFollowerWhereInput | MeetupFollowerWhereInput[]
    id?: StringFilter<"MeetupFollower"> | string
    meetupId?: StringFilter<"MeetupFollower"> | string
    personId?: StringFilter<"MeetupFollower"> | string
    createdAt?: DateTimeFilter<"MeetupFollower"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }

  export type MeetupFollowerOrderByWithRelationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
    meetup?: MeetupOrderByWithRelationInput
    person?: PersonOrderByWithRelationInput
    _relevance?: MeetupFollowerOrderByRelevanceInput
  }

  export type MeetupFollowerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    meetupId_personId?: MeetupFollowerMeetupIdPersonIdCompoundUniqueInput
    AND?: MeetupFollowerWhereInput | MeetupFollowerWhereInput[]
    OR?: MeetupFollowerWhereInput[]
    NOT?: MeetupFollowerWhereInput | MeetupFollowerWhereInput[]
    meetupId?: StringFilter<"MeetupFollower"> | string
    personId?: StringFilter<"MeetupFollower"> | string
    createdAt?: DateTimeFilter<"MeetupFollower"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }, "id" | "meetupId_personId">

  export type MeetupFollowerOrderByWithAggregationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
    _count?: MeetupFollowerCountOrderByAggregateInput
    _max?: MeetupFollowerMaxOrderByAggregateInput
    _min?: MeetupFollowerMinOrderByAggregateInput
  }

  export type MeetupFollowerScalarWhereWithAggregatesInput = {
    AND?: MeetupFollowerScalarWhereWithAggregatesInput | MeetupFollowerScalarWhereWithAggregatesInput[]
    OR?: MeetupFollowerScalarWhereWithAggregatesInput[]
    NOT?: MeetupFollowerScalarWhereWithAggregatesInput | MeetupFollowerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MeetupFollower"> | string
    meetupId?: StringWithAggregatesFilter<"MeetupFollower"> | string
    personId?: StringWithAggregatesFilter<"MeetupFollower"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MeetupFollower"> | Date | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    meetups?: MeetupListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetups?: MeetupOrderByRelationAggregateInput
    _relevance?: CategoryOrderByRelevanceInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    name?: StringFilter<"Category"> | string
    createdAt?: DateTimeFilter<"Category"> | Date | string
    updatedAt?: DateTimeFilter<"Category"> | Date | string
    meetups?: MeetupListRelationFilter
  }, "id">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Category"> | Date | string
  }

  export type SubscriptionWhereInput = {
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    id?: StringFilter<"Subscription"> | string
    personId?: StringFilter<"Subscription"> | string
    meetupId?: StringFilter<"Subscription"> | string
    meetupRoleId?: StringFilter<"Subscription"> | string
    certificateLink?: StringNullableFilter<"Subscription"> | string | null
    presenceConfirmation?: BoolNullableFilter<"Subscription"> | boolean | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    meetupRole?: XOR<MeetupRoleScalarRelationFilter, MeetupRoleWhereInput>
    subscriptionPayments?: SubscriptionPaymentListRelationFilter
  }

  export type SubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    meetupRoleId?: SortOrder
    certificateLink?: SortOrderInput | SortOrder
    presenceConfirmation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    person?: PersonOrderByWithRelationInput
    meetup?: MeetupOrderByWithRelationInput
    meetupRole?: MeetupRoleOrderByWithRelationInput
    subscriptionPayments?: SubscriptionPaymentOrderByRelationAggregateInput
    _relevance?: SubscriptionOrderByRelevanceInput
  }

  export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    personId_meetupId?: SubscriptionPersonIdMeetupIdCompoundUniqueInput
    AND?: SubscriptionWhereInput | SubscriptionWhereInput[]
    OR?: SubscriptionWhereInput[]
    NOT?: SubscriptionWhereInput | SubscriptionWhereInput[]
    personId?: StringFilter<"Subscription"> | string
    meetupId?: StringFilter<"Subscription"> | string
    meetupRoleId?: StringFilter<"Subscription"> | string
    certificateLink?: StringNullableFilter<"Subscription"> | string | null
    presenceConfirmation?: BoolNullableFilter<"Subscription"> | boolean | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    meetupRole?: XOR<MeetupRoleScalarRelationFilter, MeetupRoleWhereInput>
    subscriptionPayments?: SubscriptionPaymentListRelationFilter
  }, "id" | "personId_meetupId">

  export type SubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    meetupRoleId?: SortOrder
    certificateLink?: SortOrderInput | SortOrder
    presenceConfirmation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionCountOrderByAggregateInput
    _max?: SubscriptionMaxOrderByAggregateInput
    _min?: SubscriptionMinOrderByAggregateInput
  }

  export type SubscriptionScalarWhereWithAggregatesInput = {
    AND?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    OR?: SubscriptionScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionScalarWhereWithAggregatesInput | SubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Subscription"> | string
    personId?: StringWithAggregatesFilter<"Subscription"> | string
    meetupId?: StringWithAggregatesFilter<"Subscription"> | string
    meetupRoleId?: StringWithAggregatesFilter<"Subscription"> | string
    certificateLink?: StringNullableWithAggregatesFilter<"Subscription"> | string | null
    presenceConfirmation?: BoolNullableWithAggregatesFilter<"Subscription"> | boolean | null
    createdAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  }

  export type InviteWhereInput = {
    AND?: InviteWhereInput | InviteWhereInput[]
    OR?: InviteWhereInput[]
    NOT?: InviteWhereInput | InviteWhereInput[]
    id?: StringFilter<"Invite"> | string
    personId?: StringFilter<"Invite"> | string
    meetupId?: StringFilter<"Invite"> | string
    link?: StringFilter<"Invite"> | string
    createdAt?: DateTimeFilter<"Invite"> | Date | string
    updatedAt?: DateTimeFilter<"Invite"> | Date | string
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
  }

  export type InviteOrderByWithRelationInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    person?: PersonOrderByWithRelationInput
    meetup?: MeetupOrderByWithRelationInput
    _relevance?: InviteOrderByRelevanceInput
  }

  export type InviteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    personId_meetupId?: InvitePersonIdMeetupIdCompoundUniqueInput
    AND?: InviteWhereInput | InviteWhereInput[]
    OR?: InviteWhereInput[]
    NOT?: InviteWhereInput | InviteWhereInput[]
    personId?: StringFilter<"Invite"> | string
    meetupId?: StringFilter<"Invite"> | string
    link?: StringFilter<"Invite"> | string
    createdAt?: DateTimeFilter<"Invite"> | Date | string
    updatedAt?: DateTimeFilter<"Invite"> | Date | string
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
  }, "id" | "personId_meetupId">

  export type InviteOrderByWithAggregationInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: InviteCountOrderByAggregateInput
    _max?: InviteMaxOrderByAggregateInput
    _min?: InviteMinOrderByAggregateInput
  }

  export type InviteScalarWhereWithAggregatesInput = {
    AND?: InviteScalarWhereWithAggregatesInput | InviteScalarWhereWithAggregatesInput[]
    OR?: InviteScalarWhereWithAggregatesInput[]
    NOT?: InviteScalarWhereWithAggregatesInput | InviteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Invite"> | string
    personId?: StringWithAggregatesFilter<"Invite"> | string
    meetupId?: StringWithAggregatesFilter<"Invite"> | string
    link?: StringWithAggregatesFilter<"Invite"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Invite"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Invite"> | Date | string
  }

  export type PaymentWhereInput = {
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    id?: StringFilter<"Payment"> | string
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    subscriptionPayments?: SubscriptionPaymentListRelationFilter
  }

  export type PaymentOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscriptionPayments?: SubscriptionPaymentOrderByRelationAggregateInput
    _relevance?: PaymentOrderByRelevanceInput
  }

  export type PaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PaymentWhereInput | PaymentWhereInput[]
    OR?: PaymentWhereInput[]
    NOT?: PaymentWhereInput | PaymentWhereInput[]
    createdAt?: DateTimeFilter<"Payment"> | Date | string
    updatedAt?: DateTimeFilter<"Payment"> | Date | string
    subscriptionPayments?: SubscriptionPaymentListRelationFilter
  }, "id">

  export type PaymentOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PaymentCountOrderByAggregateInput
    _max?: PaymentMaxOrderByAggregateInput
    _min?: PaymentMinOrderByAggregateInput
  }

  export type PaymentScalarWhereWithAggregatesInput = {
    AND?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    OR?: PaymentScalarWhereWithAggregatesInput[]
    NOT?: PaymentScalarWhereWithAggregatesInput | PaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Payment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Payment"> | Date | string
  }

  export type SubscriptionPaymentWhereInput = {
    AND?: SubscriptionPaymentWhereInput | SubscriptionPaymentWhereInput[]
    OR?: SubscriptionPaymentWhereInput[]
    NOT?: SubscriptionPaymentWhereInput | SubscriptionPaymentWhereInput[]
    id?: StringFilter<"SubscriptionPayment"> | string
    subscriptionId?: StringFilter<"SubscriptionPayment"> | string
    paymentId?: StringFilter<"SubscriptionPayment"> | string
    price?: DecimalFilter<"SubscriptionPayment"> | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFilter<"SubscriptionPayment"> | boolean
    createdAt?: DateTimeFilter<"SubscriptionPayment"> | Date | string
    updatedAt?: DateTimeFilter<"SubscriptionPayment"> | Date | string
    subscription?: XOR<SubscriptionScalarRelationFilter, SubscriptionWhereInput>
    payment?: XOR<PaymentScalarRelationFilter, PaymentWhereInput>
  }

  export type SubscriptionPaymentOrderByWithRelationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentId?: SortOrder
    price?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    subscription?: SubscriptionOrderByWithRelationInput
    payment?: PaymentOrderByWithRelationInput
    _relevance?: SubscriptionPaymentOrderByRelevanceInput
  }

  export type SubscriptionPaymentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SubscriptionPaymentWhereInput | SubscriptionPaymentWhereInput[]
    OR?: SubscriptionPaymentWhereInput[]
    NOT?: SubscriptionPaymentWhereInput | SubscriptionPaymentWhereInput[]
    subscriptionId?: StringFilter<"SubscriptionPayment"> | string
    paymentId?: StringFilter<"SubscriptionPayment"> | string
    price?: DecimalFilter<"SubscriptionPayment"> | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFilter<"SubscriptionPayment"> | boolean
    createdAt?: DateTimeFilter<"SubscriptionPayment"> | Date | string
    updatedAt?: DateTimeFilter<"SubscriptionPayment"> | Date | string
    subscription?: XOR<SubscriptionScalarRelationFilter, SubscriptionWhereInput>
    payment?: XOR<PaymentScalarRelationFilter, PaymentWhereInput>
  }, "id">

  export type SubscriptionPaymentOrderByWithAggregationInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentId?: SortOrder
    price?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SubscriptionPaymentCountOrderByAggregateInput
    _avg?: SubscriptionPaymentAvgOrderByAggregateInput
    _max?: SubscriptionPaymentMaxOrderByAggregateInput
    _min?: SubscriptionPaymentMinOrderByAggregateInput
    _sum?: SubscriptionPaymentSumOrderByAggregateInput
  }

  export type SubscriptionPaymentScalarWhereWithAggregatesInput = {
    AND?: SubscriptionPaymentScalarWhereWithAggregatesInput | SubscriptionPaymentScalarWhereWithAggregatesInput[]
    OR?: SubscriptionPaymentScalarWhereWithAggregatesInput[]
    NOT?: SubscriptionPaymentScalarWhereWithAggregatesInput | SubscriptionPaymentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SubscriptionPayment"> | string
    subscriptionId?: StringWithAggregatesFilter<"SubscriptionPayment"> | string
    paymentId?: StringWithAggregatesFilter<"SubscriptionPayment"> | string
    price?: DecimalWithAggregatesFilter<"SubscriptionPayment"> | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolWithAggregatesFilter<"SubscriptionPayment"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"SubscriptionPayment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SubscriptionPayment"> | Date | string
  }

  export type CertificateWhereInput = {
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    id?: StringFilter<"Certificate"> | string
    personId?: StringFilter<"Certificate"> | string
    meetupId?: StringFilter<"Certificate"> | string
    link?: StringFilter<"Certificate"> | string
    securityCode?: StringFilter<"Certificate"> | string
    datetime?: DateTimeFilter<"Certificate"> | Date | string
    createdAt?: DateTimeFilter<"Certificate"> | Date | string
    updatedAt?: DateTimeFilter<"Certificate"> | Date | string
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
  }

  export type CertificateOrderByWithRelationInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    securityCode?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    person?: PersonOrderByWithRelationInput
    meetup?: MeetupOrderByWithRelationInput
    _relevance?: CertificateOrderByRelevanceInput
  }

  export type CertificateWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    securityCode?: string
    personId_meetupId?: CertificatePersonIdMeetupIdCompoundUniqueInput
    AND?: CertificateWhereInput | CertificateWhereInput[]
    OR?: CertificateWhereInput[]
    NOT?: CertificateWhereInput | CertificateWhereInput[]
    personId?: StringFilter<"Certificate"> | string
    meetupId?: StringFilter<"Certificate"> | string
    link?: StringFilter<"Certificate"> | string
    datetime?: DateTimeFilter<"Certificate"> | Date | string
    createdAt?: DateTimeFilter<"Certificate"> | Date | string
    updatedAt?: DateTimeFilter<"Certificate"> | Date | string
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
  }, "id" | "securityCode" | "personId_meetupId">

  export type CertificateOrderByWithAggregationInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    securityCode?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CertificateCountOrderByAggregateInput
    _max?: CertificateMaxOrderByAggregateInput
    _min?: CertificateMinOrderByAggregateInput
  }

  export type CertificateScalarWhereWithAggregatesInput = {
    AND?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    OR?: CertificateScalarWhereWithAggregatesInput[]
    NOT?: CertificateScalarWhereWithAggregatesInput | CertificateScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Certificate"> | string
    personId?: StringWithAggregatesFilter<"Certificate"> | string
    meetupId?: StringWithAggregatesFilter<"Certificate"> | string
    link?: StringWithAggregatesFilter<"Certificate"> | string
    securityCode?: StringWithAggregatesFilter<"Certificate"> | string
    datetime?: DateTimeWithAggregatesFilter<"Certificate"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Certificate"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Certificate"> | Date | string
  }

  export type MeetupMediaWhereInput = {
    AND?: MeetupMediaWhereInput | MeetupMediaWhereInput[]
    OR?: MeetupMediaWhereInput[]
    NOT?: MeetupMediaWhereInput | MeetupMediaWhereInput[]
    id?: StringFilter<"MeetupMedia"> | string
    meetupId?: StringFilter<"MeetupMedia"> | string
    personId?: StringFilter<"MeetupMedia"> | string
    link?: StringFilter<"MeetupMedia"> | string
    datetime?: DateTimeFilter<"MeetupMedia"> | Date | string
    createdAt?: DateTimeFilter<"MeetupMedia"> | Date | string
    updatedAt?: DateTimeFilter<"MeetupMedia"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }

  export type MeetupMediaOrderByWithRelationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    link?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetup?: MeetupOrderByWithRelationInput
    person?: PersonOrderByWithRelationInput
    _relevance?: MeetupMediaOrderByRelevanceInput
  }

  export type MeetupMediaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MeetupMediaWhereInput | MeetupMediaWhereInput[]
    OR?: MeetupMediaWhereInput[]
    NOT?: MeetupMediaWhereInput | MeetupMediaWhereInput[]
    meetupId?: StringFilter<"MeetupMedia"> | string
    personId?: StringFilter<"MeetupMedia"> | string
    link?: StringFilter<"MeetupMedia"> | string
    datetime?: DateTimeFilter<"MeetupMedia"> | Date | string
    createdAt?: DateTimeFilter<"MeetupMedia"> | Date | string
    updatedAt?: DateTimeFilter<"MeetupMedia"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }, "id">

  export type MeetupMediaOrderByWithAggregationInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    link?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: MeetupMediaCountOrderByAggregateInput
    _max?: MeetupMediaMaxOrderByAggregateInput
    _min?: MeetupMediaMinOrderByAggregateInput
  }

  export type MeetupMediaScalarWhereWithAggregatesInput = {
    AND?: MeetupMediaScalarWhereWithAggregatesInput | MeetupMediaScalarWhereWithAggregatesInput[]
    OR?: MeetupMediaScalarWhereWithAggregatesInput[]
    NOT?: MeetupMediaScalarWhereWithAggregatesInput | MeetupMediaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MeetupMedia"> | string
    meetupId?: StringWithAggregatesFilter<"MeetupMedia"> | string
    personId?: StringWithAggregatesFilter<"MeetupMedia"> | string
    link?: StringWithAggregatesFilter<"MeetupMedia"> | string
    datetime?: DateTimeWithAggregatesFilter<"MeetupMedia"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"MeetupMedia"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"MeetupMedia"> | Date | string
  }

  export type GuestLoadWhereInput = {
    AND?: GuestLoadWhereInput | GuestLoadWhereInput[]
    OR?: GuestLoadWhereInput[]
    NOT?: GuestLoadWhereInput | GuestLoadWhereInput[]
    id?: StringFilter<"GuestLoad"> | string
    link?: StringFilter<"GuestLoad"> | string
    meetupId?: StringFilter<"GuestLoad"> | string
    personId?: StringFilter<"GuestLoad"> | string
    datetime?: DateTimeFilter<"GuestLoad"> | Date | string
    count?: IntFilter<"GuestLoad"> | number
    createdAt?: DateTimeFilter<"GuestLoad"> | Date | string
    updatedAt?: DateTimeFilter<"GuestLoad"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }

  export type GuestLoadOrderByWithRelationInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    datetime?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    meetup?: MeetupOrderByWithRelationInput
    person?: PersonOrderByWithRelationInput
    _relevance?: GuestLoadOrderByRelevanceInput
  }

  export type GuestLoadWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: GuestLoadWhereInput | GuestLoadWhereInput[]
    OR?: GuestLoadWhereInput[]
    NOT?: GuestLoadWhereInput | GuestLoadWhereInput[]
    link?: StringFilter<"GuestLoad"> | string
    meetupId?: StringFilter<"GuestLoad"> | string
    personId?: StringFilter<"GuestLoad"> | string
    datetime?: DateTimeFilter<"GuestLoad"> | Date | string
    count?: IntFilter<"GuestLoad"> | number
    createdAt?: DateTimeFilter<"GuestLoad"> | Date | string
    updatedAt?: DateTimeFilter<"GuestLoad"> | Date | string
    meetup?: XOR<MeetupScalarRelationFilter, MeetupWhereInput>
    person?: XOR<PersonScalarRelationFilter, PersonWhereInput>
  }, "id">

  export type GuestLoadOrderByWithAggregationInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    datetime?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: GuestLoadCountOrderByAggregateInput
    _avg?: GuestLoadAvgOrderByAggregateInput
    _max?: GuestLoadMaxOrderByAggregateInput
    _min?: GuestLoadMinOrderByAggregateInput
    _sum?: GuestLoadSumOrderByAggregateInput
  }

  export type GuestLoadScalarWhereWithAggregatesInput = {
    AND?: GuestLoadScalarWhereWithAggregatesInput | GuestLoadScalarWhereWithAggregatesInput[]
    OR?: GuestLoadScalarWhereWithAggregatesInput[]
    NOT?: GuestLoadScalarWhereWithAggregatesInput | GuestLoadScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"GuestLoad"> | string
    link?: StringWithAggregatesFilter<"GuestLoad"> | string
    meetupId?: StringWithAggregatesFilter<"GuestLoad"> | string
    personId?: StringWithAggregatesFilter<"GuestLoad"> | string
    datetime?: DateTimeWithAggregatesFilter<"GuestLoad"> | Date | string
    count?: IntWithAggregatesFilter<"GuestLoad"> | number
    createdAt?: DateTimeWithAggregatesFilter<"GuestLoad"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"GuestLoad"> | Date | string
  }

  export type UserCreateInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
    person?: PersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    person?: PersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
    person?: PersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    person?: PersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateManyInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
    userId: string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountCreateManyInput = {
    id: string
    accountId: string
    providerId: string
    userId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUncheckedCreateInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationCreateManyInput = {
    id: string
    identifier: string
    value: string
    expiresAt: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    identifier?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonCreateInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type PersonCreateManyInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
  }

  export type PersonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AddressCreateInput = {
    id?: string
    mapLink?: string | null
    state: string
    city: string
    district: string
    street: string
    number?: string | null
    complement?: string | null
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetups?: MeetupCreateNestedManyWithoutAddressInput
  }

  export type AddressUncheckedCreateInput = {
    id?: string
    mapLink?: string | null
    state: string
    city: string
    district: string
    street: string
    number?: string | null
    complement?: string | null
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetups?: MeetupUncheckedCreateNestedManyWithoutAddressInput
  }

  export type AddressUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mapLink?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetups?: MeetupUpdateManyWithoutAddressNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    mapLink?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetups?: MeetupUncheckedUpdateManyWithoutAddressNestedInput
  }

  export type AddressCreateManyInput = {
    id?: string
    mapLink?: string | null
    state: string
    city: string
    district: string
    street: string
    number?: string | null
    complement?: string | null
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    mapLink?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    mapLink?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupCreateInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupNotificationCreateInput = {
    id?: string
    text: string
    createdAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutNotificationsInput
    person: PersonCreateNestedOneWithoutNotificationsInput
  }

  export type MeetupNotificationUncheckedCreateInput = {
    id?: string
    text: string
    meetupId: string
    personId: string
    createdAt?: Date | string
  }

  export type MeetupNotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutNotificationsNestedInput
    person?: PersonUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type MeetupNotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupNotificationCreateManyInput = {
    id?: string
    text: string
    meetupId: string
    personId: string
    createdAt?: Date | string
  }

  export type MeetupNotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupNotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateModelCreateInput = {
    id?: string
    imageLink: string
    content: string
    createdAt?: Date | string
    meetup?: MeetupCreateNestedOneWithoutCertificateModelInput
  }

  export type CertificateModelUncheckedCreateInput = {
    id?: string
    imageLink: string
    content: string
    createdAt?: Date | string
    meetup?: MeetupUncheckedCreateNestedOneWithoutCertificateModelInput
  }

  export type CertificateModelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageLink?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneWithoutCertificateModelNestedInput
  }

  export type CertificateModelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageLink?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUncheckedUpdateOneWithoutCertificateModelNestedInput
  }

  export type CertificateModelCreateManyInput = {
    id?: string
    imageLink: string
    content: string
    createdAt?: Date | string
  }

  export type CertificateModelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageLink?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateModelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageLink?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupInviteSheetCreateInput = {
    id?: string
    link: string
    meetup: MeetupCreateNestedOneWithoutInviteSheetsInput
  }

  export type MeetupInviteSheetUncheckedCreateInput = {
    id?: string
    link: string
    meetupId: string
  }

  export type MeetupInviteSheetUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    meetup?: MeetupUpdateOneRequiredWithoutInviteSheetsNestedInput
  }

  export type MeetupInviteSheetUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
  }

  export type MeetupInviteSheetCreateManyInput = {
    id?: string
    link: string
    meetupId: string
  }

  export type MeetupInviteSheetUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type MeetupInviteSheetUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
  }

  export type MeetupRoleCreateInput = {
    id?: string
    name: string
    subscriptionPrice: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupRoleInput
  }

  export type MeetupRoleUncheckedCreateInput = {
    id?: string
    name: string
    subscriptionPrice: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupRoleInput
  }

  export type MeetupRoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: SubscriptionUpdateManyWithoutMeetupRoleNestedInput
  }

  export type MeetupRoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupRoleNestedInput
  }

  export type MeetupRoleCreateManyInput = {
    id?: string
    name: string
    subscriptionPrice: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupRoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupRoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupAdminCreateInput = {
    id?: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutMeetupAdminsInput
    person: PersonCreateNestedOneWithoutMeetupAdminsInput
  }

  export type MeetupAdminUncheckedCreateInput = {
    id?: string
    meetupId: string
    personId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupAdminUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutMeetupAdminsNestedInput
    person?: PersonUpdateOneRequiredWithoutMeetupAdminsNestedInput
  }

  export type MeetupAdminUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupAdminCreateManyInput = {
    id?: string
    meetupId: string
    personId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupAdminUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupAdminUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupFollowerCreateInput = {
    id?: string
    createdAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutFollowersInput
    person: PersonCreateNestedOneWithoutFollowingMeetupsInput
  }

  export type MeetupFollowerUncheckedCreateInput = {
    id?: string
    meetupId: string
    personId: string
    createdAt?: Date | string
  }

  export type MeetupFollowerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutFollowersNestedInput
    person?: PersonUpdateOneRequiredWithoutFollowingMeetupsNestedInput
  }

  export type MeetupFollowerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupFollowerCreateManyInput = {
    id?: string
    meetupId: string
    personId: string
    createdAt?: Date | string
  }

  export type MeetupFollowerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupFollowerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetups?: MeetupCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetups?: MeetupUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetups?: MeetupUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetups?: MeetupUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateInput = {
    id?: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutSubscriptionsInput
    meetup: MeetupCreateNestedOneWithoutSubscriptionsInput
    meetupRole: MeetupRoleCreateNestedOneWithoutSubscriptionsInput
    subscriptionPayments?: SubscriptionPaymentCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateInput = {
    id?: string
    personId: string
    meetupId: string
    meetupRoleId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutSubscriptionsNestedInput
    meetup?: MeetupUpdateOneRequiredWithoutSubscriptionsNestedInput
    meetupRole?: MeetupRoleUpdateOneRequiredWithoutSubscriptionsNestedInput
    subscriptionPayments?: SubscriptionPaymentUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    meetupRoleId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionCreateManyInput = {
    id?: string
    personId: string
    meetupId: string
    meetupRoleId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    meetupRoleId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateInput = {
    id?: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutInvitesInput
    meetup: MeetupCreateNestedOneWithoutInvitesInput
  }

  export type InviteUncheckedCreateInput = {
    id?: string
    personId: string
    meetupId: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutInvitesNestedInput
    meetup?: MeetupUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type InviteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteCreateManyInput = {
    id?: string
    personId: string
    meetupId: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionPayments?: SubscriptionPaymentCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedCreateNestedManyWithoutPaymentInput
  }

  export type PaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionPayments?: SubscriptionPaymentUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedUpdateManyWithoutPaymentNestedInput
  }

  export type PaymentCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPaymentCreateInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subscription: SubscriptionCreateNestedOneWithoutSubscriptionPaymentsInput
    payment: PaymentCreateNestedOneWithoutSubscriptionPaymentsInput
  }

  export type SubscriptionPaymentUncheckedCreateInput = {
    id?: string
    subscriptionId: string
    paymentId: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPaymentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUpdateOneRequiredWithoutSubscriptionPaymentsNestedInput
    payment?: PaymentUpdateOneRequiredWithoutSubscriptionPaymentsNestedInput
  }

  export type SubscriptionPaymentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPaymentCreateManyInput = {
    id?: string
    subscriptionId: string
    paymentId: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPaymentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPaymentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateCreateInput = {
    id?: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutCertificatesInput
    meetup: MeetupCreateNestedOneWithoutCertificatesInput
  }

  export type CertificateUncheckedCreateInput = {
    id?: string
    personId: string
    meetupId: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CertificateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutCertificatesNestedInput
    meetup?: MeetupUpdateOneRequiredWithoutCertificatesNestedInput
  }

  export type CertificateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateCreateManyInput = {
    id?: string
    personId: string
    meetupId: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CertificateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupMediaCreateInput = {
    id?: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutMeetupMediasInput
    person: PersonCreateNestedOneWithoutMeetupMediasInput
  }

  export type MeetupMediaUncheckedCreateInput = {
    id?: string
    meetupId: string
    personId: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupMediaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutMeetupMediasNestedInput
    person?: PersonUpdateOneRequiredWithoutMeetupMediasNestedInput
  }

  export type MeetupMediaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupMediaCreateManyInput = {
    id?: string
    meetupId: string
    personId: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupMediaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupMediaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestLoadCreateInput = {
    id?: string
    link: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutGuestLoadsInput
    person: PersonCreateNestedOneWithoutGuestLoadsInput
  }

  export type GuestLoadUncheckedCreateInput = {
    id?: string
    link: string
    meetupId: string
    personId: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestLoadUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutGuestLoadsNestedInput
    person?: PersonUpdateOneRequiredWithoutGuestLoadsNestedInput
  }

  export type GuestLoadUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestLoadCreateManyInput = {
    id?: string
    link: string
    meetupId: string
    personId: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestLoadUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestLoadUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type PersonNullableScalarRelationFilter = {
    is?: PersonWhereInput | null
    isNot?: PersonWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelevanceInput = {
    fields: UserOrderByRelevanceFieldEnum | UserOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SessionOrderByRelevanceInput = {
    fields: SessionOrderByRelevanceFieldEnum | SessionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    expiresAt?: SortOrder
    token?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountOrderByRelevanceInput = {
    fields: AccountOrderByRelevanceFieldEnum | AccountOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
    providerId?: SortOrder
    userId?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    idToken?: SortOrder
    accessTokenExpiresAt?: SortOrder
    refreshTokenExpiresAt?: SortOrder
    scope?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VerificationOrderByRelevanceInput = {
    fields: VerificationOrderByRelevanceFieldEnum | VerificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    identifier?: SortOrder
    value?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupAdminListRelationFilter = {
    every?: MeetupAdminWhereInput
    some?: MeetupAdminWhereInput
    none?: MeetupAdminWhereInput
  }

  export type SubscriptionListRelationFilter = {
    every?: SubscriptionWhereInput
    some?: SubscriptionWhereInput
    none?: SubscriptionWhereInput
  }

  export type InviteListRelationFilter = {
    every?: InviteWhereInput
    some?: InviteWhereInput
    none?: InviteWhereInput
  }

  export type CertificateListRelationFilter = {
    every?: CertificateWhereInput
    some?: CertificateWhereInput
    none?: CertificateWhereInput
  }

  export type MeetupMediaListRelationFilter = {
    every?: MeetupMediaWhereInput
    some?: MeetupMediaWhereInput
    none?: MeetupMediaWhereInput
  }

  export type GuestLoadListRelationFilter = {
    every?: GuestLoadWhereInput
    some?: GuestLoadWhereInput
    none?: GuestLoadWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type MeetupListRelationFilter = {
    every?: MeetupWhereInput
    some?: MeetupWhereInput
    none?: MeetupWhereInput
  }

  export type MeetupFollowerListRelationFilter = {
    every?: MeetupFollowerWhereInput
    some?: MeetupFollowerWhereInput
    none?: MeetupFollowerWhereInput
  }

  export type MeetupNotificationListRelationFilter = {
    every?: MeetupNotificationWhereInput
    some?: MeetupNotificationWhereInput
    none?: MeetupNotificationWhereInput
  }

  export type MeetupAdminOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InviteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CertificateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetupMediaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GuestLoadOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetupOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetupFollowerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetupNotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonOrderByRelevanceInput = {
    fields: PersonOrderByRelevanceFieldEnum | PersonOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PersonCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    birthdate?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    birthdate?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    gender?: SortOrder
    birthdate?: SortOrder
    cpf?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type AddressOrderByRelevanceInput = {
    fields: AddressOrderByRelevanceFieldEnum | AddressOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    mapLink?: SortOrder
    state?: SortOrder
    city?: SortOrder
    district?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    zipcode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    mapLink?: SortOrder
    state?: SortOrder
    city?: SortOrder
    district?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    zipcode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    mapLink?: SortOrder
    state?: SortOrder
    city?: SortOrder
    district?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    zipcode?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumMeetupStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MeetupStatus | EnumMeetupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MeetupStatus[]
    notIn?: $Enums.MeetupStatus[]
    not?: NestedEnumMeetupStatusFilter<$PrismaModel> | $Enums.MeetupStatus
  }

  export type AddressNullableScalarRelationFilter = {
    is?: AddressWhereInput | null
    isNot?: AddressWhereInput | null
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type PersonScalarRelationFilter = {
    is?: PersonWhereInput
    isNot?: PersonWhereInput
  }

  export type MeetupInviteSheetListRelationFilter = {
    every?: MeetupInviteSheetWhereInput
    some?: MeetupInviteSheetWhereInput
    none?: MeetupInviteSheetWhereInput
  }

  export type CertificateModelNullableScalarRelationFilter = {
    is?: CertificateModelWhereInput | null
    isNot?: CertificateModelWhereInput | null
  }

  export type MeetupInviteSheetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MeetupOrderByRelevanceInput = {
    fields: MeetupOrderByRelevanceFieldEnum | MeetupOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MeetupCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    locationName?: SortOrder
    start?: SortOrder
    end?: SortOrder
    addressId?: SortOrder
    categoryId?: SortOrder
    creatorId?: SortOrder
    certificateModelId?: SortOrder
    image?: SortOrder
    workload?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupAvgOrderByAggregateInput = {
    workload?: SortOrder
  }

  export type MeetupMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    locationName?: SortOrder
    start?: SortOrder
    end?: SortOrder
    addressId?: SortOrder
    categoryId?: SortOrder
    creatorId?: SortOrder
    certificateModelId?: SortOrder
    image?: SortOrder
    workload?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    locationName?: SortOrder
    start?: SortOrder
    end?: SortOrder
    addressId?: SortOrder
    categoryId?: SortOrder
    creatorId?: SortOrder
    certificateModelId?: SortOrder
    image?: SortOrder
    workload?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupSumOrderByAggregateInput = {
    workload?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumMeetupStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MeetupStatus | EnumMeetupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MeetupStatus[]
    notIn?: $Enums.MeetupStatus[]
    not?: NestedEnumMeetupStatusWithAggregatesFilter<$PrismaModel> | $Enums.MeetupStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMeetupStatusFilter<$PrismaModel>
    _max?: NestedEnumMeetupStatusFilter<$PrismaModel>
  }

  export type MeetupScalarRelationFilter = {
    is?: MeetupWhereInput
    isNot?: MeetupWhereInput
  }

  export type MeetupNotificationOrderByRelevanceInput = {
    fields: MeetupNotificationOrderByRelevanceFieldEnum | MeetupNotificationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MeetupNotificationCountOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetupNotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetupNotificationMinOrderByAggregateInput = {
    id?: SortOrder
    text?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetupNullableScalarRelationFilter = {
    is?: MeetupWhereInput | null
    isNot?: MeetupWhereInput | null
  }

  export type CertificateModelOrderByRelevanceInput = {
    fields: CertificateModelOrderByRelevanceFieldEnum | CertificateModelOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CertificateModelCountOrderByAggregateInput = {
    id?: SortOrder
    imageLink?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type CertificateModelMaxOrderByAggregateInput = {
    id?: SortOrder
    imageLink?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type CertificateModelMinOrderByAggregateInput = {
    id?: SortOrder
    imageLink?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetupInviteSheetOrderByRelevanceInput = {
    fields: MeetupInviteSheetOrderByRelevanceFieldEnum | MeetupInviteSheetOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MeetupInviteSheetCountOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
  }

  export type MeetupInviteSheetMaxOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
  }

  export type MeetupInviteSheetMinOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type MeetupRoleOrderByRelevanceInput = {
    fields: MeetupRoleOrderByRelevanceFieldEnum | MeetupRoleOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MeetupRoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupRoleAvgOrderByAggregateInput = {
    subscriptionPrice?: SortOrder
  }

  export type MeetupRoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupRoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    subscriptionPrice?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupRoleSumOrderByAggregateInput = {
    subscriptionPrice?: SortOrder
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type MeetupAdminOrderByRelevanceInput = {
    fields: MeetupAdminOrderByRelevanceFieldEnum | MeetupAdminOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MeetupAdminMeetupIdPersonIdCompoundUniqueInput = {
    meetupId: string
    personId: string
  }

  export type MeetupAdminCountOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupAdminMaxOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupAdminMinOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupFollowerOrderByRelevanceInput = {
    fields: MeetupFollowerOrderByRelevanceFieldEnum | MeetupFollowerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MeetupFollowerMeetupIdPersonIdCompoundUniqueInput = {
    meetupId: string
    personId: string
  }

  export type MeetupFollowerCountOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetupFollowerMaxOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
  }

  export type MeetupFollowerMinOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    createdAt?: SortOrder
  }

  export type CategoryOrderByRelevanceInput = {
    fields: CategoryOrderByRelevanceFieldEnum | CategoryOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type MeetupRoleScalarRelationFilter = {
    is?: MeetupRoleWhereInput
    isNot?: MeetupRoleWhereInput
  }

  export type SubscriptionPaymentListRelationFilter = {
    every?: SubscriptionPaymentWhereInput
    some?: SubscriptionPaymentWhereInput
    none?: SubscriptionPaymentWhereInput
  }

  export type SubscriptionPaymentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubscriptionOrderByRelevanceInput = {
    fields: SubscriptionOrderByRelevanceFieldEnum | SubscriptionOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SubscriptionPersonIdMeetupIdCompoundUniqueInput = {
    personId: string
    meetupId: string
  }

  export type SubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    meetupRoleId?: SortOrder
    certificateLink?: SortOrder
    presenceConfirmation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    meetupRoleId?: SortOrder
    certificateLink?: SortOrder
    presenceConfirmation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    meetupRoleId?: SortOrder
    certificateLink?: SortOrder
    presenceConfirmation?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type InviteOrderByRelevanceInput = {
    fields: InviteOrderByRelevanceFieldEnum | InviteOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type InvitePersonIdMeetupIdCompoundUniqueInput = {
    personId: string
    meetupId: string
  }

  export type InviteCountOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InviteMaxOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type InviteMinOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentOrderByRelevanceInput = {
    fields: PaymentOrderByRelevanceFieldEnum | PaymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PaymentCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PaymentMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionScalarRelationFilter = {
    is?: SubscriptionWhereInput
    isNot?: SubscriptionWhereInput
  }

  export type PaymentScalarRelationFilter = {
    is?: PaymentWhereInput
    isNot?: PaymentWhereInput
  }

  export type SubscriptionPaymentOrderByRelevanceInput = {
    fields: SubscriptionPaymentOrderByRelevanceFieldEnum | SubscriptionPaymentOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SubscriptionPaymentCountOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentId?: SortOrder
    price?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPaymentAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type SubscriptionPaymentMaxOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentId?: SortOrder
    price?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPaymentMinOrderByAggregateInput = {
    id?: SortOrder
    subscriptionId?: SortOrder
    paymentId?: SortOrder
    price?: SortOrder
    paymentStatus?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SubscriptionPaymentSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type CertificateOrderByRelevanceInput = {
    fields: CertificateOrderByRelevanceFieldEnum | CertificateOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type CertificatePersonIdMeetupIdCompoundUniqueInput = {
    personId: string
    meetupId: string
  }

  export type CertificateCountOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    securityCode?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CertificateMaxOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    securityCode?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CertificateMinOrderByAggregateInput = {
    id?: SortOrder
    personId?: SortOrder
    meetupId?: SortOrder
    link?: SortOrder
    securityCode?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupMediaOrderByRelevanceInput = {
    fields: MeetupMediaOrderByRelevanceFieldEnum | MeetupMediaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type MeetupMediaCountOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    link?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupMediaMaxOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    link?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type MeetupMediaMinOrderByAggregateInput = {
    id?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    link?: SortOrder
    datetime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type GuestLoadOrderByRelevanceInput = {
    fields: GuestLoadOrderByRelevanceFieldEnum | GuestLoadOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type GuestLoadCountOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    datetime?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuestLoadAvgOrderByAggregateInput = {
    count?: SortOrder
  }

  export type GuestLoadMaxOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    datetime?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuestLoadMinOrderByAggregateInput = {
    id?: SortOrder
    link?: SortOrder
    meetupId?: SortOrder
    personId?: SortOrder
    datetime?: SortOrder
    count?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type GuestLoadSumOrderByAggregateInput = {
    count?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type PersonCreateNestedOneWithoutUserInput = {
    create?: XOR<PersonCreateWithoutUserInput, PersonUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonCreateOrConnectWithoutUserInput
    connect?: PersonWhereUniqueInput
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type PersonUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<PersonCreateWithoutUserInput, PersonUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonCreateOrConnectWithoutUserInput
    connect?: PersonWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type PersonUpdateOneWithoutUserNestedInput = {
    create?: XOR<PersonCreateWithoutUserInput, PersonUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonCreateOrConnectWithoutUserInput
    upsert?: PersonUpsertWithoutUserInput
    disconnect?: PersonWhereInput | boolean
    delete?: PersonWhereInput | boolean
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutUserInput, PersonUpdateWithoutUserInput>, PersonUncheckedUpdateWithoutUserInput>
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type PersonUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<PersonCreateWithoutUserInput, PersonUncheckedCreateWithoutUserInput>
    connectOrCreate?: PersonCreateOrConnectWithoutUserInput
    upsert?: PersonUpsertWithoutUserInput
    disconnect?: PersonWhereInput | boolean
    delete?: PersonWhereInput | boolean
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutUserInput, PersonUpdateWithoutUserInput>, PersonUncheckedUpdateWithoutUserInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type MeetupAdminCreateNestedManyWithoutPersonInput = {
    create?: XOR<MeetupAdminCreateWithoutPersonInput, MeetupAdminUncheckedCreateWithoutPersonInput> | MeetupAdminCreateWithoutPersonInput[] | MeetupAdminUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupAdminCreateOrConnectWithoutPersonInput | MeetupAdminCreateOrConnectWithoutPersonInput[]
    createMany?: MeetupAdminCreateManyPersonInputEnvelope
    connect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutPersonInput = {
    create?: XOR<SubscriptionCreateWithoutPersonInput, SubscriptionUncheckedCreateWithoutPersonInput> | SubscriptionCreateWithoutPersonInput[] | SubscriptionUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPersonInput | SubscriptionCreateOrConnectWithoutPersonInput[]
    createMany?: SubscriptionCreateManyPersonInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type InviteCreateNestedManyWithoutPersonInput = {
    create?: XOR<InviteCreateWithoutPersonInput, InviteUncheckedCreateWithoutPersonInput> | InviteCreateWithoutPersonInput[] | InviteUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutPersonInput | InviteCreateOrConnectWithoutPersonInput[]
    createMany?: InviteCreateManyPersonInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type CertificateCreateNestedManyWithoutPersonInput = {
    create?: XOR<CertificateCreateWithoutPersonInput, CertificateUncheckedCreateWithoutPersonInput> | CertificateCreateWithoutPersonInput[] | CertificateUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutPersonInput | CertificateCreateOrConnectWithoutPersonInput[]
    createMany?: CertificateCreateManyPersonInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type MeetupMediaCreateNestedManyWithoutPersonInput = {
    create?: XOR<MeetupMediaCreateWithoutPersonInput, MeetupMediaUncheckedCreateWithoutPersonInput> | MeetupMediaCreateWithoutPersonInput[] | MeetupMediaUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupMediaCreateOrConnectWithoutPersonInput | MeetupMediaCreateOrConnectWithoutPersonInput[]
    createMany?: MeetupMediaCreateManyPersonInputEnvelope
    connect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
  }

  export type GuestLoadCreateNestedManyWithoutPersonInput = {
    create?: XOR<GuestLoadCreateWithoutPersonInput, GuestLoadUncheckedCreateWithoutPersonInput> | GuestLoadCreateWithoutPersonInput[] | GuestLoadUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: GuestLoadCreateOrConnectWithoutPersonInput | GuestLoadCreateOrConnectWithoutPersonInput[]
    createMany?: GuestLoadCreateManyPersonInputEnvelope
    connect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutPersonInput = {
    create?: XOR<UserCreateWithoutPersonInput, UserUncheckedCreateWithoutPersonInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonInput
    connect?: UserWhereUniqueInput
  }

  export type MeetupCreateNestedManyWithoutCreatorInput = {
    create?: XOR<MeetupCreateWithoutCreatorInput, MeetupUncheckedCreateWithoutCreatorInput> | MeetupCreateWithoutCreatorInput[] | MeetupUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutCreatorInput | MeetupCreateOrConnectWithoutCreatorInput[]
    createMany?: MeetupCreateManyCreatorInputEnvelope
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
  }

  export type MeetupFollowerCreateNestedManyWithoutPersonInput = {
    create?: XOR<MeetupFollowerCreateWithoutPersonInput, MeetupFollowerUncheckedCreateWithoutPersonInput> | MeetupFollowerCreateWithoutPersonInput[] | MeetupFollowerUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupFollowerCreateOrConnectWithoutPersonInput | MeetupFollowerCreateOrConnectWithoutPersonInput[]
    createMany?: MeetupFollowerCreateManyPersonInputEnvelope
    connect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
  }

  export type MeetupNotificationCreateNestedManyWithoutPersonInput = {
    create?: XOR<MeetupNotificationCreateWithoutPersonInput, MeetupNotificationUncheckedCreateWithoutPersonInput> | MeetupNotificationCreateWithoutPersonInput[] | MeetupNotificationUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupNotificationCreateOrConnectWithoutPersonInput | MeetupNotificationCreateOrConnectWithoutPersonInput[]
    createMany?: MeetupNotificationCreateManyPersonInputEnvelope
    connect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
  }

  export type MeetupAdminUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<MeetupAdminCreateWithoutPersonInput, MeetupAdminUncheckedCreateWithoutPersonInput> | MeetupAdminCreateWithoutPersonInput[] | MeetupAdminUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupAdminCreateOrConnectWithoutPersonInput | MeetupAdminCreateOrConnectWithoutPersonInput[]
    createMany?: MeetupAdminCreateManyPersonInputEnvelope
    connect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<SubscriptionCreateWithoutPersonInput, SubscriptionUncheckedCreateWithoutPersonInput> | SubscriptionCreateWithoutPersonInput[] | SubscriptionUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPersonInput | SubscriptionCreateOrConnectWithoutPersonInput[]
    createMany?: SubscriptionCreateManyPersonInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type InviteUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<InviteCreateWithoutPersonInput, InviteUncheckedCreateWithoutPersonInput> | InviteCreateWithoutPersonInput[] | InviteUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutPersonInput | InviteCreateOrConnectWithoutPersonInput[]
    createMany?: InviteCreateManyPersonInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type CertificateUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<CertificateCreateWithoutPersonInput, CertificateUncheckedCreateWithoutPersonInput> | CertificateCreateWithoutPersonInput[] | CertificateUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutPersonInput | CertificateCreateOrConnectWithoutPersonInput[]
    createMany?: CertificateCreateManyPersonInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type MeetupMediaUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<MeetupMediaCreateWithoutPersonInput, MeetupMediaUncheckedCreateWithoutPersonInput> | MeetupMediaCreateWithoutPersonInput[] | MeetupMediaUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupMediaCreateOrConnectWithoutPersonInput | MeetupMediaCreateOrConnectWithoutPersonInput[]
    createMany?: MeetupMediaCreateManyPersonInputEnvelope
    connect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
  }

  export type GuestLoadUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<GuestLoadCreateWithoutPersonInput, GuestLoadUncheckedCreateWithoutPersonInput> | GuestLoadCreateWithoutPersonInput[] | GuestLoadUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: GuestLoadCreateOrConnectWithoutPersonInput | GuestLoadCreateOrConnectWithoutPersonInput[]
    createMany?: GuestLoadCreateManyPersonInputEnvelope
    connect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
  }

  export type MeetupUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<MeetupCreateWithoutCreatorInput, MeetupUncheckedCreateWithoutCreatorInput> | MeetupCreateWithoutCreatorInput[] | MeetupUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutCreatorInput | MeetupCreateOrConnectWithoutCreatorInput[]
    createMany?: MeetupCreateManyCreatorInputEnvelope
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
  }

  export type MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<MeetupFollowerCreateWithoutPersonInput, MeetupFollowerUncheckedCreateWithoutPersonInput> | MeetupFollowerCreateWithoutPersonInput[] | MeetupFollowerUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupFollowerCreateOrConnectWithoutPersonInput | MeetupFollowerCreateOrConnectWithoutPersonInput[]
    createMany?: MeetupFollowerCreateManyPersonInputEnvelope
    connect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
  }

  export type MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput = {
    create?: XOR<MeetupNotificationCreateWithoutPersonInput, MeetupNotificationUncheckedCreateWithoutPersonInput> | MeetupNotificationCreateWithoutPersonInput[] | MeetupNotificationUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupNotificationCreateOrConnectWithoutPersonInput | MeetupNotificationCreateOrConnectWithoutPersonInput[]
    createMany?: MeetupNotificationCreateManyPersonInputEnvelope
    connect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
  }

  export type MeetupAdminUpdateManyWithoutPersonNestedInput = {
    create?: XOR<MeetupAdminCreateWithoutPersonInput, MeetupAdminUncheckedCreateWithoutPersonInput> | MeetupAdminCreateWithoutPersonInput[] | MeetupAdminUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupAdminCreateOrConnectWithoutPersonInput | MeetupAdminCreateOrConnectWithoutPersonInput[]
    upsert?: MeetupAdminUpsertWithWhereUniqueWithoutPersonInput | MeetupAdminUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: MeetupAdminCreateManyPersonInputEnvelope
    set?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    disconnect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    delete?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    connect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    update?: MeetupAdminUpdateWithWhereUniqueWithoutPersonInput | MeetupAdminUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: MeetupAdminUpdateManyWithWhereWithoutPersonInput | MeetupAdminUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: MeetupAdminScalarWhereInput | MeetupAdminScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutPersonNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPersonInput, SubscriptionUncheckedCreateWithoutPersonInput> | SubscriptionCreateWithoutPersonInput[] | SubscriptionUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPersonInput | SubscriptionCreateOrConnectWithoutPersonInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutPersonInput | SubscriptionUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: SubscriptionCreateManyPersonInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutPersonInput | SubscriptionUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutPersonInput | SubscriptionUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type InviteUpdateManyWithoutPersonNestedInput = {
    create?: XOR<InviteCreateWithoutPersonInput, InviteUncheckedCreateWithoutPersonInput> | InviteCreateWithoutPersonInput[] | InviteUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutPersonInput | InviteCreateOrConnectWithoutPersonInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutPersonInput | InviteUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: InviteCreateManyPersonInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutPersonInput | InviteUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutPersonInput | InviteUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type CertificateUpdateManyWithoutPersonNestedInput = {
    create?: XOR<CertificateCreateWithoutPersonInput, CertificateUncheckedCreateWithoutPersonInput> | CertificateCreateWithoutPersonInput[] | CertificateUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutPersonInput | CertificateCreateOrConnectWithoutPersonInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutPersonInput | CertificateUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: CertificateCreateManyPersonInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutPersonInput | CertificateUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutPersonInput | CertificateUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type MeetupMediaUpdateManyWithoutPersonNestedInput = {
    create?: XOR<MeetupMediaCreateWithoutPersonInput, MeetupMediaUncheckedCreateWithoutPersonInput> | MeetupMediaCreateWithoutPersonInput[] | MeetupMediaUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupMediaCreateOrConnectWithoutPersonInput | MeetupMediaCreateOrConnectWithoutPersonInput[]
    upsert?: MeetupMediaUpsertWithWhereUniqueWithoutPersonInput | MeetupMediaUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: MeetupMediaCreateManyPersonInputEnvelope
    set?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    disconnect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    delete?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    connect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    update?: MeetupMediaUpdateWithWhereUniqueWithoutPersonInput | MeetupMediaUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: MeetupMediaUpdateManyWithWhereWithoutPersonInput | MeetupMediaUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: MeetupMediaScalarWhereInput | MeetupMediaScalarWhereInput[]
  }

  export type GuestLoadUpdateManyWithoutPersonNestedInput = {
    create?: XOR<GuestLoadCreateWithoutPersonInput, GuestLoadUncheckedCreateWithoutPersonInput> | GuestLoadCreateWithoutPersonInput[] | GuestLoadUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: GuestLoadCreateOrConnectWithoutPersonInput | GuestLoadCreateOrConnectWithoutPersonInput[]
    upsert?: GuestLoadUpsertWithWhereUniqueWithoutPersonInput | GuestLoadUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: GuestLoadCreateManyPersonInputEnvelope
    set?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    disconnect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    delete?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    connect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    update?: GuestLoadUpdateWithWhereUniqueWithoutPersonInput | GuestLoadUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: GuestLoadUpdateManyWithWhereWithoutPersonInput | GuestLoadUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: GuestLoadScalarWhereInput | GuestLoadScalarWhereInput[]
  }

  export type UserUpdateOneWithoutPersonNestedInput = {
    create?: XOR<UserCreateWithoutPersonInput, UserUncheckedCreateWithoutPersonInput>
    connectOrCreate?: UserCreateOrConnectWithoutPersonInput
    upsert?: UserUpsertWithoutPersonInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPersonInput, UserUpdateWithoutPersonInput>, UserUncheckedUpdateWithoutPersonInput>
  }

  export type MeetupUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<MeetupCreateWithoutCreatorInput, MeetupUncheckedCreateWithoutCreatorInput> | MeetupCreateWithoutCreatorInput[] | MeetupUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutCreatorInput | MeetupCreateOrConnectWithoutCreatorInput[]
    upsert?: MeetupUpsertWithWhereUniqueWithoutCreatorInput | MeetupUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: MeetupCreateManyCreatorInputEnvelope
    set?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    disconnect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    delete?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    update?: MeetupUpdateWithWhereUniqueWithoutCreatorInput | MeetupUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: MeetupUpdateManyWithWhereWithoutCreatorInput | MeetupUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: MeetupScalarWhereInput | MeetupScalarWhereInput[]
  }

  export type MeetupFollowerUpdateManyWithoutPersonNestedInput = {
    create?: XOR<MeetupFollowerCreateWithoutPersonInput, MeetupFollowerUncheckedCreateWithoutPersonInput> | MeetupFollowerCreateWithoutPersonInput[] | MeetupFollowerUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupFollowerCreateOrConnectWithoutPersonInput | MeetupFollowerCreateOrConnectWithoutPersonInput[]
    upsert?: MeetupFollowerUpsertWithWhereUniqueWithoutPersonInput | MeetupFollowerUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: MeetupFollowerCreateManyPersonInputEnvelope
    set?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    disconnect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    delete?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    connect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    update?: MeetupFollowerUpdateWithWhereUniqueWithoutPersonInput | MeetupFollowerUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: MeetupFollowerUpdateManyWithWhereWithoutPersonInput | MeetupFollowerUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: MeetupFollowerScalarWhereInput | MeetupFollowerScalarWhereInput[]
  }

  export type MeetupNotificationUpdateManyWithoutPersonNestedInput = {
    create?: XOR<MeetupNotificationCreateWithoutPersonInput, MeetupNotificationUncheckedCreateWithoutPersonInput> | MeetupNotificationCreateWithoutPersonInput[] | MeetupNotificationUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupNotificationCreateOrConnectWithoutPersonInput | MeetupNotificationCreateOrConnectWithoutPersonInput[]
    upsert?: MeetupNotificationUpsertWithWhereUniqueWithoutPersonInput | MeetupNotificationUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: MeetupNotificationCreateManyPersonInputEnvelope
    set?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    disconnect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    delete?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    connect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    update?: MeetupNotificationUpdateWithWhereUniqueWithoutPersonInput | MeetupNotificationUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: MeetupNotificationUpdateManyWithWhereWithoutPersonInput | MeetupNotificationUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: MeetupNotificationScalarWhereInput | MeetupNotificationScalarWhereInput[]
  }

  export type MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<MeetupAdminCreateWithoutPersonInput, MeetupAdminUncheckedCreateWithoutPersonInput> | MeetupAdminCreateWithoutPersonInput[] | MeetupAdminUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupAdminCreateOrConnectWithoutPersonInput | MeetupAdminCreateOrConnectWithoutPersonInput[]
    upsert?: MeetupAdminUpsertWithWhereUniqueWithoutPersonInput | MeetupAdminUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: MeetupAdminCreateManyPersonInputEnvelope
    set?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    disconnect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    delete?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    connect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    update?: MeetupAdminUpdateWithWhereUniqueWithoutPersonInput | MeetupAdminUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: MeetupAdminUpdateManyWithWhereWithoutPersonInput | MeetupAdminUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: MeetupAdminScalarWhereInput | MeetupAdminScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<SubscriptionCreateWithoutPersonInput, SubscriptionUncheckedCreateWithoutPersonInput> | SubscriptionCreateWithoutPersonInput[] | SubscriptionUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutPersonInput | SubscriptionCreateOrConnectWithoutPersonInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutPersonInput | SubscriptionUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: SubscriptionCreateManyPersonInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutPersonInput | SubscriptionUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutPersonInput | SubscriptionUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type InviteUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<InviteCreateWithoutPersonInput, InviteUncheckedCreateWithoutPersonInput> | InviteCreateWithoutPersonInput[] | InviteUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutPersonInput | InviteCreateOrConnectWithoutPersonInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutPersonInput | InviteUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: InviteCreateManyPersonInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutPersonInput | InviteUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutPersonInput | InviteUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type CertificateUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<CertificateCreateWithoutPersonInput, CertificateUncheckedCreateWithoutPersonInput> | CertificateCreateWithoutPersonInput[] | CertificateUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutPersonInput | CertificateCreateOrConnectWithoutPersonInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutPersonInput | CertificateUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: CertificateCreateManyPersonInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutPersonInput | CertificateUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutPersonInput | CertificateUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<MeetupMediaCreateWithoutPersonInput, MeetupMediaUncheckedCreateWithoutPersonInput> | MeetupMediaCreateWithoutPersonInput[] | MeetupMediaUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupMediaCreateOrConnectWithoutPersonInput | MeetupMediaCreateOrConnectWithoutPersonInput[]
    upsert?: MeetupMediaUpsertWithWhereUniqueWithoutPersonInput | MeetupMediaUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: MeetupMediaCreateManyPersonInputEnvelope
    set?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    disconnect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    delete?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    connect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    update?: MeetupMediaUpdateWithWhereUniqueWithoutPersonInput | MeetupMediaUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: MeetupMediaUpdateManyWithWhereWithoutPersonInput | MeetupMediaUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: MeetupMediaScalarWhereInput | MeetupMediaScalarWhereInput[]
  }

  export type GuestLoadUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<GuestLoadCreateWithoutPersonInput, GuestLoadUncheckedCreateWithoutPersonInput> | GuestLoadCreateWithoutPersonInput[] | GuestLoadUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: GuestLoadCreateOrConnectWithoutPersonInput | GuestLoadCreateOrConnectWithoutPersonInput[]
    upsert?: GuestLoadUpsertWithWhereUniqueWithoutPersonInput | GuestLoadUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: GuestLoadCreateManyPersonInputEnvelope
    set?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    disconnect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    delete?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    connect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    update?: GuestLoadUpdateWithWhereUniqueWithoutPersonInput | GuestLoadUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: GuestLoadUpdateManyWithWhereWithoutPersonInput | GuestLoadUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: GuestLoadScalarWhereInput | GuestLoadScalarWhereInput[]
  }

  export type MeetupUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<MeetupCreateWithoutCreatorInput, MeetupUncheckedCreateWithoutCreatorInput> | MeetupCreateWithoutCreatorInput[] | MeetupUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutCreatorInput | MeetupCreateOrConnectWithoutCreatorInput[]
    upsert?: MeetupUpsertWithWhereUniqueWithoutCreatorInput | MeetupUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: MeetupCreateManyCreatorInputEnvelope
    set?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    disconnect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    delete?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    update?: MeetupUpdateWithWhereUniqueWithoutCreatorInput | MeetupUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: MeetupUpdateManyWithWhereWithoutCreatorInput | MeetupUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: MeetupScalarWhereInput | MeetupScalarWhereInput[]
  }

  export type MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<MeetupFollowerCreateWithoutPersonInput, MeetupFollowerUncheckedCreateWithoutPersonInput> | MeetupFollowerCreateWithoutPersonInput[] | MeetupFollowerUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupFollowerCreateOrConnectWithoutPersonInput | MeetupFollowerCreateOrConnectWithoutPersonInput[]
    upsert?: MeetupFollowerUpsertWithWhereUniqueWithoutPersonInput | MeetupFollowerUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: MeetupFollowerCreateManyPersonInputEnvelope
    set?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    disconnect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    delete?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    connect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    update?: MeetupFollowerUpdateWithWhereUniqueWithoutPersonInput | MeetupFollowerUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: MeetupFollowerUpdateManyWithWhereWithoutPersonInput | MeetupFollowerUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: MeetupFollowerScalarWhereInput | MeetupFollowerScalarWhereInput[]
  }

  export type MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput = {
    create?: XOR<MeetupNotificationCreateWithoutPersonInput, MeetupNotificationUncheckedCreateWithoutPersonInput> | MeetupNotificationCreateWithoutPersonInput[] | MeetupNotificationUncheckedCreateWithoutPersonInput[]
    connectOrCreate?: MeetupNotificationCreateOrConnectWithoutPersonInput | MeetupNotificationCreateOrConnectWithoutPersonInput[]
    upsert?: MeetupNotificationUpsertWithWhereUniqueWithoutPersonInput | MeetupNotificationUpsertWithWhereUniqueWithoutPersonInput[]
    createMany?: MeetupNotificationCreateManyPersonInputEnvelope
    set?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    disconnect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    delete?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    connect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    update?: MeetupNotificationUpdateWithWhereUniqueWithoutPersonInput | MeetupNotificationUpdateWithWhereUniqueWithoutPersonInput[]
    updateMany?: MeetupNotificationUpdateManyWithWhereWithoutPersonInput | MeetupNotificationUpdateManyWithWhereWithoutPersonInput[]
    deleteMany?: MeetupNotificationScalarWhereInput | MeetupNotificationScalarWhereInput[]
  }

  export type MeetupCreateNestedManyWithoutAddressInput = {
    create?: XOR<MeetupCreateWithoutAddressInput, MeetupUncheckedCreateWithoutAddressInput> | MeetupCreateWithoutAddressInput[] | MeetupUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutAddressInput | MeetupCreateOrConnectWithoutAddressInput[]
    createMany?: MeetupCreateManyAddressInputEnvelope
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
  }

  export type MeetupUncheckedCreateNestedManyWithoutAddressInput = {
    create?: XOR<MeetupCreateWithoutAddressInput, MeetupUncheckedCreateWithoutAddressInput> | MeetupCreateWithoutAddressInput[] | MeetupUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutAddressInput | MeetupCreateOrConnectWithoutAddressInput[]
    createMany?: MeetupCreateManyAddressInputEnvelope
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
  }

  export type MeetupUpdateManyWithoutAddressNestedInput = {
    create?: XOR<MeetupCreateWithoutAddressInput, MeetupUncheckedCreateWithoutAddressInput> | MeetupCreateWithoutAddressInput[] | MeetupUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutAddressInput | MeetupCreateOrConnectWithoutAddressInput[]
    upsert?: MeetupUpsertWithWhereUniqueWithoutAddressInput | MeetupUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: MeetupCreateManyAddressInputEnvelope
    set?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    disconnect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    delete?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    update?: MeetupUpdateWithWhereUniqueWithoutAddressInput | MeetupUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: MeetupUpdateManyWithWhereWithoutAddressInput | MeetupUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: MeetupScalarWhereInput | MeetupScalarWhereInput[]
  }

  export type MeetupUncheckedUpdateManyWithoutAddressNestedInput = {
    create?: XOR<MeetupCreateWithoutAddressInput, MeetupUncheckedCreateWithoutAddressInput> | MeetupCreateWithoutAddressInput[] | MeetupUncheckedCreateWithoutAddressInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutAddressInput | MeetupCreateOrConnectWithoutAddressInput[]
    upsert?: MeetupUpsertWithWhereUniqueWithoutAddressInput | MeetupUpsertWithWhereUniqueWithoutAddressInput[]
    createMany?: MeetupCreateManyAddressInputEnvelope
    set?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    disconnect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    delete?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    update?: MeetupUpdateWithWhereUniqueWithoutAddressInput | MeetupUpdateWithWhereUniqueWithoutAddressInput[]
    updateMany?: MeetupUpdateManyWithWhereWithoutAddressInput | MeetupUpdateManyWithWhereWithoutAddressInput[]
    deleteMany?: MeetupScalarWhereInput | MeetupScalarWhereInput[]
  }

  export type AddressCreateNestedOneWithoutMeetupsInput = {
    create?: XOR<AddressCreateWithoutMeetupsInput, AddressUncheckedCreateWithoutMeetupsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutMeetupsInput
    connect?: AddressWhereUniqueInput
  }

  export type MeetupAdminCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupAdminCreateWithoutMeetupInput, MeetupAdminUncheckedCreateWithoutMeetupInput> | MeetupAdminCreateWithoutMeetupInput[] | MeetupAdminUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupAdminCreateOrConnectWithoutMeetupInput | MeetupAdminCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupAdminCreateManyMeetupInputEnvelope
    connect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
  }

  export type SubscriptionCreateNestedManyWithoutMeetupInput = {
    create?: XOR<SubscriptionCreateWithoutMeetupInput, SubscriptionUncheckedCreateWithoutMeetupInput> | SubscriptionCreateWithoutMeetupInput[] | SubscriptionUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutMeetupInput | SubscriptionCreateOrConnectWithoutMeetupInput[]
    createMany?: SubscriptionCreateManyMeetupInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type InviteCreateNestedManyWithoutMeetupInput = {
    create?: XOR<InviteCreateWithoutMeetupInput, InviteUncheckedCreateWithoutMeetupInput> | InviteCreateWithoutMeetupInput[] | InviteUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutMeetupInput | InviteCreateOrConnectWithoutMeetupInput[]
    createMany?: InviteCreateManyMeetupInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type CertificateCreateNestedManyWithoutMeetupInput = {
    create?: XOR<CertificateCreateWithoutMeetupInput, CertificateUncheckedCreateWithoutMeetupInput> | CertificateCreateWithoutMeetupInput[] | CertificateUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutMeetupInput | CertificateCreateOrConnectWithoutMeetupInput[]
    createMany?: CertificateCreateManyMeetupInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type MeetupMediaCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupMediaCreateWithoutMeetupInput, MeetupMediaUncheckedCreateWithoutMeetupInput> | MeetupMediaCreateWithoutMeetupInput[] | MeetupMediaUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupMediaCreateOrConnectWithoutMeetupInput | MeetupMediaCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupMediaCreateManyMeetupInputEnvelope
    connect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
  }

  export type GuestLoadCreateNestedManyWithoutMeetupInput = {
    create?: XOR<GuestLoadCreateWithoutMeetupInput, GuestLoadUncheckedCreateWithoutMeetupInput> | GuestLoadCreateWithoutMeetupInput[] | GuestLoadUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: GuestLoadCreateOrConnectWithoutMeetupInput | GuestLoadCreateOrConnectWithoutMeetupInput[]
    createMany?: GuestLoadCreateManyMeetupInputEnvelope
    connect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutMeetupsInput = {
    create?: XOR<CategoryCreateWithoutMeetupsInput, CategoryUncheckedCreateWithoutMeetupsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMeetupsInput
    connect?: CategoryWhereUniqueInput
  }

  export type PersonCreateNestedOneWithoutCreated_meetupsInput = {
    create?: XOR<PersonCreateWithoutCreated_meetupsInput, PersonUncheckedCreateWithoutCreated_meetupsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutCreated_meetupsInput
    connect?: PersonWhereUniqueInput
  }

  export type MeetupFollowerCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupFollowerCreateWithoutMeetupInput, MeetupFollowerUncheckedCreateWithoutMeetupInput> | MeetupFollowerCreateWithoutMeetupInput[] | MeetupFollowerUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupFollowerCreateOrConnectWithoutMeetupInput | MeetupFollowerCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupFollowerCreateManyMeetupInputEnvelope
    connect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
  }

  export type MeetupInviteSheetCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupInviteSheetCreateWithoutMeetupInput, MeetupInviteSheetUncheckedCreateWithoutMeetupInput> | MeetupInviteSheetCreateWithoutMeetupInput[] | MeetupInviteSheetUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupInviteSheetCreateOrConnectWithoutMeetupInput | MeetupInviteSheetCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupInviteSheetCreateManyMeetupInputEnvelope
    connect?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
  }

  export type CertificateModelCreateNestedOneWithoutMeetupInput = {
    create?: XOR<CertificateModelCreateWithoutMeetupInput, CertificateModelUncheckedCreateWithoutMeetupInput>
    connectOrCreate?: CertificateModelCreateOrConnectWithoutMeetupInput
    connect?: CertificateModelWhereUniqueInput
  }

  export type MeetupNotificationCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupNotificationCreateWithoutMeetupInput, MeetupNotificationUncheckedCreateWithoutMeetupInput> | MeetupNotificationCreateWithoutMeetupInput[] | MeetupNotificationUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupNotificationCreateOrConnectWithoutMeetupInput | MeetupNotificationCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupNotificationCreateManyMeetupInputEnvelope
    connect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
  }

  export type MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupAdminCreateWithoutMeetupInput, MeetupAdminUncheckedCreateWithoutMeetupInput> | MeetupAdminCreateWithoutMeetupInput[] | MeetupAdminUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupAdminCreateOrConnectWithoutMeetupInput | MeetupAdminCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupAdminCreateManyMeetupInputEnvelope
    connect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<SubscriptionCreateWithoutMeetupInput, SubscriptionUncheckedCreateWithoutMeetupInput> | SubscriptionCreateWithoutMeetupInput[] | SubscriptionUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutMeetupInput | SubscriptionCreateOrConnectWithoutMeetupInput[]
    createMany?: SubscriptionCreateManyMeetupInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type InviteUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<InviteCreateWithoutMeetupInput, InviteUncheckedCreateWithoutMeetupInput> | InviteCreateWithoutMeetupInput[] | InviteUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutMeetupInput | InviteCreateOrConnectWithoutMeetupInput[]
    createMany?: InviteCreateManyMeetupInputEnvelope
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
  }

  export type CertificateUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<CertificateCreateWithoutMeetupInput, CertificateUncheckedCreateWithoutMeetupInput> | CertificateCreateWithoutMeetupInput[] | CertificateUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutMeetupInput | CertificateCreateOrConnectWithoutMeetupInput[]
    createMany?: CertificateCreateManyMeetupInputEnvelope
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
  }

  export type MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupMediaCreateWithoutMeetupInput, MeetupMediaUncheckedCreateWithoutMeetupInput> | MeetupMediaCreateWithoutMeetupInput[] | MeetupMediaUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupMediaCreateOrConnectWithoutMeetupInput | MeetupMediaCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupMediaCreateManyMeetupInputEnvelope
    connect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
  }

  export type GuestLoadUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<GuestLoadCreateWithoutMeetupInput, GuestLoadUncheckedCreateWithoutMeetupInput> | GuestLoadCreateWithoutMeetupInput[] | GuestLoadUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: GuestLoadCreateOrConnectWithoutMeetupInput | GuestLoadCreateOrConnectWithoutMeetupInput[]
    createMany?: GuestLoadCreateManyMeetupInputEnvelope
    connect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
  }

  export type MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupFollowerCreateWithoutMeetupInput, MeetupFollowerUncheckedCreateWithoutMeetupInput> | MeetupFollowerCreateWithoutMeetupInput[] | MeetupFollowerUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupFollowerCreateOrConnectWithoutMeetupInput | MeetupFollowerCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupFollowerCreateManyMeetupInputEnvelope
    connect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
  }

  export type MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupInviteSheetCreateWithoutMeetupInput, MeetupInviteSheetUncheckedCreateWithoutMeetupInput> | MeetupInviteSheetCreateWithoutMeetupInput[] | MeetupInviteSheetUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupInviteSheetCreateOrConnectWithoutMeetupInput | MeetupInviteSheetCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupInviteSheetCreateManyMeetupInputEnvelope
    connect?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
  }

  export type MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput = {
    create?: XOR<MeetupNotificationCreateWithoutMeetupInput, MeetupNotificationUncheckedCreateWithoutMeetupInput> | MeetupNotificationCreateWithoutMeetupInput[] | MeetupNotificationUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupNotificationCreateOrConnectWithoutMeetupInput | MeetupNotificationCreateOrConnectWithoutMeetupInput[]
    createMany?: MeetupNotificationCreateManyMeetupInputEnvelope
    connect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumMeetupStatusFieldUpdateOperationsInput = {
    set?: $Enums.MeetupStatus
  }

  export type AddressUpdateOneWithoutMeetupsNestedInput = {
    create?: XOR<AddressCreateWithoutMeetupsInput, AddressUncheckedCreateWithoutMeetupsInput>
    connectOrCreate?: AddressCreateOrConnectWithoutMeetupsInput
    upsert?: AddressUpsertWithoutMeetupsInput
    disconnect?: AddressWhereInput | boolean
    delete?: AddressWhereInput | boolean
    connect?: AddressWhereUniqueInput
    update?: XOR<XOR<AddressUpdateToOneWithWhereWithoutMeetupsInput, AddressUpdateWithoutMeetupsInput>, AddressUncheckedUpdateWithoutMeetupsInput>
  }

  export type MeetupAdminUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupAdminCreateWithoutMeetupInput, MeetupAdminUncheckedCreateWithoutMeetupInput> | MeetupAdminCreateWithoutMeetupInput[] | MeetupAdminUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupAdminCreateOrConnectWithoutMeetupInput | MeetupAdminCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupAdminUpsertWithWhereUniqueWithoutMeetupInput | MeetupAdminUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupAdminCreateManyMeetupInputEnvelope
    set?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    disconnect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    delete?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    connect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    update?: MeetupAdminUpdateWithWhereUniqueWithoutMeetupInput | MeetupAdminUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupAdminUpdateManyWithWhereWithoutMeetupInput | MeetupAdminUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupAdminScalarWhereInput | MeetupAdminScalarWhereInput[]
  }

  export type SubscriptionUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<SubscriptionCreateWithoutMeetupInput, SubscriptionUncheckedCreateWithoutMeetupInput> | SubscriptionCreateWithoutMeetupInput[] | SubscriptionUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutMeetupInput | SubscriptionCreateOrConnectWithoutMeetupInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutMeetupInput | SubscriptionUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: SubscriptionCreateManyMeetupInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutMeetupInput | SubscriptionUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutMeetupInput | SubscriptionUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type InviteUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<InviteCreateWithoutMeetupInput, InviteUncheckedCreateWithoutMeetupInput> | InviteCreateWithoutMeetupInput[] | InviteUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutMeetupInput | InviteCreateOrConnectWithoutMeetupInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutMeetupInput | InviteUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: InviteCreateManyMeetupInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutMeetupInput | InviteUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutMeetupInput | InviteUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type CertificateUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<CertificateCreateWithoutMeetupInput, CertificateUncheckedCreateWithoutMeetupInput> | CertificateCreateWithoutMeetupInput[] | CertificateUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutMeetupInput | CertificateCreateOrConnectWithoutMeetupInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutMeetupInput | CertificateUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: CertificateCreateManyMeetupInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutMeetupInput | CertificateUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutMeetupInput | CertificateUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type MeetupMediaUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupMediaCreateWithoutMeetupInput, MeetupMediaUncheckedCreateWithoutMeetupInput> | MeetupMediaCreateWithoutMeetupInput[] | MeetupMediaUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupMediaCreateOrConnectWithoutMeetupInput | MeetupMediaCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupMediaUpsertWithWhereUniqueWithoutMeetupInput | MeetupMediaUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupMediaCreateManyMeetupInputEnvelope
    set?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    disconnect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    delete?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    connect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    update?: MeetupMediaUpdateWithWhereUniqueWithoutMeetupInput | MeetupMediaUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupMediaUpdateManyWithWhereWithoutMeetupInput | MeetupMediaUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupMediaScalarWhereInput | MeetupMediaScalarWhereInput[]
  }

  export type GuestLoadUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<GuestLoadCreateWithoutMeetupInput, GuestLoadUncheckedCreateWithoutMeetupInput> | GuestLoadCreateWithoutMeetupInput[] | GuestLoadUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: GuestLoadCreateOrConnectWithoutMeetupInput | GuestLoadCreateOrConnectWithoutMeetupInput[]
    upsert?: GuestLoadUpsertWithWhereUniqueWithoutMeetupInput | GuestLoadUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: GuestLoadCreateManyMeetupInputEnvelope
    set?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    disconnect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    delete?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    connect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    update?: GuestLoadUpdateWithWhereUniqueWithoutMeetupInput | GuestLoadUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: GuestLoadUpdateManyWithWhereWithoutMeetupInput | GuestLoadUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: GuestLoadScalarWhereInput | GuestLoadScalarWhereInput[]
  }

  export type CategoryUpdateOneRequiredWithoutMeetupsNestedInput = {
    create?: XOR<CategoryCreateWithoutMeetupsInput, CategoryUncheckedCreateWithoutMeetupsInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutMeetupsInput
    upsert?: CategoryUpsertWithoutMeetupsInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutMeetupsInput, CategoryUpdateWithoutMeetupsInput>, CategoryUncheckedUpdateWithoutMeetupsInput>
  }

  export type PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput = {
    create?: XOR<PersonCreateWithoutCreated_meetupsInput, PersonUncheckedCreateWithoutCreated_meetupsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutCreated_meetupsInput
    upsert?: PersonUpsertWithoutCreated_meetupsInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutCreated_meetupsInput, PersonUpdateWithoutCreated_meetupsInput>, PersonUncheckedUpdateWithoutCreated_meetupsInput>
  }

  export type MeetupFollowerUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupFollowerCreateWithoutMeetupInput, MeetupFollowerUncheckedCreateWithoutMeetupInput> | MeetupFollowerCreateWithoutMeetupInput[] | MeetupFollowerUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupFollowerCreateOrConnectWithoutMeetupInput | MeetupFollowerCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupFollowerUpsertWithWhereUniqueWithoutMeetupInput | MeetupFollowerUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupFollowerCreateManyMeetupInputEnvelope
    set?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    disconnect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    delete?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    connect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    update?: MeetupFollowerUpdateWithWhereUniqueWithoutMeetupInput | MeetupFollowerUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupFollowerUpdateManyWithWhereWithoutMeetupInput | MeetupFollowerUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupFollowerScalarWhereInput | MeetupFollowerScalarWhereInput[]
  }

  export type MeetupInviteSheetUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupInviteSheetCreateWithoutMeetupInput, MeetupInviteSheetUncheckedCreateWithoutMeetupInput> | MeetupInviteSheetCreateWithoutMeetupInput[] | MeetupInviteSheetUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupInviteSheetCreateOrConnectWithoutMeetupInput | MeetupInviteSheetCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupInviteSheetUpsertWithWhereUniqueWithoutMeetupInput | MeetupInviteSheetUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupInviteSheetCreateManyMeetupInputEnvelope
    set?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
    disconnect?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
    delete?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
    connect?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
    update?: MeetupInviteSheetUpdateWithWhereUniqueWithoutMeetupInput | MeetupInviteSheetUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupInviteSheetUpdateManyWithWhereWithoutMeetupInput | MeetupInviteSheetUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupInviteSheetScalarWhereInput | MeetupInviteSheetScalarWhereInput[]
  }

  export type CertificateModelUpdateOneWithoutMeetupNestedInput = {
    create?: XOR<CertificateModelCreateWithoutMeetupInput, CertificateModelUncheckedCreateWithoutMeetupInput>
    connectOrCreate?: CertificateModelCreateOrConnectWithoutMeetupInput
    upsert?: CertificateModelUpsertWithoutMeetupInput
    disconnect?: CertificateModelWhereInput | boolean
    delete?: CertificateModelWhereInput | boolean
    connect?: CertificateModelWhereUniqueInput
    update?: XOR<XOR<CertificateModelUpdateToOneWithWhereWithoutMeetupInput, CertificateModelUpdateWithoutMeetupInput>, CertificateModelUncheckedUpdateWithoutMeetupInput>
  }

  export type MeetupNotificationUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupNotificationCreateWithoutMeetupInput, MeetupNotificationUncheckedCreateWithoutMeetupInput> | MeetupNotificationCreateWithoutMeetupInput[] | MeetupNotificationUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupNotificationCreateOrConnectWithoutMeetupInput | MeetupNotificationCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupNotificationUpsertWithWhereUniqueWithoutMeetupInput | MeetupNotificationUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupNotificationCreateManyMeetupInputEnvelope
    set?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    disconnect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    delete?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    connect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    update?: MeetupNotificationUpdateWithWhereUniqueWithoutMeetupInput | MeetupNotificationUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupNotificationUpdateManyWithWhereWithoutMeetupInput | MeetupNotificationUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupNotificationScalarWhereInput | MeetupNotificationScalarWhereInput[]
  }

  export type MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupAdminCreateWithoutMeetupInput, MeetupAdminUncheckedCreateWithoutMeetupInput> | MeetupAdminCreateWithoutMeetupInput[] | MeetupAdminUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupAdminCreateOrConnectWithoutMeetupInput | MeetupAdminCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupAdminUpsertWithWhereUniqueWithoutMeetupInput | MeetupAdminUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupAdminCreateManyMeetupInputEnvelope
    set?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    disconnect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    delete?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    connect?: MeetupAdminWhereUniqueInput | MeetupAdminWhereUniqueInput[]
    update?: MeetupAdminUpdateWithWhereUniqueWithoutMeetupInput | MeetupAdminUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupAdminUpdateManyWithWhereWithoutMeetupInput | MeetupAdminUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupAdminScalarWhereInput | MeetupAdminScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<SubscriptionCreateWithoutMeetupInput, SubscriptionUncheckedCreateWithoutMeetupInput> | SubscriptionCreateWithoutMeetupInput[] | SubscriptionUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutMeetupInput | SubscriptionCreateOrConnectWithoutMeetupInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutMeetupInput | SubscriptionUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: SubscriptionCreateManyMeetupInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutMeetupInput | SubscriptionUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutMeetupInput | SubscriptionUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type InviteUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<InviteCreateWithoutMeetupInput, InviteUncheckedCreateWithoutMeetupInput> | InviteCreateWithoutMeetupInput[] | InviteUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: InviteCreateOrConnectWithoutMeetupInput | InviteCreateOrConnectWithoutMeetupInput[]
    upsert?: InviteUpsertWithWhereUniqueWithoutMeetupInput | InviteUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: InviteCreateManyMeetupInputEnvelope
    set?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    disconnect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    delete?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    connect?: InviteWhereUniqueInput | InviteWhereUniqueInput[]
    update?: InviteUpdateWithWhereUniqueWithoutMeetupInput | InviteUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: InviteUpdateManyWithWhereWithoutMeetupInput | InviteUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: InviteScalarWhereInput | InviteScalarWhereInput[]
  }

  export type CertificateUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<CertificateCreateWithoutMeetupInput, CertificateUncheckedCreateWithoutMeetupInput> | CertificateCreateWithoutMeetupInput[] | CertificateUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: CertificateCreateOrConnectWithoutMeetupInput | CertificateCreateOrConnectWithoutMeetupInput[]
    upsert?: CertificateUpsertWithWhereUniqueWithoutMeetupInput | CertificateUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: CertificateCreateManyMeetupInputEnvelope
    set?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    disconnect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    delete?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    connect?: CertificateWhereUniqueInput | CertificateWhereUniqueInput[]
    update?: CertificateUpdateWithWhereUniqueWithoutMeetupInput | CertificateUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: CertificateUpdateManyWithWhereWithoutMeetupInput | CertificateUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
  }

  export type MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupMediaCreateWithoutMeetupInput, MeetupMediaUncheckedCreateWithoutMeetupInput> | MeetupMediaCreateWithoutMeetupInput[] | MeetupMediaUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupMediaCreateOrConnectWithoutMeetupInput | MeetupMediaCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupMediaUpsertWithWhereUniqueWithoutMeetupInput | MeetupMediaUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupMediaCreateManyMeetupInputEnvelope
    set?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    disconnect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    delete?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    connect?: MeetupMediaWhereUniqueInput | MeetupMediaWhereUniqueInput[]
    update?: MeetupMediaUpdateWithWhereUniqueWithoutMeetupInput | MeetupMediaUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupMediaUpdateManyWithWhereWithoutMeetupInput | MeetupMediaUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupMediaScalarWhereInput | MeetupMediaScalarWhereInput[]
  }

  export type GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<GuestLoadCreateWithoutMeetupInput, GuestLoadUncheckedCreateWithoutMeetupInput> | GuestLoadCreateWithoutMeetupInput[] | GuestLoadUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: GuestLoadCreateOrConnectWithoutMeetupInput | GuestLoadCreateOrConnectWithoutMeetupInput[]
    upsert?: GuestLoadUpsertWithWhereUniqueWithoutMeetupInput | GuestLoadUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: GuestLoadCreateManyMeetupInputEnvelope
    set?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    disconnect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    delete?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    connect?: GuestLoadWhereUniqueInput | GuestLoadWhereUniqueInput[]
    update?: GuestLoadUpdateWithWhereUniqueWithoutMeetupInput | GuestLoadUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: GuestLoadUpdateManyWithWhereWithoutMeetupInput | GuestLoadUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: GuestLoadScalarWhereInput | GuestLoadScalarWhereInput[]
  }

  export type MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupFollowerCreateWithoutMeetupInput, MeetupFollowerUncheckedCreateWithoutMeetupInput> | MeetupFollowerCreateWithoutMeetupInput[] | MeetupFollowerUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupFollowerCreateOrConnectWithoutMeetupInput | MeetupFollowerCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupFollowerUpsertWithWhereUniqueWithoutMeetupInput | MeetupFollowerUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupFollowerCreateManyMeetupInputEnvelope
    set?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    disconnect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    delete?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    connect?: MeetupFollowerWhereUniqueInput | MeetupFollowerWhereUniqueInput[]
    update?: MeetupFollowerUpdateWithWhereUniqueWithoutMeetupInput | MeetupFollowerUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupFollowerUpdateManyWithWhereWithoutMeetupInput | MeetupFollowerUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupFollowerScalarWhereInput | MeetupFollowerScalarWhereInput[]
  }

  export type MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupInviteSheetCreateWithoutMeetupInput, MeetupInviteSheetUncheckedCreateWithoutMeetupInput> | MeetupInviteSheetCreateWithoutMeetupInput[] | MeetupInviteSheetUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupInviteSheetCreateOrConnectWithoutMeetupInput | MeetupInviteSheetCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupInviteSheetUpsertWithWhereUniqueWithoutMeetupInput | MeetupInviteSheetUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupInviteSheetCreateManyMeetupInputEnvelope
    set?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
    disconnect?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
    delete?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
    connect?: MeetupInviteSheetWhereUniqueInput | MeetupInviteSheetWhereUniqueInput[]
    update?: MeetupInviteSheetUpdateWithWhereUniqueWithoutMeetupInput | MeetupInviteSheetUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupInviteSheetUpdateManyWithWhereWithoutMeetupInput | MeetupInviteSheetUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupInviteSheetScalarWhereInput | MeetupInviteSheetScalarWhereInput[]
  }

  export type MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput = {
    create?: XOR<MeetupNotificationCreateWithoutMeetupInput, MeetupNotificationUncheckedCreateWithoutMeetupInput> | MeetupNotificationCreateWithoutMeetupInput[] | MeetupNotificationUncheckedCreateWithoutMeetupInput[]
    connectOrCreate?: MeetupNotificationCreateOrConnectWithoutMeetupInput | MeetupNotificationCreateOrConnectWithoutMeetupInput[]
    upsert?: MeetupNotificationUpsertWithWhereUniqueWithoutMeetupInput | MeetupNotificationUpsertWithWhereUniqueWithoutMeetupInput[]
    createMany?: MeetupNotificationCreateManyMeetupInputEnvelope
    set?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    disconnect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    delete?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    connect?: MeetupNotificationWhereUniqueInput | MeetupNotificationWhereUniqueInput[]
    update?: MeetupNotificationUpdateWithWhereUniqueWithoutMeetupInput | MeetupNotificationUpdateWithWhereUniqueWithoutMeetupInput[]
    updateMany?: MeetupNotificationUpdateManyWithWhereWithoutMeetupInput | MeetupNotificationUpdateManyWithWhereWithoutMeetupInput[]
    deleteMany?: MeetupNotificationScalarWhereInput | MeetupNotificationScalarWhereInput[]
  }

  export type MeetupCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<MeetupCreateWithoutNotificationsInput, MeetupUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutNotificationsInput
    connect?: MeetupWhereUniqueInput
  }

  export type PersonCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<PersonCreateWithoutNotificationsInput, PersonUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutNotificationsInput
    connect?: PersonWhereUniqueInput
  }

  export type MeetupUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<MeetupCreateWithoutNotificationsInput, MeetupUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutNotificationsInput
    upsert?: MeetupUpsertWithoutNotificationsInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutNotificationsInput, MeetupUpdateWithoutNotificationsInput>, MeetupUncheckedUpdateWithoutNotificationsInput>
  }

  export type PersonUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<PersonCreateWithoutNotificationsInput, PersonUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutNotificationsInput
    upsert?: PersonUpsertWithoutNotificationsInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutNotificationsInput, PersonUpdateWithoutNotificationsInput>, PersonUncheckedUpdateWithoutNotificationsInput>
  }

  export type MeetupCreateNestedOneWithoutCertificateModelInput = {
    create?: XOR<MeetupCreateWithoutCertificateModelInput, MeetupUncheckedCreateWithoutCertificateModelInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutCertificateModelInput
    connect?: MeetupWhereUniqueInput
  }

  export type MeetupUncheckedCreateNestedOneWithoutCertificateModelInput = {
    create?: XOR<MeetupCreateWithoutCertificateModelInput, MeetupUncheckedCreateWithoutCertificateModelInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutCertificateModelInput
    connect?: MeetupWhereUniqueInput
  }

  export type MeetupUpdateOneWithoutCertificateModelNestedInput = {
    create?: XOR<MeetupCreateWithoutCertificateModelInput, MeetupUncheckedCreateWithoutCertificateModelInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutCertificateModelInput
    upsert?: MeetupUpsertWithoutCertificateModelInput
    disconnect?: MeetupWhereInput | boolean
    delete?: MeetupWhereInput | boolean
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutCertificateModelInput, MeetupUpdateWithoutCertificateModelInput>, MeetupUncheckedUpdateWithoutCertificateModelInput>
  }

  export type MeetupUncheckedUpdateOneWithoutCertificateModelNestedInput = {
    create?: XOR<MeetupCreateWithoutCertificateModelInput, MeetupUncheckedCreateWithoutCertificateModelInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutCertificateModelInput
    upsert?: MeetupUpsertWithoutCertificateModelInput
    disconnect?: MeetupWhereInput | boolean
    delete?: MeetupWhereInput | boolean
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutCertificateModelInput, MeetupUpdateWithoutCertificateModelInput>, MeetupUncheckedUpdateWithoutCertificateModelInput>
  }

  export type MeetupCreateNestedOneWithoutInviteSheetsInput = {
    create?: XOR<MeetupCreateWithoutInviteSheetsInput, MeetupUncheckedCreateWithoutInviteSheetsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutInviteSheetsInput
    connect?: MeetupWhereUniqueInput
  }

  export type MeetupUpdateOneRequiredWithoutInviteSheetsNestedInput = {
    create?: XOR<MeetupCreateWithoutInviteSheetsInput, MeetupUncheckedCreateWithoutInviteSheetsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutInviteSheetsInput
    upsert?: MeetupUpsertWithoutInviteSheetsInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutInviteSheetsInput, MeetupUpdateWithoutInviteSheetsInput>, MeetupUncheckedUpdateWithoutInviteSheetsInput>
  }

  export type SubscriptionCreateNestedManyWithoutMeetupRoleInput = {
    create?: XOR<SubscriptionCreateWithoutMeetupRoleInput, SubscriptionUncheckedCreateWithoutMeetupRoleInput> | SubscriptionCreateWithoutMeetupRoleInput[] | SubscriptionUncheckedCreateWithoutMeetupRoleInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutMeetupRoleInput | SubscriptionCreateOrConnectWithoutMeetupRoleInput[]
    createMany?: SubscriptionCreateManyMeetupRoleInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type SubscriptionUncheckedCreateNestedManyWithoutMeetupRoleInput = {
    create?: XOR<SubscriptionCreateWithoutMeetupRoleInput, SubscriptionUncheckedCreateWithoutMeetupRoleInput> | SubscriptionCreateWithoutMeetupRoleInput[] | SubscriptionUncheckedCreateWithoutMeetupRoleInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutMeetupRoleInput | SubscriptionCreateOrConnectWithoutMeetupRoleInput[]
    createMany?: SubscriptionCreateManyMeetupRoleInputEnvelope
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type SubscriptionUpdateManyWithoutMeetupRoleNestedInput = {
    create?: XOR<SubscriptionCreateWithoutMeetupRoleInput, SubscriptionUncheckedCreateWithoutMeetupRoleInput> | SubscriptionCreateWithoutMeetupRoleInput[] | SubscriptionUncheckedCreateWithoutMeetupRoleInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutMeetupRoleInput | SubscriptionCreateOrConnectWithoutMeetupRoleInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutMeetupRoleInput | SubscriptionUpsertWithWhereUniqueWithoutMeetupRoleInput[]
    createMany?: SubscriptionCreateManyMeetupRoleInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutMeetupRoleInput | SubscriptionUpdateWithWhereUniqueWithoutMeetupRoleInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutMeetupRoleInput | SubscriptionUpdateManyWithWhereWithoutMeetupRoleInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type SubscriptionUncheckedUpdateManyWithoutMeetupRoleNestedInput = {
    create?: XOR<SubscriptionCreateWithoutMeetupRoleInput, SubscriptionUncheckedCreateWithoutMeetupRoleInput> | SubscriptionCreateWithoutMeetupRoleInput[] | SubscriptionUncheckedCreateWithoutMeetupRoleInput[]
    connectOrCreate?: SubscriptionCreateOrConnectWithoutMeetupRoleInput | SubscriptionCreateOrConnectWithoutMeetupRoleInput[]
    upsert?: SubscriptionUpsertWithWhereUniqueWithoutMeetupRoleInput | SubscriptionUpsertWithWhereUniqueWithoutMeetupRoleInput[]
    createMany?: SubscriptionCreateManyMeetupRoleInputEnvelope
    set?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    disconnect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    delete?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    connect?: SubscriptionWhereUniqueInput | SubscriptionWhereUniqueInput[]
    update?: SubscriptionUpdateWithWhereUniqueWithoutMeetupRoleInput | SubscriptionUpdateWithWhereUniqueWithoutMeetupRoleInput[]
    updateMany?: SubscriptionUpdateManyWithWhereWithoutMeetupRoleInput | SubscriptionUpdateManyWithWhereWithoutMeetupRoleInput[]
    deleteMany?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
  }

  export type MeetupCreateNestedOneWithoutMeetupAdminsInput = {
    create?: XOR<MeetupCreateWithoutMeetupAdminsInput, MeetupUncheckedCreateWithoutMeetupAdminsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutMeetupAdminsInput
    connect?: MeetupWhereUniqueInput
  }

  export type PersonCreateNestedOneWithoutMeetupAdminsInput = {
    create?: XOR<PersonCreateWithoutMeetupAdminsInput, PersonUncheckedCreateWithoutMeetupAdminsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutMeetupAdminsInput
    connect?: PersonWhereUniqueInput
  }

  export type MeetupUpdateOneRequiredWithoutMeetupAdminsNestedInput = {
    create?: XOR<MeetupCreateWithoutMeetupAdminsInput, MeetupUncheckedCreateWithoutMeetupAdminsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutMeetupAdminsInput
    upsert?: MeetupUpsertWithoutMeetupAdminsInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutMeetupAdminsInput, MeetupUpdateWithoutMeetupAdminsInput>, MeetupUncheckedUpdateWithoutMeetupAdminsInput>
  }

  export type PersonUpdateOneRequiredWithoutMeetupAdminsNestedInput = {
    create?: XOR<PersonCreateWithoutMeetupAdminsInput, PersonUncheckedCreateWithoutMeetupAdminsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutMeetupAdminsInput
    upsert?: PersonUpsertWithoutMeetupAdminsInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutMeetupAdminsInput, PersonUpdateWithoutMeetupAdminsInput>, PersonUncheckedUpdateWithoutMeetupAdminsInput>
  }

  export type MeetupCreateNestedOneWithoutFollowersInput = {
    create?: XOR<MeetupCreateWithoutFollowersInput, MeetupUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutFollowersInput
    connect?: MeetupWhereUniqueInput
  }

  export type PersonCreateNestedOneWithoutFollowingMeetupsInput = {
    create?: XOR<PersonCreateWithoutFollowingMeetupsInput, PersonUncheckedCreateWithoutFollowingMeetupsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutFollowingMeetupsInput
    connect?: PersonWhereUniqueInput
  }

  export type MeetupUpdateOneRequiredWithoutFollowersNestedInput = {
    create?: XOR<MeetupCreateWithoutFollowersInput, MeetupUncheckedCreateWithoutFollowersInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutFollowersInput
    upsert?: MeetupUpsertWithoutFollowersInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutFollowersInput, MeetupUpdateWithoutFollowersInput>, MeetupUncheckedUpdateWithoutFollowersInput>
  }

  export type PersonUpdateOneRequiredWithoutFollowingMeetupsNestedInput = {
    create?: XOR<PersonCreateWithoutFollowingMeetupsInput, PersonUncheckedCreateWithoutFollowingMeetupsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutFollowingMeetupsInput
    upsert?: PersonUpsertWithoutFollowingMeetupsInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutFollowingMeetupsInput, PersonUpdateWithoutFollowingMeetupsInput>, PersonUncheckedUpdateWithoutFollowingMeetupsInput>
  }

  export type MeetupCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MeetupCreateWithoutCategoryInput, MeetupUncheckedCreateWithoutCategoryInput> | MeetupCreateWithoutCategoryInput[] | MeetupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutCategoryInput | MeetupCreateOrConnectWithoutCategoryInput[]
    createMany?: MeetupCreateManyCategoryInputEnvelope
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
  }

  export type MeetupUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<MeetupCreateWithoutCategoryInput, MeetupUncheckedCreateWithoutCategoryInput> | MeetupCreateWithoutCategoryInput[] | MeetupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutCategoryInput | MeetupCreateOrConnectWithoutCategoryInput[]
    createMany?: MeetupCreateManyCategoryInputEnvelope
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
  }

  export type MeetupUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MeetupCreateWithoutCategoryInput, MeetupUncheckedCreateWithoutCategoryInput> | MeetupCreateWithoutCategoryInput[] | MeetupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutCategoryInput | MeetupCreateOrConnectWithoutCategoryInput[]
    upsert?: MeetupUpsertWithWhereUniqueWithoutCategoryInput | MeetupUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MeetupCreateManyCategoryInputEnvelope
    set?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    disconnect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    delete?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    update?: MeetupUpdateWithWhereUniqueWithoutCategoryInput | MeetupUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MeetupUpdateManyWithWhereWithoutCategoryInput | MeetupUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MeetupScalarWhereInput | MeetupScalarWhereInput[]
  }

  export type MeetupUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<MeetupCreateWithoutCategoryInput, MeetupUncheckedCreateWithoutCategoryInput> | MeetupCreateWithoutCategoryInput[] | MeetupUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: MeetupCreateOrConnectWithoutCategoryInput | MeetupCreateOrConnectWithoutCategoryInput[]
    upsert?: MeetupUpsertWithWhereUniqueWithoutCategoryInput | MeetupUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: MeetupCreateManyCategoryInputEnvelope
    set?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    disconnect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    delete?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    connect?: MeetupWhereUniqueInput | MeetupWhereUniqueInput[]
    update?: MeetupUpdateWithWhereUniqueWithoutCategoryInput | MeetupUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: MeetupUpdateManyWithWhereWithoutCategoryInput | MeetupUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: MeetupScalarWhereInput | MeetupScalarWhereInput[]
  }

  export type PersonCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<PersonCreateWithoutSubscriptionsInput, PersonUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutSubscriptionsInput
    connect?: PersonWhereUniqueInput
  }

  export type MeetupCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<MeetupCreateWithoutSubscriptionsInput, MeetupUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutSubscriptionsInput
    connect?: MeetupWhereUniqueInput
  }

  export type MeetupRoleCreateNestedOneWithoutSubscriptionsInput = {
    create?: XOR<MeetupRoleCreateWithoutSubscriptionsInput, MeetupRoleUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: MeetupRoleCreateOrConnectWithoutSubscriptionsInput
    connect?: MeetupRoleWhereUniqueInput
  }

  export type SubscriptionPaymentCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<SubscriptionPaymentCreateWithoutSubscriptionInput, SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput> | SubscriptionPaymentCreateWithoutSubscriptionInput[] | SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput | SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput[]
    createMany?: SubscriptionPaymentCreateManySubscriptionInputEnvelope
    connect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
  }

  export type SubscriptionPaymentUncheckedCreateNestedManyWithoutSubscriptionInput = {
    create?: XOR<SubscriptionPaymentCreateWithoutSubscriptionInput, SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput> | SubscriptionPaymentCreateWithoutSubscriptionInput[] | SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput | SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput[]
    createMany?: SubscriptionPaymentCreateManySubscriptionInputEnvelope
    connect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type PersonUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<PersonCreateWithoutSubscriptionsInput, PersonUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutSubscriptionsInput
    upsert?: PersonUpsertWithoutSubscriptionsInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutSubscriptionsInput, PersonUpdateWithoutSubscriptionsInput>, PersonUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type MeetupUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<MeetupCreateWithoutSubscriptionsInput, MeetupUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutSubscriptionsInput
    upsert?: MeetupUpsertWithoutSubscriptionsInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutSubscriptionsInput, MeetupUpdateWithoutSubscriptionsInput>, MeetupUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type MeetupRoleUpdateOneRequiredWithoutSubscriptionsNestedInput = {
    create?: XOR<MeetupRoleCreateWithoutSubscriptionsInput, MeetupRoleUncheckedCreateWithoutSubscriptionsInput>
    connectOrCreate?: MeetupRoleCreateOrConnectWithoutSubscriptionsInput
    upsert?: MeetupRoleUpsertWithoutSubscriptionsInput
    connect?: MeetupRoleWhereUniqueInput
    update?: XOR<XOR<MeetupRoleUpdateToOneWithWhereWithoutSubscriptionsInput, MeetupRoleUpdateWithoutSubscriptionsInput>, MeetupRoleUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type SubscriptionPaymentUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<SubscriptionPaymentCreateWithoutSubscriptionInput, SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput> | SubscriptionPaymentCreateWithoutSubscriptionInput[] | SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput | SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput[]
    upsert?: SubscriptionPaymentUpsertWithWhereUniqueWithoutSubscriptionInput | SubscriptionPaymentUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: SubscriptionPaymentCreateManySubscriptionInputEnvelope
    set?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    disconnect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    delete?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    connect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    update?: SubscriptionPaymentUpdateWithWhereUniqueWithoutSubscriptionInput | SubscriptionPaymentUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: SubscriptionPaymentUpdateManyWithWhereWithoutSubscriptionInput | SubscriptionPaymentUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: SubscriptionPaymentScalarWhereInput | SubscriptionPaymentScalarWhereInput[]
  }

  export type SubscriptionPaymentUncheckedUpdateManyWithoutSubscriptionNestedInput = {
    create?: XOR<SubscriptionPaymentCreateWithoutSubscriptionInput, SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput> | SubscriptionPaymentCreateWithoutSubscriptionInput[] | SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput[]
    connectOrCreate?: SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput | SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput[]
    upsert?: SubscriptionPaymentUpsertWithWhereUniqueWithoutSubscriptionInput | SubscriptionPaymentUpsertWithWhereUniqueWithoutSubscriptionInput[]
    createMany?: SubscriptionPaymentCreateManySubscriptionInputEnvelope
    set?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    disconnect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    delete?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    connect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    update?: SubscriptionPaymentUpdateWithWhereUniqueWithoutSubscriptionInput | SubscriptionPaymentUpdateWithWhereUniqueWithoutSubscriptionInput[]
    updateMany?: SubscriptionPaymentUpdateManyWithWhereWithoutSubscriptionInput | SubscriptionPaymentUpdateManyWithWhereWithoutSubscriptionInput[]
    deleteMany?: SubscriptionPaymentScalarWhereInput | SubscriptionPaymentScalarWhereInput[]
  }

  export type PersonCreateNestedOneWithoutInvitesInput = {
    create?: XOR<PersonCreateWithoutInvitesInput, PersonUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutInvitesInput
    connect?: PersonWhereUniqueInput
  }

  export type MeetupCreateNestedOneWithoutInvitesInput = {
    create?: XOR<MeetupCreateWithoutInvitesInput, MeetupUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutInvitesInput
    connect?: MeetupWhereUniqueInput
  }

  export type PersonUpdateOneRequiredWithoutInvitesNestedInput = {
    create?: XOR<PersonCreateWithoutInvitesInput, PersonUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutInvitesInput
    upsert?: PersonUpsertWithoutInvitesInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutInvitesInput, PersonUpdateWithoutInvitesInput>, PersonUncheckedUpdateWithoutInvitesInput>
  }

  export type MeetupUpdateOneRequiredWithoutInvitesNestedInput = {
    create?: XOR<MeetupCreateWithoutInvitesInput, MeetupUncheckedCreateWithoutInvitesInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutInvitesInput
    upsert?: MeetupUpsertWithoutInvitesInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutInvitesInput, MeetupUpdateWithoutInvitesInput>, MeetupUncheckedUpdateWithoutInvitesInput>
  }

  export type SubscriptionPaymentCreateNestedManyWithoutPaymentInput = {
    create?: XOR<SubscriptionPaymentCreateWithoutPaymentInput, SubscriptionPaymentUncheckedCreateWithoutPaymentInput> | SubscriptionPaymentCreateWithoutPaymentInput[] | SubscriptionPaymentUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: SubscriptionPaymentCreateOrConnectWithoutPaymentInput | SubscriptionPaymentCreateOrConnectWithoutPaymentInput[]
    createMany?: SubscriptionPaymentCreateManyPaymentInputEnvelope
    connect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
  }

  export type SubscriptionPaymentUncheckedCreateNestedManyWithoutPaymentInput = {
    create?: XOR<SubscriptionPaymentCreateWithoutPaymentInput, SubscriptionPaymentUncheckedCreateWithoutPaymentInput> | SubscriptionPaymentCreateWithoutPaymentInput[] | SubscriptionPaymentUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: SubscriptionPaymentCreateOrConnectWithoutPaymentInput | SubscriptionPaymentCreateOrConnectWithoutPaymentInput[]
    createMany?: SubscriptionPaymentCreateManyPaymentInputEnvelope
    connect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
  }

  export type SubscriptionPaymentUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<SubscriptionPaymentCreateWithoutPaymentInput, SubscriptionPaymentUncheckedCreateWithoutPaymentInput> | SubscriptionPaymentCreateWithoutPaymentInput[] | SubscriptionPaymentUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: SubscriptionPaymentCreateOrConnectWithoutPaymentInput | SubscriptionPaymentCreateOrConnectWithoutPaymentInput[]
    upsert?: SubscriptionPaymentUpsertWithWhereUniqueWithoutPaymentInput | SubscriptionPaymentUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: SubscriptionPaymentCreateManyPaymentInputEnvelope
    set?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    disconnect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    delete?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    connect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    update?: SubscriptionPaymentUpdateWithWhereUniqueWithoutPaymentInput | SubscriptionPaymentUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: SubscriptionPaymentUpdateManyWithWhereWithoutPaymentInput | SubscriptionPaymentUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: SubscriptionPaymentScalarWhereInput | SubscriptionPaymentScalarWhereInput[]
  }

  export type SubscriptionPaymentUncheckedUpdateManyWithoutPaymentNestedInput = {
    create?: XOR<SubscriptionPaymentCreateWithoutPaymentInput, SubscriptionPaymentUncheckedCreateWithoutPaymentInput> | SubscriptionPaymentCreateWithoutPaymentInput[] | SubscriptionPaymentUncheckedCreateWithoutPaymentInput[]
    connectOrCreate?: SubscriptionPaymentCreateOrConnectWithoutPaymentInput | SubscriptionPaymentCreateOrConnectWithoutPaymentInput[]
    upsert?: SubscriptionPaymentUpsertWithWhereUniqueWithoutPaymentInput | SubscriptionPaymentUpsertWithWhereUniqueWithoutPaymentInput[]
    createMany?: SubscriptionPaymentCreateManyPaymentInputEnvelope
    set?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    disconnect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    delete?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    connect?: SubscriptionPaymentWhereUniqueInput | SubscriptionPaymentWhereUniqueInput[]
    update?: SubscriptionPaymentUpdateWithWhereUniqueWithoutPaymentInput | SubscriptionPaymentUpdateWithWhereUniqueWithoutPaymentInput[]
    updateMany?: SubscriptionPaymentUpdateManyWithWhereWithoutPaymentInput | SubscriptionPaymentUpdateManyWithWhereWithoutPaymentInput[]
    deleteMany?: SubscriptionPaymentScalarWhereInput | SubscriptionPaymentScalarWhereInput[]
  }

  export type SubscriptionCreateNestedOneWithoutSubscriptionPaymentsInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriptionPaymentsInput, SubscriptionUncheckedCreateWithoutSubscriptionPaymentsInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriptionPaymentsInput
    connect?: SubscriptionWhereUniqueInput
  }

  export type PaymentCreateNestedOneWithoutSubscriptionPaymentsInput = {
    create?: XOR<PaymentCreateWithoutSubscriptionPaymentsInput, PaymentUncheckedCreateWithoutSubscriptionPaymentsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutSubscriptionPaymentsInput
    connect?: PaymentWhereUniqueInput
  }

  export type SubscriptionUpdateOneRequiredWithoutSubscriptionPaymentsNestedInput = {
    create?: XOR<SubscriptionCreateWithoutSubscriptionPaymentsInput, SubscriptionUncheckedCreateWithoutSubscriptionPaymentsInput>
    connectOrCreate?: SubscriptionCreateOrConnectWithoutSubscriptionPaymentsInput
    upsert?: SubscriptionUpsertWithoutSubscriptionPaymentsInput
    connect?: SubscriptionWhereUniqueInput
    update?: XOR<XOR<SubscriptionUpdateToOneWithWhereWithoutSubscriptionPaymentsInput, SubscriptionUpdateWithoutSubscriptionPaymentsInput>, SubscriptionUncheckedUpdateWithoutSubscriptionPaymentsInput>
  }

  export type PaymentUpdateOneRequiredWithoutSubscriptionPaymentsNestedInput = {
    create?: XOR<PaymentCreateWithoutSubscriptionPaymentsInput, PaymentUncheckedCreateWithoutSubscriptionPaymentsInput>
    connectOrCreate?: PaymentCreateOrConnectWithoutSubscriptionPaymentsInput
    upsert?: PaymentUpsertWithoutSubscriptionPaymentsInput
    connect?: PaymentWhereUniqueInput
    update?: XOR<XOR<PaymentUpdateToOneWithWhereWithoutSubscriptionPaymentsInput, PaymentUpdateWithoutSubscriptionPaymentsInput>, PaymentUncheckedUpdateWithoutSubscriptionPaymentsInput>
  }

  export type PersonCreateNestedOneWithoutCertificatesInput = {
    create?: XOR<PersonCreateWithoutCertificatesInput, PersonUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutCertificatesInput
    connect?: PersonWhereUniqueInput
  }

  export type MeetupCreateNestedOneWithoutCertificatesInput = {
    create?: XOR<MeetupCreateWithoutCertificatesInput, MeetupUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutCertificatesInput
    connect?: MeetupWhereUniqueInput
  }

  export type PersonUpdateOneRequiredWithoutCertificatesNestedInput = {
    create?: XOR<PersonCreateWithoutCertificatesInput, PersonUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: PersonCreateOrConnectWithoutCertificatesInput
    upsert?: PersonUpsertWithoutCertificatesInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutCertificatesInput, PersonUpdateWithoutCertificatesInput>, PersonUncheckedUpdateWithoutCertificatesInput>
  }

  export type MeetupUpdateOneRequiredWithoutCertificatesNestedInput = {
    create?: XOR<MeetupCreateWithoutCertificatesInput, MeetupUncheckedCreateWithoutCertificatesInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutCertificatesInput
    upsert?: MeetupUpsertWithoutCertificatesInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutCertificatesInput, MeetupUpdateWithoutCertificatesInput>, MeetupUncheckedUpdateWithoutCertificatesInput>
  }

  export type MeetupCreateNestedOneWithoutMeetupMediasInput = {
    create?: XOR<MeetupCreateWithoutMeetupMediasInput, MeetupUncheckedCreateWithoutMeetupMediasInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutMeetupMediasInput
    connect?: MeetupWhereUniqueInput
  }

  export type PersonCreateNestedOneWithoutMeetupMediasInput = {
    create?: XOR<PersonCreateWithoutMeetupMediasInput, PersonUncheckedCreateWithoutMeetupMediasInput>
    connectOrCreate?: PersonCreateOrConnectWithoutMeetupMediasInput
    connect?: PersonWhereUniqueInput
  }

  export type MeetupUpdateOneRequiredWithoutMeetupMediasNestedInput = {
    create?: XOR<MeetupCreateWithoutMeetupMediasInput, MeetupUncheckedCreateWithoutMeetupMediasInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutMeetupMediasInput
    upsert?: MeetupUpsertWithoutMeetupMediasInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutMeetupMediasInput, MeetupUpdateWithoutMeetupMediasInput>, MeetupUncheckedUpdateWithoutMeetupMediasInput>
  }

  export type PersonUpdateOneRequiredWithoutMeetupMediasNestedInput = {
    create?: XOR<PersonCreateWithoutMeetupMediasInput, PersonUncheckedCreateWithoutMeetupMediasInput>
    connectOrCreate?: PersonCreateOrConnectWithoutMeetupMediasInput
    upsert?: PersonUpsertWithoutMeetupMediasInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutMeetupMediasInput, PersonUpdateWithoutMeetupMediasInput>, PersonUncheckedUpdateWithoutMeetupMediasInput>
  }

  export type MeetupCreateNestedOneWithoutGuestLoadsInput = {
    create?: XOR<MeetupCreateWithoutGuestLoadsInput, MeetupUncheckedCreateWithoutGuestLoadsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutGuestLoadsInput
    connect?: MeetupWhereUniqueInput
  }

  export type PersonCreateNestedOneWithoutGuestLoadsInput = {
    create?: XOR<PersonCreateWithoutGuestLoadsInput, PersonUncheckedCreateWithoutGuestLoadsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutGuestLoadsInput
    connect?: PersonWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type MeetupUpdateOneRequiredWithoutGuestLoadsNestedInput = {
    create?: XOR<MeetupCreateWithoutGuestLoadsInput, MeetupUncheckedCreateWithoutGuestLoadsInput>
    connectOrCreate?: MeetupCreateOrConnectWithoutGuestLoadsInput
    upsert?: MeetupUpsertWithoutGuestLoadsInput
    connect?: MeetupWhereUniqueInput
    update?: XOR<XOR<MeetupUpdateToOneWithWhereWithoutGuestLoadsInput, MeetupUpdateWithoutGuestLoadsInput>, MeetupUncheckedUpdateWithoutGuestLoadsInput>
  }

  export type PersonUpdateOneRequiredWithoutGuestLoadsNestedInput = {
    create?: XOR<PersonCreateWithoutGuestLoadsInput, PersonUncheckedCreateWithoutGuestLoadsInput>
    connectOrCreate?: PersonCreateOrConnectWithoutGuestLoadsInput
    upsert?: PersonUpsertWithoutGuestLoadsInput
    connect?: PersonWhereUniqueInput
    update?: XOR<XOR<PersonUpdateToOneWithWhereWithoutGuestLoadsInput, PersonUpdateWithoutGuestLoadsInput>, PersonUncheckedUpdateWithoutGuestLoadsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumMeetupStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.MeetupStatus | EnumMeetupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MeetupStatus[]
    notIn?: $Enums.MeetupStatus[]
    not?: NestedEnumMeetupStatusFilter<$PrismaModel> | $Enums.MeetupStatus
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumMeetupStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.MeetupStatus | EnumMeetupStatusFieldRefInput<$PrismaModel>
    in?: $Enums.MeetupStatus[]
    notIn?: $Enums.MeetupStatus[]
    not?: NestedEnumMeetupStatusWithAggregatesFilter<$PrismaModel> | $Enums.MeetupStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumMeetupStatusFilter<$PrismaModel>
    _max?: NestedEnumMeetupStatusFilter<$PrismaModel>
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[]
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[]
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type SessionCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PersonCreateWithoutUserInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutUserInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutUserInput, PersonUncheckedCreateWithoutUserInput>
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    expiresAt?: DateTimeFilter<"Session"> | Date | string
    token?: StringFilter<"Session"> | string
    createdAt?: DateTimeFilter<"Session"> | Date | string
    updatedAt?: DateTimeFilter<"Session"> | Date | string
    ipAddress?: StringNullableFilter<"Session"> | string | null
    userAgent?: StringNullableFilter<"Session"> | string | null
    userId?: StringFilter<"Session"> | string
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    accountId?: StringFilter<"Account"> | string
    providerId?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    accessToken?: StringNullableFilter<"Account"> | string | null
    refreshToken?: StringNullableFilter<"Account"> | string | null
    idToken?: StringNullableFilter<"Account"> | string | null
    accessTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    refreshTokenExpiresAt?: DateTimeNullableFilter<"Account"> | Date | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    password?: StringNullableFilter<"Account"> | string | null
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
  }

  export type PersonUpsertWithoutUserInput = {
    update: XOR<PersonUpdateWithoutUserInput, PersonUncheckedUpdateWithoutUserInput>
    create: XOR<PersonCreateWithoutUserInput, PersonUncheckedCreateWithoutUserInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutUserInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutUserInput, PersonUncheckedUpdateWithoutUserInput>
  }

  export type PersonUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountCreateNestedManyWithoutUserInput
    person?: PersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    person?: PersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUpdateManyWithoutUserNestedInput
    person?: PersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    person?: PersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type UserCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    person?: PersonCreateNestedOneWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    person?: PersonUncheckedCreateNestedOneWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    person?: PersonUpdateOneWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    person?: PersonUncheckedUpdateOneWithoutUserNestedInput
  }

  export type MeetupAdminCreateWithoutPersonInput = {
    id?: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutMeetupAdminsInput
  }

  export type MeetupAdminUncheckedCreateWithoutPersonInput = {
    id?: string
    meetupId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupAdminCreateOrConnectWithoutPersonInput = {
    where: MeetupAdminWhereUniqueInput
    create: XOR<MeetupAdminCreateWithoutPersonInput, MeetupAdminUncheckedCreateWithoutPersonInput>
  }

  export type MeetupAdminCreateManyPersonInputEnvelope = {
    data: MeetupAdminCreateManyPersonInput | MeetupAdminCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutPersonInput = {
    id?: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutSubscriptionsInput
    meetupRole: MeetupRoleCreateNestedOneWithoutSubscriptionsInput
    subscriptionPayments?: SubscriptionPaymentCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutPersonInput = {
    id?: string
    meetupId: string
    meetupRoleId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutPersonInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutPersonInput, SubscriptionUncheckedCreateWithoutPersonInput>
  }

  export type SubscriptionCreateManyPersonInputEnvelope = {
    data: SubscriptionCreateManyPersonInput | SubscriptionCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutPersonInput = {
    id?: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutInvitesInput
  }

  export type InviteUncheckedCreateWithoutPersonInput = {
    id?: string
    meetupId: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutPersonInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutPersonInput, InviteUncheckedCreateWithoutPersonInput>
  }

  export type InviteCreateManyPersonInputEnvelope = {
    data: InviteCreateManyPersonInput | InviteCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type CertificateCreateWithoutPersonInput = {
    id?: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutCertificatesInput
  }

  export type CertificateUncheckedCreateWithoutPersonInput = {
    id?: string
    meetupId: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CertificateCreateOrConnectWithoutPersonInput = {
    where: CertificateWhereUniqueInput
    create: XOR<CertificateCreateWithoutPersonInput, CertificateUncheckedCreateWithoutPersonInput>
  }

  export type CertificateCreateManyPersonInputEnvelope = {
    data: CertificateCreateManyPersonInput | CertificateCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type MeetupMediaCreateWithoutPersonInput = {
    id?: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutMeetupMediasInput
  }

  export type MeetupMediaUncheckedCreateWithoutPersonInput = {
    id?: string
    meetupId: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupMediaCreateOrConnectWithoutPersonInput = {
    where: MeetupMediaWhereUniqueInput
    create: XOR<MeetupMediaCreateWithoutPersonInput, MeetupMediaUncheckedCreateWithoutPersonInput>
  }

  export type MeetupMediaCreateManyPersonInputEnvelope = {
    data: MeetupMediaCreateManyPersonInput | MeetupMediaCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type GuestLoadCreateWithoutPersonInput = {
    id?: string
    link: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutGuestLoadsInput
  }

  export type GuestLoadUncheckedCreateWithoutPersonInput = {
    id?: string
    link: string
    meetupId: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestLoadCreateOrConnectWithoutPersonInput = {
    where: GuestLoadWhereUniqueInput
    create: XOR<GuestLoadCreateWithoutPersonInput, GuestLoadUncheckedCreateWithoutPersonInput>
  }

  export type GuestLoadCreateManyPersonInputEnvelope = {
    data: GuestLoadCreateManyPersonInput | GuestLoadCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutPersonInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionCreateNestedManyWithoutUserInput
    accounts?: AccountCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPersonInput = {
    id: string
    name: string
    email: string
    emailVerified?: boolean
    image?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPersonInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPersonInput, UserUncheckedCreateWithoutPersonInput>
  }

  export type MeetupCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutCreatorInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutCreatorInput, MeetupUncheckedCreateWithoutCreatorInput>
  }

  export type MeetupCreateManyCreatorInputEnvelope = {
    data: MeetupCreateManyCreatorInput | MeetupCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type MeetupFollowerCreateWithoutPersonInput = {
    id?: string
    createdAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutFollowersInput
  }

  export type MeetupFollowerUncheckedCreateWithoutPersonInput = {
    id?: string
    meetupId: string
    createdAt?: Date | string
  }

  export type MeetupFollowerCreateOrConnectWithoutPersonInput = {
    where: MeetupFollowerWhereUniqueInput
    create: XOR<MeetupFollowerCreateWithoutPersonInput, MeetupFollowerUncheckedCreateWithoutPersonInput>
  }

  export type MeetupFollowerCreateManyPersonInputEnvelope = {
    data: MeetupFollowerCreateManyPersonInput | MeetupFollowerCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type MeetupNotificationCreateWithoutPersonInput = {
    id?: string
    text: string
    createdAt?: Date | string
    meetup: MeetupCreateNestedOneWithoutNotificationsInput
  }

  export type MeetupNotificationUncheckedCreateWithoutPersonInput = {
    id?: string
    text: string
    meetupId: string
    createdAt?: Date | string
  }

  export type MeetupNotificationCreateOrConnectWithoutPersonInput = {
    where: MeetupNotificationWhereUniqueInput
    create: XOR<MeetupNotificationCreateWithoutPersonInput, MeetupNotificationUncheckedCreateWithoutPersonInput>
  }

  export type MeetupNotificationCreateManyPersonInputEnvelope = {
    data: MeetupNotificationCreateManyPersonInput | MeetupNotificationCreateManyPersonInput[]
    skipDuplicates?: boolean
  }

  export type MeetupAdminUpsertWithWhereUniqueWithoutPersonInput = {
    where: MeetupAdminWhereUniqueInput
    update: XOR<MeetupAdminUpdateWithoutPersonInput, MeetupAdminUncheckedUpdateWithoutPersonInput>
    create: XOR<MeetupAdminCreateWithoutPersonInput, MeetupAdminUncheckedCreateWithoutPersonInput>
  }

  export type MeetupAdminUpdateWithWhereUniqueWithoutPersonInput = {
    where: MeetupAdminWhereUniqueInput
    data: XOR<MeetupAdminUpdateWithoutPersonInput, MeetupAdminUncheckedUpdateWithoutPersonInput>
  }

  export type MeetupAdminUpdateManyWithWhereWithoutPersonInput = {
    where: MeetupAdminScalarWhereInput
    data: XOR<MeetupAdminUpdateManyMutationInput, MeetupAdminUncheckedUpdateManyWithoutPersonInput>
  }

  export type MeetupAdminScalarWhereInput = {
    AND?: MeetupAdminScalarWhereInput | MeetupAdminScalarWhereInput[]
    OR?: MeetupAdminScalarWhereInput[]
    NOT?: MeetupAdminScalarWhereInput | MeetupAdminScalarWhereInput[]
    id?: StringFilter<"MeetupAdmin"> | string
    meetupId?: StringFilter<"MeetupAdmin"> | string
    personId?: StringFilter<"MeetupAdmin"> | string
    role?: StringFilter<"MeetupAdmin"> | string
    createdAt?: DateTimeFilter<"MeetupAdmin"> | Date | string
    updatedAt?: DateTimeFilter<"MeetupAdmin"> | Date | string
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutPersonInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutPersonInput, SubscriptionUncheckedUpdateWithoutPersonInput>
    create: XOR<SubscriptionCreateWithoutPersonInput, SubscriptionUncheckedCreateWithoutPersonInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutPersonInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutPersonInput, SubscriptionUncheckedUpdateWithoutPersonInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutPersonInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutPersonInput>
  }

  export type SubscriptionScalarWhereInput = {
    AND?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    OR?: SubscriptionScalarWhereInput[]
    NOT?: SubscriptionScalarWhereInput | SubscriptionScalarWhereInput[]
    id?: StringFilter<"Subscription"> | string
    personId?: StringFilter<"Subscription"> | string
    meetupId?: StringFilter<"Subscription"> | string
    meetupRoleId?: StringFilter<"Subscription"> | string
    certificateLink?: StringNullableFilter<"Subscription"> | string | null
    presenceConfirmation?: BoolNullableFilter<"Subscription"> | boolean | null
    createdAt?: DateTimeFilter<"Subscription"> | Date | string
    updatedAt?: DateTimeFilter<"Subscription"> | Date | string
  }

  export type InviteUpsertWithWhereUniqueWithoutPersonInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutPersonInput, InviteUncheckedUpdateWithoutPersonInput>
    create: XOR<InviteCreateWithoutPersonInput, InviteUncheckedCreateWithoutPersonInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutPersonInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutPersonInput, InviteUncheckedUpdateWithoutPersonInput>
  }

  export type InviteUpdateManyWithWhereWithoutPersonInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutPersonInput>
  }

  export type InviteScalarWhereInput = {
    AND?: InviteScalarWhereInput | InviteScalarWhereInput[]
    OR?: InviteScalarWhereInput[]
    NOT?: InviteScalarWhereInput | InviteScalarWhereInput[]
    id?: StringFilter<"Invite"> | string
    personId?: StringFilter<"Invite"> | string
    meetupId?: StringFilter<"Invite"> | string
    link?: StringFilter<"Invite"> | string
    createdAt?: DateTimeFilter<"Invite"> | Date | string
    updatedAt?: DateTimeFilter<"Invite"> | Date | string
  }

  export type CertificateUpsertWithWhereUniqueWithoutPersonInput = {
    where: CertificateWhereUniqueInput
    update: XOR<CertificateUpdateWithoutPersonInput, CertificateUncheckedUpdateWithoutPersonInput>
    create: XOR<CertificateCreateWithoutPersonInput, CertificateUncheckedCreateWithoutPersonInput>
  }

  export type CertificateUpdateWithWhereUniqueWithoutPersonInput = {
    where: CertificateWhereUniqueInput
    data: XOR<CertificateUpdateWithoutPersonInput, CertificateUncheckedUpdateWithoutPersonInput>
  }

  export type CertificateUpdateManyWithWhereWithoutPersonInput = {
    where: CertificateScalarWhereInput
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyWithoutPersonInput>
  }

  export type CertificateScalarWhereInput = {
    AND?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
    OR?: CertificateScalarWhereInput[]
    NOT?: CertificateScalarWhereInput | CertificateScalarWhereInput[]
    id?: StringFilter<"Certificate"> | string
    personId?: StringFilter<"Certificate"> | string
    meetupId?: StringFilter<"Certificate"> | string
    link?: StringFilter<"Certificate"> | string
    securityCode?: StringFilter<"Certificate"> | string
    datetime?: DateTimeFilter<"Certificate"> | Date | string
    createdAt?: DateTimeFilter<"Certificate"> | Date | string
    updatedAt?: DateTimeFilter<"Certificate"> | Date | string
  }

  export type MeetupMediaUpsertWithWhereUniqueWithoutPersonInput = {
    where: MeetupMediaWhereUniqueInput
    update: XOR<MeetupMediaUpdateWithoutPersonInput, MeetupMediaUncheckedUpdateWithoutPersonInput>
    create: XOR<MeetupMediaCreateWithoutPersonInput, MeetupMediaUncheckedCreateWithoutPersonInput>
  }

  export type MeetupMediaUpdateWithWhereUniqueWithoutPersonInput = {
    where: MeetupMediaWhereUniqueInput
    data: XOR<MeetupMediaUpdateWithoutPersonInput, MeetupMediaUncheckedUpdateWithoutPersonInput>
  }

  export type MeetupMediaUpdateManyWithWhereWithoutPersonInput = {
    where: MeetupMediaScalarWhereInput
    data: XOR<MeetupMediaUpdateManyMutationInput, MeetupMediaUncheckedUpdateManyWithoutPersonInput>
  }

  export type MeetupMediaScalarWhereInput = {
    AND?: MeetupMediaScalarWhereInput | MeetupMediaScalarWhereInput[]
    OR?: MeetupMediaScalarWhereInput[]
    NOT?: MeetupMediaScalarWhereInput | MeetupMediaScalarWhereInput[]
    id?: StringFilter<"MeetupMedia"> | string
    meetupId?: StringFilter<"MeetupMedia"> | string
    personId?: StringFilter<"MeetupMedia"> | string
    link?: StringFilter<"MeetupMedia"> | string
    datetime?: DateTimeFilter<"MeetupMedia"> | Date | string
    createdAt?: DateTimeFilter<"MeetupMedia"> | Date | string
    updatedAt?: DateTimeFilter<"MeetupMedia"> | Date | string
  }

  export type GuestLoadUpsertWithWhereUniqueWithoutPersonInput = {
    where: GuestLoadWhereUniqueInput
    update: XOR<GuestLoadUpdateWithoutPersonInput, GuestLoadUncheckedUpdateWithoutPersonInput>
    create: XOR<GuestLoadCreateWithoutPersonInput, GuestLoadUncheckedCreateWithoutPersonInput>
  }

  export type GuestLoadUpdateWithWhereUniqueWithoutPersonInput = {
    where: GuestLoadWhereUniqueInput
    data: XOR<GuestLoadUpdateWithoutPersonInput, GuestLoadUncheckedUpdateWithoutPersonInput>
  }

  export type GuestLoadUpdateManyWithWhereWithoutPersonInput = {
    where: GuestLoadScalarWhereInput
    data: XOR<GuestLoadUpdateManyMutationInput, GuestLoadUncheckedUpdateManyWithoutPersonInput>
  }

  export type GuestLoadScalarWhereInput = {
    AND?: GuestLoadScalarWhereInput | GuestLoadScalarWhereInput[]
    OR?: GuestLoadScalarWhereInput[]
    NOT?: GuestLoadScalarWhereInput | GuestLoadScalarWhereInput[]
    id?: StringFilter<"GuestLoad"> | string
    link?: StringFilter<"GuestLoad"> | string
    meetupId?: StringFilter<"GuestLoad"> | string
    personId?: StringFilter<"GuestLoad"> | string
    datetime?: DateTimeFilter<"GuestLoad"> | Date | string
    count?: IntFilter<"GuestLoad"> | number
    createdAt?: DateTimeFilter<"GuestLoad"> | Date | string
    updatedAt?: DateTimeFilter<"GuestLoad"> | Date | string
  }

  export type UserUpsertWithoutPersonInput = {
    update: XOR<UserUpdateWithoutPersonInput, UserUncheckedUpdateWithoutPersonInput>
    create: XOR<UserCreateWithoutPersonInput, UserUncheckedCreateWithoutPersonInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPersonInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPersonInput, UserUncheckedUpdateWithoutPersonInput>
  }

  export type UserUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUpdateManyWithoutUserNestedInput
    accounts?: AccountUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    emailVerified?: BoolFieldUpdateOperationsInput | boolean
    image?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MeetupUpsertWithWhereUniqueWithoutCreatorInput = {
    where: MeetupWhereUniqueInput
    update: XOR<MeetupUpdateWithoutCreatorInput, MeetupUncheckedUpdateWithoutCreatorInput>
    create: XOR<MeetupCreateWithoutCreatorInput, MeetupUncheckedCreateWithoutCreatorInput>
  }

  export type MeetupUpdateWithWhereUniqueWithoutCreatorInput = {
    where: MeetupWhereUniqueInput
    data: XOR<MeetupUpdateWithoutCreatorInput, MeetupUncheckedUpdateWithoutCreatorInput>
  }

  export type MeetupUpdateManyWithWhereWithoutCreatorInput = {
    where: MeetupScalarWhereInput
    data: XOR<MeetupUpdateManyMutationInput, MeetupUncheckedUpdateManyWithoutCreatorInput>
  }

  export type MeetupScalarWhereInput = {
    AND?: MeetupScalarWhereInput | MeetupScalarWhereInput[]
    OR?: MeetupScalarWhereInput[]
    NOT?: MeetupScalarWhereInput | MeetupScalarWhereInput[]
    id?: StringFilter<"Meetup"> | string
    title?: StringFilter<"Meetup"> | string
    description?: StringNullableFilter<"Meetup"> | string | null
    locationName?: StringNullableFilter<"Meetup"> | string | null
    start?: DateTimeNullableFilter<"Meetup"> | Date | string | null
    end?: DateTimeNullableFilter<"Meetup"> | Date | string | null
    addressId?: StringNullableFilter<"Meetup"> | string | null
    categoryId?: StringFilter<"Meetup"> | string
    creatorId?: StringFilter<"Meetup"> | string
    certificateModelId?: StringNullableFilter<"Meetup"> | string | null
    image?: StringNullableFilter<"Meetup"> | string | null
    workload?: IntNullableFilter<"Meetup"> | number | null
    status?: EnumMeetupStatusFilter<"Meetup"> | $Enums.MeetupStatus
    createdAt?: DateTimeFilter<"Meetup"> | Date | string
    updatedAt?: DateTimeFilter<"Meetup"> | Date | string
  }

  export type MeetupFollowerUpsertWithWhereUniqueWithoutPersonInput = {
    where: MeetupFollowerWhereUniqueInput
    update: XOR<MeetupFollowerUpdateWithoutPersonInput, MeetupFollowerUncheckedUpdateWithoutPersonInput>
    create: XOR<MeetupFollowerCreateWithoutPersonInput, MeetupFollowerUncheckedCreateWithoutPersonInput>
  }

  export type MeetupFollowerUpdateWithWhereUniqueWithoutPersonInput = {
    where: MeetupFollowerWhereUniqueInput
    data: XOR<MeetupFollowerUpdateWithoutPersonInput, MeetupFollowerUncheckedUpdateWithoutPersonInput>
  }

  export type MeetupFollowerUpdateManyWithWhereWithoutPersonInput = {
    where: MeetupFollowerScalarWhereInput
    data: XOR<MeetupFollowerUpdateManyMutationInput, MeetupFollowerUncheckedUpdateManyWithoutPersonInput>
  }

  export type MeetupFollowerScalarWhereInput = {
    AND?: MeetupFollowerScalarWhereInput | MeetupFollowerScalarWhereInput[]
    OR?: MeetupFollowerScalarWhereInput[]
    NOT?: MeetupFollowerScalarWhereInput | MeetupFollowerScalarWhereInput[]
    id?: StringFilter<"MeetupFollower"> | string
    meetupId?: StringFilter<"MeetupFollower"> | string
    personId?: StringFilter<"MeetupFollower"> | string
    createdAt?: DateTimeFilter<"MeetupFollower"> | Date | string
  }

  export type MeetupNotificationUpsertWithWhereUniqueWithoutPersonInput = {
    where: MeetupNotificationWhereUniqueInput
    update: XOR<MeetupNotificationUpdateWithoutPersonInput, MeetupNotificationUncheckedUpdateWithoutPersonInput>
    create: XOR<MeetupNotificationCreateWithoutPersonInput, MeetupNotificationUncheckedCreateWithoutPersonInput>
  }

  export type MeetupNotificationUpdateWithWhereUniqueWithoutPersonInput = {
    where: MeetupNotificationWhereUniqueInput
    data: XOR<MeetupNotificationUpdateWithoutPersonInput, MeetupNotificationUncheckedUpdateWithoutPersonInput>
  }

  export type MeetupNotificationUpdateManyWithWhereWithoutPersonInput = {
    where: MeetupNotificationScalarWhereInput
    data: XOR<MeetupNotificationUpdateManyMutationInput, MeetupNotificationUncheckedUpdateManyWithoutPersonInput>
  }

  export type MeetupNotificationScalarWhereInput = {
    AND?: MeetupNotificationScalarWhereInput | MeetupNotificationScalarWhereInput[]
    OR?: MeetupNotificationScalarWhereInput[]
    NOT?: MeetupNotificationScalarWhereInput | MeetupNotificationScalarWhereInput[]
    id?: StringFilter<"MeetupNotification"> | string
    text?: StringFilter<"MeetupNotification"> | string
    meetupId?: StringFilter<"MeetupNotification"> | string
    personId?: StringFilter<"MeetupNotification"> | string
    createdAt?: DateTimeFilter<"MeetupNotification"> | Date | string
  }

  export type MeetupCreateWithoutAddressInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutAddressInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutAddressInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutAddressInput, MeetupUncheckedCreateWithoutAddressInput>
  }

  export type MeetupCreateManyAddressInputEnvelope = {
    data: MeetupCreateManyAddressInput | MeetupCreateManyAddressInput[]
    skipDuplicates?: boolean
  }

  export type MeetupUpsertWithWhereUniqueWithoutAddressInput = {
    where: MeetupWhereUniqueInput
    update: XOR<MeetupUpdateWithoutAddressInput, MeetupUncheckedUpdateWithoutAddressInput>
    create: XOR<MeetupCreateWithoutAddressInput, MeetupUncheckedCreateWithoutAddressInput>
  }

  export type MeetupUpdateWithWhereUniqueWithoutAddressInput = {
    where: MeetupWhereUniqueInput
    data: XOR<MeetupUpdateWithoutAddressInput, MeetupUncheckedUpdateWithoutAddressInput>
  }

  export type MeetupUpdateManyWithWhereWithoutAddressInput = {
    where: MeetupScalarWhereInput
    data: XOR<MeetupUpdateManyMutationInput, MeetupUncheckedUpdateManyWithoutAddressInput>
  }

  export type AddressCreateWithoutMeetupsInput = {
    id?: string
    mapLink?: string | null
    state: string
    city: string
    district: string
    street: string
    number?: string | null
    complement?: string | null
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressUncheckedCreateWithoutMeetupsInput = {
    id?: string
    mapLink?: string | null
    state: string
    city: string
    district: string
    street: string
    number?: string | null
    complement?: string | null
    zipcode: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AddressCreateOrConnectWithoutMeetupsInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutMeetupsInput, AddressUncheckedCreateWithoutMeetupsInput>
  }

  export type MeetupAdminCreateWithoutMeetupInput = {
    id?: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutMeetupAdminsInput
  }

  export type MeetupAdminUncheckedCreateWithoutMeetupInput = {
    id?: string
    personId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupAdminCreateOrConnectWithoutMeetupInput = {
    where: MeetupAdminWhereUniqueInput
    create: XOR<MeetupAdminCreateWithoutMeetupInput, MeetupAdminUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupAdminCreateManyMeetupInputEnvelope = {
    data: MeetupAdminCreateManyMeetupInput | MeetupAdminCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionCreateWithoutMeetupInput = {
    id?: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutSubscriptionsInput
    meetupRole: MeetupRoleCreateNestedOneWithoutSubscriptionsInput
    subscriptionPayments?: SubscriptionPaymentCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutMeetupInput = {
    id?: string
    personId: string
    meetupRoleId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutMeetupInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutMeetupInput, SubscriptionUncheckedCreateWithoutMeetupInput>
  }

  export type SubscriptionCreateManyMeetupInputEnvelope = {
    data: SubscriptionCreateManyMeetupInput | SubscriptionCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type InviteCreateWithoutMeetupInput = {
    id?: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutInvitesInput
  }

  export type InviteUncheckedCreateWithoutMeetupInput = {
    id?: string
    personId: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCreateOrConnectWithoutMeetupInput = {
    where: InviteWhereUniqueInput
    create: XOR<InviteCreateWithoutMeetupInput, InviteUncheckedCreateWithoutMeetupInput>
  }

  export type InviteCreateManyMeetupInputEnvelope = {
    data: InviteCreateManyMeetupInput | InviteCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type CertificateCreateWithoutMeetupInput = {
    id?: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutCertificatesInput
  }

  export type CertificateUncheckedCreateWithoutMeetupInput = {
    id?: string
    personId: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CertificateCreateOrConnectWithoutMeetupInput = {
    where: CertificateWhereUniqueInput
    create: XOR<CertificateCreateWithoutMeetupInput, CertificateUncheckedCreateWithoutMeetupInput>
  }

  export type CertificateCreateManyMeetupInputEnvelope = {
    data: CertificateCreateManyMeetupInput | CertificateCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type MeetupMediaCreateWithoutMeetupInput = {
    id?: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutMeetupMediasInput
  }

  export type MeetupMediaUncheckedCreateWithoutMeetupInput = {
    id?: string
    personId: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupMediaCreateOrConnectWithoutMeetupInput = {
    where: MeetupMediaWhereUniqueInput
    create: XOR<MeetupMediaCreateWithoutMeetupInput, MeetupMediaUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupMediaCreateManyMeetupInputEnvelope = {
    data: MeetupMediaCreateManyMeetupInput | MeetupMediaCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type GuestLoadCreateWithoutMeetupInput = {
    id?: string
    link: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutGuestLoadsInput
  }

  export type GuestLoadUncheckedCreateWithoutMeetupInput = {
    id?: string
    link: string
    personId: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestLoadCreateOrConnectWithoutMeetupInput = {
    where: GuestLoadWhereUniqueInput
    create: XOR<GuestLoadCreateWithoutMeetupInput, GuestLoadUncheckedCreateWithoutMeetupInput>
  }

  export type GuestLoadCreateManyMeetupInputEnvelope = {
    data: GuestLoadCreateManyMeetupInput | GuestLoadCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutMeetupsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryUncheckedCreateWithoutMeetupsInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CategoryCreateOrConnectWithoutMeetupsInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutMeetupsInput, CategoryUncheckedCreateWithoutMeetupsInput>
  }

  export type PersonCreateWithoutCreated_meetupsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutCreated_meetupsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutCreated_meetupsInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutCreated_meetupsInput, PersonUncheckedCreateWithoutCreated_meetupsInput>
  }

  export type MeetupFollowerCreateWithoutMeetupInput = {
    id?: string
    createdAt?: Date | string
    person: PersonCreateNestedOneWithoutFollowingMeetupsInput
  }

  export type MeetupFollowerUncheckedCreateWithoutMeetupInput = {
    id?: string
    personId: string
    createdAt?: Date | string
  }

  export type MeetupFollowerCreateOrConnectWithoutMeetupInput = {
    where: MeetupFollowerWhereUniqueInput
    create: XOR<MeetupFollowerCreateWithoutMeetupInput, MeetupFollowerUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupFollowerCreateManyMeetupInputEnvelope = {
    data: MeetupFollowerCreateManyMeetupInput | MeetupFollowerCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type MeetupInviteSheetCreateWithoutMeetupInput = {
    id?: string
    link: string
  }

  export type MeetupInviteSheetUncheckedCreateWithoutMeetupInput = {
    id?: string
    link: string
  }

  export type MeetupInviteSheetCreateOrConnectWithoutMeetupInput = {
    where: MeetupInviteSheetWhereUniqueInput
    create: XOR<MeetupInviteSheetCreateWithoutMeetupInput, MeetupInviteSheetUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupInviteSheetCreateManyMeetupInputEnvelope = {
    data: MeetupInviteSheetCreateManyMeetupInput | MeetupInviteSheetCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type CertificateModelCreateWithoutMeetupInput = {
    id?: string
    imageLink: string
    content: string
    createdAt?: Date | string
  }

  export type CertificateModelUncheckedCreateWithoutMeetupInput = {
    id?: string
    imageLink: string
    content: string
    createdAt?: Date | string
  }

  export type CertificateModelCreateOrConnectWithoutMeetupInput = {
    where: CertificateModelWhereUniqueInput
    create: XOR<CertificateModelCreateWithoutMeetupInput, CertificateModelUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupNotificationCreateWithoutMeetupInput = {
    id?: string
    text: string
    createdAt?: Date | string
    person: PersonCreateNestedOneWithoutNotificationsInput
  }

  export type MeetupNotificationUncheckedCreateWithoutMeetupInput = {
    id?: string
    text: string
    personId: string
    createdAt?: Date | string
  }

  export type MeetupNotificationCreateOrConnectWithoutMeetupInput = {
    where: MeetupNotificationWhereUniqueInput
    create: XOR<MeetupNotificationCreateWithoutMeetupInput, MeetupNotificationUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupNotificationCreateManyMeetupInputEnvelope = {
    data: MeetupNotificationCreateManyMeetupInput | MeetupNotificationCreateManyMeetupInput[]
    skipDuplicates?: boolean
  }

  export type AddressUpsertWithoutMeetupsInput = {
    update: XOR<AddressUpdateWithoutMeetupsInput, AddressUncheckedUpdateWithoutMeetupsInput>
    create: XOR<AddressCreateWithoutMeetupsInput, AddressUncheckedCreateWithoutMeetupsInput>
    where?: AddressWhereInput
  }

  export type AddressUpdateToOneWithWhereWithoutMeetupsInput = {
    where?: AddressWhereInput
    data: XOR<AddressUpdateWithoutMeetupsInput, AddressUncheckedUpdateWithoutMeetupsInput>
  }

  export type AddressUpdateWithoutMeetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mapLink?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutMeetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    mapLink?: NullableStringFieldUpdateOperationsInput | string | null
    state?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    district?: StringFieldUpdateOperationsInput | string
    street?: StringFieldUpdateOperationsInput | string
    number?: NullableStringFieldUpdateOperationsInput | string | null
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    zipcode?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupAdminUpsertWithWhereUniqueWithoutMeetupInput = {
    where: MeetupAdminWhereUniqueInput
    update: XOR<MeetupAdminUpdateWithoutMeetupInput, MeetupAdminUncheckedUpdateWithoutMeetupInput>
    create: XOR<MeetupAdminCreateWithoutMeetupInput, MeetupAdminUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupAdminUpdateWithWhereUniqueWithoutMeetupInput = {
    where: MeetupAdminWhereUniqueInput
    data: XOR<MeetupAdminUpdateWithoutMeetupInput, MeetupAdminUncheckedUpdateWithoutMeetupInput>
  }

  export type MeetupAdminUpdateManyWithWhereWithoutMeetupInput = {
    where: MeetupAdminScalarWhereInput
    data: XOR<MeetupAdminUpdateManyMutationInput, MeetupAdminUncheckedUpdateManyWithoutMeetupInput>
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutMeetupInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutMeetupInput, SubscriptionUncheckedUpdateWithoutMeetupInput>
    create: XOR<SubscriptionCreateWithoutMeetupInput, SubscriptionUncheckedCreateWithoutMeetupInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutMeetupInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutMeetupInput, SubscriptionUncheckedUpdateWithoutMeetupInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutMeetupInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutMeetupInput>
  }

  export type InviteUpsertWithWhereUniqueWithoutMeetupInput = {
    where: InviteWhereUniqueInput
    update: XOR<InviteUpdateWithoutMeetupInput, InviteUncheckedUpdateWithoutMeetupInput>
    create: XOR<InviteCreateWithoutMeetupInput, InviteUncheckedCreateWithoutMeetupInput>
  }

  export type InviteUpdateWithWhereUniqueWithoutMeetupInput = {
    where: InviteWhereUniqueInput
    data: XOR<InviteUpdateWithoutMeetupInput, InviteUncheckedUpdateWithoutMeetupInput>
  }

  export type InviteUpdateManyWithWhereWithoutMeetupInput = {
    where: InviteScalarWhereInput
    data: XOR<InviteUpdateManyMutationInput, InviteUncheckedUpdateManyWithoutMeetupInput>
  }

  export type CertificateUpsertWithWhereUniqueWithoutMeetupInput = {
    where: CertificateWhereUniqueInput
    update: XOR<CertificateUpdateWithoutMeetupInput, CertificateUncheckedUpdateWithoutMeetupInput>
    create: XOR<CertificateCreateWithoutMeetupInput, CertificateUncheckedCreateWithoutMeetupInput>
  }

  export type CertificateUpdateWithWhereUniqueWithoutMeetupInput = {
    where: CertificateWhereUniqueInput
    data: XOR<CertificateUpdateWithoutMeetupInput, CertificateUncheckedUpdateWithoutMeetupInput>
  }

  export type CertificateUpdateManyWithWhereWithoutMeetupInput = {
    where: CertificateScalarWhereInput
    data: XOR<CertificateUpdateManyMutationInput, CertificateUncheckedUpdateManyWithoutMeetupInput>
  }

  export type MeetupMediaUpsertWithWhereUniqueWithoutMeetupInput = {
    where: MeetupMediaWhereUniqueInput
    update: XOR<MeetupMediaUpdateWithoutMeetupInput, MeetupMediaUncheckedUpdateWithoutMeetupInput>
    create: XOR<MeetupMediaCreateWithoutMeetupInput, MeetupMediaUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupMediaUpdateWithWhereUniqueWithoutMeetupInput = {
    where: MeetupMediaWhereUniqueInput
    data: XOR<MeetupMediaUpdateWithoutMeetupInput, MeetupMediaUncheckedUpdateWithoutMeetupInput>
  }

  export type MeetupMediaUpdateManyWithWhereWithoutMeetupInput = {
    where: MeetupMediaScalarWhereInput
    data: XOR<MeetupMediaUpdateManyMutationInput, MeetupMediaUncheckedUpdateManyWithoutMeetupInput>
  }

  export type GuestLoadUpsertWithWhereUniqueWithoutMeetupInput = {
    where: GuestLoadWhereUniqueInput
    update: XOR<GuestLoadUpdateWithoutMeetupInput, GuestLoadUncheckedUpdateWithoutMeetupInput>
    create: XOR<GuestLoadCreateWithoutMeetupInput, GuestLoadUncheckedCreateWithoutMeetupInput>
  }

  export type GuestLoadUpdateWithWhereUniqueWithoutMeetupInput = {
    where: GuestLoadWhereUniqueInput
    data: XOR<GuestLoadUpdateWithoutMeetupInput, GuestLoadUncheckedUpdateWithoutMeetupInput>
  }

  export type GuestLoadUpdateManyWithWhereWithoutMeetupInput = {
    where: GuestLoadScalarWhereInput
    data: XOR<GuestLoadUpdateManyMutationInput, GuestLoadUncheckedUpdateManyWithoutMeetupInput>
  }

  export type CategoryUpsertWithoutMeetupsInput = {
    update: XOR<CategoryUpdateWithoutMeetupsInput, CategoryUncheckedUpdateWithoutMeetupsInput>
    create: XOR<CategoryCreateWithoutMeetupsInput, CategoryUncheckedCreateWithoutMeetupsInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutMeetupsInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutMeetupsInput, CategoryUncheckedUpdateWithoutMeetupsInput>
  }

  export type CategoryUpdateWithoutMeetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CategoryUncheckedUpdateWithoutMeetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonUpsertWithoutCreated_meetupsInput = {
    update: XOR<PersonUpdateWithoutCreated_meetupsInput, PersonUncheckedUpdateWithoutCreated_meetupsInput>
    create: XOR<PersonCreateWithoutCreated_meetupsInput, PersonUncheckedCreateWithoutCreated_meetupsInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutCreated_meetupsInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutCreated_meetupsInput, PersonUncheckedUpdateWithoutCreated_meetupsInput>
  }

  export type PersonUpdateWithoutCreated_meetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutCreated_meetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type MeetupFollowerUpsertWithWhereUniqueWithoutMeetupInput = {
    where: MeetupFollowerWhereUniqueInput
    update: XOR<MeetupFollowerUpdateWithoutMeetupInput, MeetupFollowerUncheckedUpdateWithoutMeetupInput>
    create: XOR<MeetupFollowerCreateWithoutMeetupInput, MeetupFollowerUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupFollowerUpdateWithWhereUniqueWithoutMeetupInput = {
    where: MeetupFollowerWhereUniqueInput
    data: XOR<MeetupFollowerUpdateWithoutMeetupInput, MeetupFollowerUncheckedUpdateWithoutMeetupInput>
  }

  export type MeetupFollowerUpdateManyWithWhereWithoutMeetupInput = {
    where: MeetupFollowerScalarWhereInput
    data: XOR<MeetupFollowerUpdateManyMutationInput, MeetupFollowerUncheckedUpdateManyWithoutMeetupInput>
  }

  export type MeetupInviteSheetUpsertWithWhereUniqueWithoutMeetupInput = {
    where: MeetupInviteSheetWhereUniqueInput
    update: XOR<MeetupInviteSheetUpdateWithoutMeetupInput, MeetupInviteSheetUncheckedUpdateWithoutMeetupInput>
    create: XOR<MeetupInviteSheetCreateWithoutMeetupInput, MeetupInviteSheetUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupInviteSheetUpdateWithWhereUniqueWithoutMeetupInput = {
    where: MeetupInviteSheetWhereUniqueInput
    data: XOR<MeetupInviteSheetUpdateWithoutMeetupInput, MeetupInviteSheetUncheckedUpdateWithoutMeetupInput>
  }

  export type MeetupInviteSheetUpdateManyWithWhereWithoutMeetupInput = {
    where: MeetupInviteSheetScalarWhereInput
    data: XOR<MeetupInviteSheetUpdateManyMutationInput, MeetupInviteSheetUncheckedUpdateManyWithoutMeetupInput>
  }

  export type MeetupInviteSheetScalarWhereInput = {
    AND?: MeetupInviteSheetScalarWhereInput | MeetupInviteSheetScalarWhereInput[]
    OR?: MeetupInviteSheetScalarWhereInput[]
    NOT?: MeetupInviteSheetScalarWhereInput | MeetupInviteSheetScalarWhereInput[]
    id?: StringFilter<"MeetupInviteSheet"> | string
    link?: StringFilter<"MeetupInviteSheet"> | string
    meetupId?: StringFilter<"MeetupInviteSheet"> | string
  }

  export type CertificateModelUpsertWithoutMeetupInput = {
    update: XOR<CertificateModelUpdateWithoutMeetupInput, CertificateModelUncheckedUpdateWithoutMeetupInput>
    create: XOR<CertificateModelCreateWithoutMeetupInput, CertificateModelUncheckedCreateWithoutMeetupInput>
    where?: CertificateModelWhereInput
  }

  export type CertificateModelUpdateToOneWithWhereWithoutMeetupInput = {
    where?: CertificateModelWhereInput
    data: XOR<CertificateModelUpdateWithoutMeetupInput, CertificateModelUncheckedUpdateWithoutMeetupInput>
  }

  export type CertificateModelUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageLink?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateModelUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageLink?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupNotificationUpsertWithWhereUniqueWithoutMeetupInput = {
    where: MeetupNotificationWhereUniqueInput
    update: XOR<MeetupNotificationUpdateWithoutMeetupInput, MeetupNotificationUncheckedUpdateWithoutMeetupInput>
    create: XOR<MeetupNotificationCreateWithoutMeetupInput, MeetupNotificationUncheckedCreateWithoutMeetupInput>
  }

  export type MeetupNotificationUpdateWithWhereUniqueWithoutMeetupInput = {
    where: MeetupNotificationWhereUniqueInput
    data: XOR<MeetupNotificationUpdateWithoutMeetupInput, MeetupNotificationUncheckedUpdateWithoutMeetupInput>
  }

  export type MeetupNotificationUpdateManyWithWhereWithoutMeetupInput = {
    where: MeetupNotificationScalarWhereInput
    data: XOR<MeetupNotificationUpdateManyMutationInput, MeetupNotificationUncheckedUpdateManyWithoutMeetupInput>
  }

  export type MeetupCreateWithoutNotificationsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutNotificationsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutNotificationsInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutNotificationsInput, MeetupUncheckedCreateWithoutNotificationsInput>
  }

  export type PersonCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutNotificationsInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutNotificationsInput, PersonUncheckedCreateWithoutNotificationsInput>
  }

  export type MeetupUpsertWithoutNotificationsInput = {
    update: XOR<MeetupUpdateWithoutNotificationsInput, MeetupUncheckedUpdateWithoutNotificationsInput>
    create: XOR<MeetupCreateWithoutNotificationsInput, MeetupUncheckedCreateWithoutNotificationsInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutNotificationsInput, MeetupUncheckedUpdateWithoutNotificationsInput>
  }

  export type MeetupUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type PersonUpsertWithoutNotificationsInput = {
    update: XOR<PersonUpdateWithoutNotificationsInput, PersonUncheckedUpdateWithoutNotificationsInput>
    create: XOR<PersonCreateWithoutNotificationsInput, PersonUncheckedCreateWithoutNotificationsInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutNotificationsInput, PersonUncheckedUpdateWithoutNotificationsInput>
  }

  export type PersonUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type MeetupCreateWithoutCertificateModelInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutCertificateModelInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutCertificateModelInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutCertificateModelInput, MeetupUncheckedCreateWithoutCertificateModelInput>
  }

  export type MeetupUpsertWithoutCertificateModelInput = {
    update: XOR<MeetupUpdateWithoutCertificateModelInput, MeetupUncheckedUpdateWithoutCertificateModelInput>
    create: XOR<MeetupCreateWithoutCertificateModelInput, MeetupUncheckedCreateWithoutCertificateModelInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutCertificateModelInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutCertificateModelInput, MeetupUncheckedUpdateWithoutCertificateModelInput>
  }

  export type MeetupUpdateWithoutCertificateModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutCertificateModelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupCreateWithoutInviteSheetsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutInviteSheetsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutInviteSheetsInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutInviteSheetsInput, MeetupUncheckedCreateWithoutInviteSheetsInput>
  }

  export type MeetupUpsertWithoutInviteSheetsInput = {
    update: XOR<MeetupUpdateWithoutInviteSheetsInput, MeetupUncheckedUpdateWithoutInviteSheetsInput>
    create: XOR<MeetupCreateWithoutInviteSheetsInput, MeetupUncheckedCreateWithoutInviteSheetsInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutInviteSheetsInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutInviteSheetsInput, MeetupUncheckedUpdateWithoutInviteSheetsInput>
  }

  export type MeetupUpdateWithoutInviteSheetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutInviteSheetsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type SubscriptionCreateWithoutMeetupRoleInput = {
    id?: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutSubscriptionsInput
    meetup: MeetupCreateNestedOneWithoutSubscriptionsInput
    subscriptionPayments?: SubscriptionPaymentCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionUncheckedCreateWithoutMeetupRoleInput = {
    id?: string
    personId: string
    meetupId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedCreateNestedManyWithoutSubscriptionInput
  }

  export type SubscriptionCreateOrConnectWithoutMeetupRoleInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutMeetupRoleInput, SubscriptionUncheckedCreateWithoutMeetupRoleInput>
  }

  export type SubscriptionCreateManyMeetupRoleInputEnvelope = {
    data: SubscriptionCreateManyMeetupRoleInput | SubscriptionCreateManyMeetupRoleInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionUpsertWithWhereUniqueWithoutMeetupRoleInput = {
    where: SubscriptionWhereUniqueInput
    update: XOR<SubscriptionUpdateWithoutMeetupRoleInput, SubscriptionUncheckedUpdateWithoutMeetupRoleInput>
    create: XOR<SubscriptionCreateWithoutMeetupRoleInput, SubscriptionUncheckedCreateWithoutMeetupRoleInput>
  }

  export type SubscriptionUpdateWithWhereUniqueWithoutMeetupRoleInput = {
    where: SubscriptionWhereUniqueInput
    data: XOR<SubscriptionUpdateWithoutMeetupRoleInput, SubscriptionUncheckedUpdateWithoutMeetupRoleInput>
  }

  export type SubscriptionUpdateManyWithWhereWithoutMeetupRoleInput = {
    where: SubscriptionScalarWhereInput
    data: XOR<SubscriptionUpdateManyMutationInput, SubscriptionUncheckedUpdateManyWithoutMeetupRoleInput>
  }

  export type MeetupCreateWithoutMeetupAdminsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutMeetupAdminsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutMeetupAdminsInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutMeetupAdminsInput, MeetupUncheckedCreateWithoutMeetupAdminsInput>
  }

  export type PersonCreateWithoutMeetupAdminsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutMeetupAdminsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutMeetupAdminsInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutMeetupAdminsInput, PersonUncheckedCreateWithoutMeetupAdminsInput>
  }

  export type MeetupUpsertWithoutMeetupAdminsInput = {
    update: XOR<MeetupUpdateWithoutMeetupAdminsInput, MeetupUncheckedUpdateWithoutMeetupAdminsInput>
    create: XOR<MeetupCreateWithoutMeetupAdminsInput, MeetupUncheckedCreateWithoutMeetupAdminsInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutMeetupAdminsInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutMeetupAdminsInput, MeetupUncheckedUpdateWithoutMeetupAdminsInput>
  }

  export type MeetupUpdateWithoutMeetupAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutMeetupAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type PersonUpsertWithoutMeetupAdminsInput = {
    update: XOR<PersonUpdateWithoutMeetupAdminsInput, PersonUncheckedUpdateWithoutMeetupAdminsInput>
    create: XOR<PersonCreateWithoutMeetupAdminsInput, PersonUncheckedCreateWithoutMeetupAdminsInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutMeetupAdminsInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutMeetupAdminsInput, PersonUncheckedUpdateWithoutMeetupAdminsInput>
  }

  export type PersonUpdateWithoutMeetupAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutMeetupAdminsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type MeetupCreateWithoutFollowersInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutFollowersInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutFollowersInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutFollowersInput, MeetupUncheckedCreateWithoutFollowersInput>
  }

  export type PersonCreateWithoutFollowingMeetupsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutFollowingMeetupsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutFollowingMeetupsInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutFollowingMeetupsInput, PersonUncheckedCreateWithoutFollowingMeetupsInput>
  }

  export type MeetupUpsertWithoutFollowersInput = {
    update: XOR<MeetupUpdateWithoutFollowersInput, MeetupUncheckedUpdateWithoutFollowersInput>
    create: XOR<MeetupCreateWithoutFollowersInput, MeetupUncheckedCreateWithoutFollowersInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutFollowersInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutFollowersInput, MeetupUncheckedUpdateWithoutFollowersInput>
  }

  export type MeetupUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutFollowersInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type PersonUpsertWithoutFollowingMeetupsInput = {
    update: XOR<PersonUpdateWithoutFollowingMeetupsInput, PersonUncheckedUpdateWithoutFollowingMeetupsInput>
    create: XOR<PersonCreateWithoutFollowingMeetupsInput, PersonUncheckedCreateWithoutFollowingMeetupsInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutFollowingMeetupsInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutFollowingMeetupsInput, PersonUncheckedUpdateWithoutFollowingMeetupsInput>
  }

  export type PersonUpdateWithoutFollowingMeetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutFollowingMeetupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type MeetupCreateWithoutCategoryInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutCategoryInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutCategoryInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutCategoryInput, MeetupUncheckedCreateWithoutCategoryInput>
  }

  export type MeetupCreateManyCategoryInputEnvelope = {
    data: MeetupCreateManyCategoryInput | MeetupCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type MeetupUpsertWithWhereUniqueWithoutCategoryInput = {
    where: MeetupWhereUniqueInput
    update: XOR<MeetupUpdateWithoutCategoryInput, MeetupUncheckedUpdateWithoutCategoryInput>
    create: XOR<MeetupCreateWithoutCategoryInput, MeetupUncheckedCreateWithoutCategoryInput>
  }

  export type MeetupUpdateWithWhereUniqueWithoutCategoryInput = {
    where: MeetupWhereUniqueInput
    data: XOR<MeetupUpdateWithoutCategoryInput, MeetupUncheckedUpdateWithoutCategoryInput>
  }

  export type MeetupUpdateManyWithWhereWithoutCategoryInput = {
    where: MeetupScalarWhereInput
    data: XOR<MeetupUpdateManyMutationInput, MeetupUncheckedUpdateManyWithoutCategoryInput>
  }

  export type PersonCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutSubscriptionsInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutSubscriptionsInput, PersonUncheckedCreateWithoutSubscriptionsInput>
  }

  export type MeetupCreateWithoutSubscriptionsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutSubscriptionsInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutSubscriptionsInput, MeetupUncheckedCreateWithoutSubscriptionsInput>
  }

  export type MeetupRoleCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    subscriptionPrice: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupRoleUncheckedCreateWithoutSubscriptionsInput = {
    id?: string
    name: string
    subscriptionPrice: Decimal | DecimalJsLike | number | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupRoleCreateOrConnectWithoutSubscriptionsInput = {
    where: MeetupRoleWhereUniqueInput
    create: XOR<MeetupRoleCreateWithoutSubscriptionsInput, MeetupRoleUncheckedCreateWithoutSubscriptionsInput>
  }

  export type SubscriptionPaymentCreateWithoutSubscriptionInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    payment: PaymentCreateNestedOneWithoutSubscriptionPaymentsInput
  }

  export type SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput = {
    id?: string
    paymentId: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPaymentCreateOrConnectWithoutSubscriptionInput = {
    where: SubscriptionPaymentWhereUniqueInput
    create: XOR<SubscriptionPaymentCreateWithoutSubscriptionInput, SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput>
  }

  export type SubscriptionPaymentCreateManySubscriptionInputEnvelope = {
    data: SubscriptionPaymentCreateManySubscriptionInput | SubscriptionPaymentCreateManySubscriptionInput[]
    skipDuplicates?: boolean
  }

  export type PersonUpsertWithoutSubscriptionsInput = {
    update: XOR<PersonUpdateWithoutSubscriptionsInput, PersonUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<PersonCreateWithoutSubscriptionsInput, PersonUncheckedCreateWithoutSubscriptionsInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutSubscriptionsInput, PersonUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type PersonUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type MeetupUpsertWithoutSubscriptionsInput = {
    update: XOR<MeetupUpdateWithoutSubscriptionsInput, MeetupUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<MeetupCreateWithoutSubscriptionsInput, MeetupUncheckedCreateWithoutSubscriptionsInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutSubscriptionsInput, MeetupUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type MeetupUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupRoleUpsertWithoutSubscriptionsInput = {
    update: XOR<MeetupRoleUpdateWithoutSubscriptionsInput, MeetupRoleUncheckedUpdateWithoutSubscriptionsInput>
    create: XOR<MeetupRoleCreateWithoutSubscriptionsInput, MeetupRoleUncheckedCreateWithoutSubscriptionsInput>
    where?: MeetupRoleWhereInput
  }

  export type MeetupRoleUpdateToOneWithWhereWithoutSubscriptionsInput = {
    where?: MeetupRoleWhereInput
    data: XOR<MeetupRoleUpdateWithoutSubscriptionsInput, MeetupRoleUncheckedUpdateWithoutSubscriptionsInput>
  }

  export type MeetupRoleUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupRoleUncheckedUpdateWithoutSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    subscriptionPrice?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPaymentUpsertWithWhereUniqueWithoutSubscriptionInput = {
    where: SubscriptionPaymentWhereUniqueInput
    update: XOR<SubscriptionPaymentUpdateWithoutSubscriptionInput, SubscriptionPaymentUncheckedUpdateWithoutSubscriptionInput>
    create: XOR<SubscriptionPaymentCreateWithoutSubscriptionInput, SubscriptionPaymentUncheckedCreateWithoutSubscriptionInput>
  }

  export type SubscriptionPaymentUpdateWithWhereUniqueWithoutSubscriptionInput = {
    where: SubscriptionPaymentWhereUniqueInput
    data: XOR<SubscriptionPaymentUpdateWithoutSubscriptionInput, SubscriptionPaymentUncheckedUpdateWithoutSubscriptionInput>
  }

  export type SubscriptionPaymentUpdateManyWithWhereWithoutSubscriptionInput = {
    where: SubscriptionPaymentScalarWhereInput
    data: XOR<SubscriptionPaymentUpdateManyMutationInput, SubscriptionPaymentUncheckedUpdateManyWithoutSubscriptionInput>
  }

  export type SubscriptionPaymentScalarWhereInput = {
    AND?: SubscriptionPaymentScalarWhereInput | SubscriptionPaymentScalarWhereInput[]
    OR?: SubscriptionPaymentScalarWhereInput[]
    NOT?: SubscriptionPaymentScalarWhereInput | SubscriptionPaymentScalarWhereInput[]
    id?: StringFilter<"SubscriptionPayment"> | string
    subscriptionId?: StringFilter<"SubscriptionPayment"> | string
    paymentId?: StringFilter<"SubscriptionPayment"> | string
    price?: DecimalFilter<"SubscriptionPayment"> | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFilter<"SubscriptionPayment"> | boolean
    createdAt?: DateTimeFilter<"SubscriptionPayment"> | Date | string
    updatedAt?: DateTimeFilter<"SubscriptionPayment"> | Date | string
  }

  export type PersonCreateWithoutInvitesInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutInvitesInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutInvitesInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutInvitesInput, PersonUncheckedCreateWithoutInvitesInput>
  }

  export type MeetupCreateWithoutInvitesInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutInvitesInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutInvitesInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutInvitesInput, MeetupUncheckedCreateWithoutInvitesInput>
  }

  export type PersonUpsertWithoutInvitesInput = {
    update: XOR<PersonUpdateWithoutInvitesInput, PersonUncheckedUpdateWithoutInvitesInput>
    create: XOR<PersonCreateWithoutInvitesInput, PersonUncheckedCreateWithoutInvitesInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutInvitesInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutInvitesInput, PersonUncheckedUpdateWithoutInvitesInput>
  }

  export type PersonUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type MeetupUpsertWithoutInvitesInput = {
    update: XOR<MeetupUpdateWithoutInvitesInput, MeetupUncheckedUpdateWithoutInvitesInput>
    create: XOR<MeetupCreateWithoutInvitesInput, MeetupUncheckedCreateWithoutInvitesInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutInvitesInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutInvitesInput, MeetupUncheckedUpdateWithoutInvitesInput>
  }

  export type MeetupUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutInvitesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type SubscriptionPaymentCreateWithoutPaymentInput = {
    id?: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    subscription: SubscriptionCreateNestedOneWithoutSubscriptionPaymentsInput
  }

  export type SubscriptionPaymentUncheckedCreateWithoutPaymentInput = {
    id?: string
    subscriptionId: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPaymentCreateOrConnectWithoutPaymentInput = {
    where: SubscriptionPaymentWhereUniqueInput
    create: XOR<SubscriptionPaymentCreateWithoutPaymentInput, SubscriptionPaymentUncheckedCreateWithoutPaymentInput>
  }

  export type SubscriptionPaymentCreateManyPaymentInputEnvelope = {
    data: SubscriptionPaymentCreateManyPaymentInput | SubscriptionPaymentCreateManyPaymentInput[]
    skipDuplicates?: boolean
  }

  export type SubscriptionPaymentUpsertWithWhereUniqueWithoutPaymentInput = {
    where: SubscriptionPaymentWhereUniqueInput
    update: XOR<SubscriptionPaymentUpdateWithoutPaymentInput, SubscriptionPaymentUncheckedUpdateWithoutPaymentInput>
    create: XOR<SubscriptionPaymentCreateWithoutPaymentInput, SubscriptionPaymentUncheckedCreateWithoutPaymentInput>
  }

  export type SubscriptionPaymentUpdateWithWhereUniqueWithoutPaymentInput = {
    where: SubscriptionPaymentWhereUniqueInput
    data: XOR<SubscriptionPaymentUpdateWithoutPaymentInput, SubscriptionPaymentUncheckedUpdateWithoutPaymentInput>
  }

  export type SubscriptionPaymentUpdateManyWithWhereWithoutPaymentInput = {
    where: SubscriptionPaymentScalarWhereInput
    data: XOR<SubscriptionPaymentUpdateManyMutationInput, SubscriptionPaymentUncheckedUpdateManyWithoutPaymentInput>
  }

  export type SubscriptionCreateWithoutSubscriptionPaymentsInput = {
    id?: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
    person: PersonCreateNestedOneWithoutSubscriptionsInput
    meetup: MeetupCreateNestedOneWithoutSubscriptionsInput
    meetupRole: MeetupRoleCreateNestedOneWithoutSubscriptionsInput
  }

  export type SubscriptionUncheckedCreateWithoutSubscriptionPaymentsInput = {
    id?: string
    personId: string
    meetupId: string
    meetupRoleId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateOrConnectWithoutSubscriptionPaymentsInput = {
    where: SubscriptionWhereUniqueInput
    create: XOR<SubscriptionCreateWithoutSubscriptionPaymentsInput, SubscriptionUncheckedCreateWithoutSubscriptionPaymentsInput>
  }

  export type PaymentCreateWithoutSubscriptionPaymentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentUncheckedCreateWithoutSubscriptionPaymentsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PaymentCreateOrConnectWithoutSubscriptionPaymentsInput = {
    where: PaymentWhereUniqueInput
    create: XOR<PaymentCreateWithoutSubscriptionPaymentsInput, PaymentUncheckedCreateWithoutSubscriptionPaymentsInput>
  }

  export type SubscriptionUpsertWithoutSubscriptionPaymentsInput = {
    update: XOR<SubscriptionUpdateWithoutSubscriptionPaymentsInput, SubscriptionUncheckedUpdateWithoutSubscriptionPaymentsInput>
    create: XOR<SubscriptionCreateWithoutSubscriptionPaymentsInput, SubscriptionUncheckedCreateWithoutSubscriptionPaymentsInput>
    where?: SubscriptionWhereInput
  }

  export type SubscriptionUpdateToOneWithWhereWithoutSubscriptionPaymentsInput = {
    where?: SubscriptionWhereInput
    data: XOR<SubscriptionUpdateWithoutSubscriptionPaymentsInput, SubscriptionUncheckedUpdateWithoutSubscriptionPaymentsInput>
  }

  export type SubscriptionUpdateWithoutSubscriptionPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutSubscriptionsNestedInput
    meetup?: MeetupUpdateOneRequiredWithoutSubscriptionsNestedInput
    meetupRole?: MeetupRoleUpdateOneRequiredWithoutSubscriptionsNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutSubscriptionPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    meetupRoleId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUpsertWithoutSubscriptionPaymentsInput = {
    update: XOR<PaymentUpdateWithoutSubscriptionPaymentsInput, PaymentUncheckedUpdateWithoutSubscriptionPaymentsInput>
    create: XOR<PaymentCreateWithoutSubscriptionPaymentsInput, PaymentUncheckedCreateWithoutSubscriptionPaymentsInput>
    where?: PaymentWhereInput
  }

  export type PaymentUpdateToOneWithWhereWithoutSubscriptionPaymentsInput = {
    where?: PaymentWhereInput
    data: XOR<PaymentUpdateWithoutSubscriptionPaymentsInput, PaymentUncheckedUpdateWithoutSubscriptionPaymentsInput>
  }

  export type PaymentUpdateWithoutSubscriptionPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PaymentUncheckedUpdateWithoutSubscriptionPaymentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonCreateWithoutCertificatesInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutCertificatesInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutCertificatesInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutCertificatesInput, PersonUncheckedCreateWithoutCertificatesInput>
  }

  export type MeetupCreateWithoutCertificatesInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutCertificatesInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutCertificatesInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutCertificatesInput, MeetupUncheckedCreateWithoutCertificatesInput>
  }

  export type PersonUpsertWithoutCertificatesInput = {
    update: XOR<PersonUpdateWithoutCertificatesInput, PersonUncheckedUpdateWithoutCertificatesInput>
    create: XOR<PersonCreateWithoutCertificatesInput, PersonUncheckedCreateWithoutCertificatesInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutCertificatesInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutCertificatesInput, PersonUncheckedUpdateWithoutCertificatesInput>
  }

  export type PersonUpdateWithoutCertificatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutCertificatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type MeetupUpsertWithoutCertificatesInput = {
    update: XOR<MeetupUpdateWithoutCertificatesInput, MeetupUncheckedUpdateWithoutCertificatesInput>
    create: XOR<MeetupCreateWithoutCertificatesInput, MeetupUncheckedCreateWithoutCertificatesInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutCertificatesInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutCertificatesInput, MeetupUncheckedUpdateWithoutCertificatesInput>
  }

  export type MeetupUpdateWithoutCertificatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutCertificatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupCreateWithoutMeetupMediasInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutMeetupMediasInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutMeetupMediasInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutMeetupMediasInput, MeetupUncheckedCreateWithoutMeetupMediasInput>
  }

  export type PersonCreateWithoutMeetupMediasInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutMeetupMediasInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    guestLoads?: GuestLoadUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutMeetupMediasInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutMeetupMediasInput, PersonUncheckedCreateWithoutMeetupMediasInput>
  }

  export type MeetupUpsertWithoutMeetupMediasInput = {
    update: XOR<MeetupUpdateWithoutMeetupMediasInput, MeetupUncheckedUpdateWithoutMeetupMediasInput>
    create: XOR<MeetupCreateWithoutMeetupMediasInput, MeetupUncheckedCreateWithoutMeetupMediasInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutMeetupMediasInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutMeetupMediasInput, MeetupUncheckedUpdateWithoutMeetupMediasInput>
  }

  export type MeetupUpdateWithoutMeetupMediasInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutMeetupMediasInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type PersonUpsertWithoutMeetupMediasInput = {
    update: XOR<PersonUpdateWithoutMeetupMediasInput, PersonUncheckedUpdateWithoutMeetupMediasInput>
    create: XOR<PersonCreateWithoutMeetupMediasInput, PersonUncheckedCreateWithoutMeetupMediasInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutMeetupMediasInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutMeetupMediasInput, PersonUncheckedUpdateWithoutMeetupMediasInput>
  }

  export type PersonUpdateWithoutMeetupMediasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutMeetupMediasInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type MeetupCreateWithoutGuestLoadsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    address?: AddressCreateNestedOneWithoutMeetupsInput
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionCreateNestedManyWithoutMeetupInput
    invites?: InviteCreateNestedManyWithoutMeetupInput
    certificates?: CertificateCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutMeetupInput
    category: CategoryCreateNestedOneWithoutMeetupsInput
    creator: PersonCreateNestedOneWithoutCreated_meetupsInput
    followers?: MeetupFollowerCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetCreateNestedManyWithoutMeetupInput
    certificateModel?: CertificateModelCreateNestedOneWithoutMeetupInput
    notifications?: MeetupNotificationCreateNestedManyWithoutMeetupInput
  }

  export type MeetupUncheckedCreateWithoutGuestLoadsInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutMeetupInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutMeetupInput
    invites?: InviteUncheckedCreateNestedManyWithoutMeetupInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutMeetupInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutMeetupInput
    followers?: MeetupFollowerUncheckedCreateNestedManyWithoutMeetupInput
    inviteSheets?: MeetupInviteSheetUncheckedCreateNestedManyWithoutMeetupInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutMeetupInput
  }

  export type MeetupCreateOrConnectWithoutGuestLoadsInput = {
    where: MeetupWhereUniqueInput
    create: XOR<MeetupCreateWithoutGuestLoadsInput, MeetupUncheckedCreateWithoutGuestLoadsInput>
  }

  export type PersonCreateWithoutGuestLoadsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    meetupAdmins?: MeetupAdminCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionCreateNestedManyWithoutPersonInput
    invites?: InviteCreateNestedManyWithoutPersonInput
    certificates?: CertificateCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaCreateNestedManyWithoutPersonInput
    user?: UserCreateNestedOneWithoutPersonInput
    created_meetups?: MeetupCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationCreateNestedManyWithoutPersonInput
  }

  export type PersonUncheckedCreateWithoutGuestLoadsInput = {
    id?: string
    name: string
    email: string
    phone?: string | null
    gender?: string | null
    birthdate?: Date | string | null
    cpf?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId?: string | null
    meetupAdmins?: MeetupAdminUncheckedCreateNestedManyWithoutPersonInput
    subscriptions?: SubscriptionUncheckedCreateNestedManyWithoutPersonInput
    invites?: InviteUncheckedCreateNestedManyWithoutPersonInput
    certificates?: CertificateUncheckedCreateNestedManyWithoutPersonInput
    meetupMedias?: MeetupMediaUncheckedCreateNestedManyWithoutPersonInput
    created_meetups?: MeetupUncheckedCreateNestedManyWithoutCreatorInput
    followingMeetups?: MeetupFollowerUncheckedCreateNestedManyWithoutPersonInput
    notifications?: MeetupNotificationUncheckedCreateNestedManyWithoutPersonInput
  }

  export type PersonCreateOrConnectWithoutGuestLoadsInput = {
    where: PersonWhereUniqueInput
    create: XOR<PersonCreateWithoutGuestLoadsInput, PersonUncheckedCreateWithoutGuestLoadsInput>
  }

  export type MeetupUpsertWithoutGuestLoadsInput = {
    update: XOR<MeetupUpdateWithoutGuestLoadsInput, MeetupUncheckedUpdateWithoutGuestLoadsInput>
    create: XOR<MeetupCreateWithoutGuestLoadsInput, MeetupUncheckedCreateWithoutGuestLoadsInput>
    where?: MeetupWhereInput
  }

  export type MeetupUpdateToOneWithWhereWithoutGuestLoadsInput = {
    where?: MeetupWhereInput
    data: XOR<MeetupUpdateWithoutGuestLoadsInput, MeetupUncheckedUpdateWithoutGuestLoadsInput>
  }

  export type MeetupUpdateWithoutGuestLoadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutGuestLoadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type PersonUpsertWithoutGuestLoadsInput = {
    update: XOR<PersonUpdateWithoutGuestLoadsInput, PersonUncheckedUpdateWithoutGuestLoadsInput>
    create: XOR<PersonCreateWithoutGuestLoadsInput, PersonUncheckedCreateWithoutGuestLoadsInput>
    where?: PersonWhereInput
  }

  export type PersonUpdateToOneWithWhereWithoutGuestLoadsInput = {
    where?: PersonWhereInput
    data: XOR<PersonUpdateWithoutGuestLoadsInput, PersonUncheckedUpdateWithoutGuestLoadsInput>
  }

  export type PersonUpdateWithoutGuestLoadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutPersonNestedInput
    invites?: InviteUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutPersonNestedInput
    user?: UserUpdateOneWithoutPersonNestedInput
    created_meetups?: MeetupUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutPersonNestedInput
  }

  export type PersonUncheckedUpdateWithoutGuestLoadsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    gender?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    cpf?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutPersonNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutPersonNestedInput
    invites?: InviteUncheckedUpdateManyWithoutPersonNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutPersonNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutPersonNestedInput
    created_meetups?: MeetupUncheckedUpdateManyWithoutCreatorNestedInput
    followingMeetups?: MeetupFollowerUncheckedUpdateManyWithoutPersonNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutPersonNestedInput
  }

  export type SessionCreateManyUserInput = {
    id: string
    expiresAt: Date | string
    token: string
    createdAt?: Date | string
    updatedAt?: Date | string
    ipAddress?: string | null
    userAgent?: string | null
  }

  export type AccountCreateManyUserInput = {
    id: string
    accountId: string
    providerId: string
    accessToken?: string | null
    refreshToken?: string | null
    idToken?: string | null
    accessTokenExpiresAt?: Date | string | null
    refreshTokenExpiresAt?: Date | string | null
    scope?: string | null
    password?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    token?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountId?: StringFieldUpdateOperationsInput | string
    providerId?: StringFieldUpdateOperationsInput | string
    accessToken?: NullableStringFieldUpdateOperationsInput | string | null
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    idToken?: NullableStringFieldUpdateOperationsInput | string | null
    accessTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    refreshTokenExpiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    password?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupAdminCreateManyPersonInput = {
    id?: string
    meetupId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateManyPersonInput = {
    id?: string
    meetupId: string
    meetupRoleId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCreateManyPersonInput = {
    id?: string
    meetupId: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CertificateCreateManyPersonInput = {
    id?: string
    meetupId: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupMediaCreateManyPersonInput = {
    id?: string
    meetupId: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestLoadCreateManyPersonInput = {
    id?: string
    link: string
    meetupId: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupCreateManyCreatorInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    categoryId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupFollowerCreateManyPersonInput = {
    id?: string
    meetupId: string
    createdAt?: Date | string
  }

  export type MeetupNotificationCreateManyPersonInput = {
    id?: string
    text: string
    meetupId: string
    createdAt?: Date | string
  }

  export type MeetupAdminUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutMeetupAdminsNestedInput
  }

  export type MeetupAdminUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupAdminUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutSubscriptionsNestedInput
    meetupRole?: MeetupRoleUpdateOneRequiredWithoutSubscriptionsNestedInput
    subscriptionPayments?: SubscriptionPaymentUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    meetupRoleId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    meetupRoleId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type InviteUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutCertificatesNestedInput
  }

  export type CertificateUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupMediaUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutMeetupMediasNestedInput
  }

  export type MeetupMediaUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupMediaUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestLoadUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutGuestLoadsNestedInput
  }

  export type GuestLoadUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestLoadUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupFollowerUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutFollowersNestedInput
  }

  export type MeetupFollowerUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupFollowerUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupNotificationUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetup?: MeetupUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type MeetupNotificationUncheckedUpdateWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupNotificationUncheckedUpdateManyWithoutPersonInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupCreateManyAddressInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    categoryId: string
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    category?: CategoryUpdateOneRequiredWithoutMeetupsNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateManyWithoutAddressInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    categoryId?: StringFieldUpdateOperationsInput | string
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupAdminCreateManyMeetupInput = {
    id?: string
    personId: string
    role: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionCreateManyMeetupInput = {
    id?: string
    personId: string
    meetupRoleId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InviteCreateManyMeetupInput = {
    id?: string
    personId: string
    link: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CertificateCreateManyMeetupInput = {
    id?: string
    personId: string
    link: string
    securityCode: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupMediaCreateManyMeetupInput = {
    id?: string
    personId: string
    link: string
    datetime: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type GuestLoadCreateManyMeetupInput = {
    id?: string
    link: string
    personId: string
    datetime: Date | string
    count: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupFollowerCreateManyMeetupInput = {
    id?: string
    personId: string
    createdAt?: Date | string
  }

  export type MeetupInviteSheetCreateManyMeetupInput = {
    id?: string
    link: string
  }

  export type MeetupNotificationCreateManyMeetupInput = {
    id?: string
    text: string
    personId: string
    createdAt?: Date | string
  }

  export type MeetupAdminUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutMeetupAdminsNestedInput
  }

  export type MeetupAdminUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupAdminUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutSubscriptionsNestedInput
    meetupRole?: MeetupRoleUpdateOneRequiredWithoutSubscriptionsNestedInput
    subscriptionPayments?: SubscriptionPaymentUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupRoleId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupRoleId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutInvitesNestedInput
  }

  export type InviteUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InviteUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutCertificatesNestedInput
  }

  export type CertificateUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CertificateUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    securityCode?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupMediaUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutMeetupMediasNestedInput
  }

  export type MeetupMediaUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupMediaUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestLoadUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutGuestLoadsNestedInput
  }

  export type GuestLoadUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GuestLoadUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    datetime?: DateTimeFieldUpdateOperationsInput | Date | string
    count?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupFollowerUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutFollowingMeetupsNestedInput
  }

  export type MeetupFollowerUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupFollowerUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupInviteSheetUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type MeetupInviteSheetUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type MeetupInviteSheetUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    link?: StringFieldUpdateOperationsInput | string
  }

  export type MeetupNotificationUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type MeetupNotificationUncheckedUpdateWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupNotificationUncheckedUpdateManyWithoutMeetupInput = {
    id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionCreateManyMeetupRoleInput = {
    id?: string
    personId: string
    meetupId: string
    certificateLink?: string | null
    presenceConfirmation?: boolean | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionUpdateWithoutMeetupRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    person?: PersonUpdateOneRequiredWithoutSubscriptionsNestedInput
    meetup?: MeetupUpdateOneRequiredWithoutSubscriptionsNestedInput
    subscriptionPayments?: SubscriptionPaymentUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateWithoutMeetupRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscriptionPayments?: SubscriptionPaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
  }

  export type SubscriptionUncheckedUpdateManyWithoutMeetupRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    personId?: StringFieldUpdateOperationsInput | string
    meetupId?: StringFieldUpdateOperationsInput | string
    certificateLink?: NullableStringFieldUpdateOperationsInput | string | null
    presenceConfirmation?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MeetupCreateManyCategoryInput = {
    id?: string
    title: string
    description?: string | null
    locationName?: string | null
    start?: Date | string | null
    end?: Date | string | null
    addressId?: string | null
    creatorId: string
    certificateModelId?: string | null
    image?: string | null
    workload?: number | null
    status?: $Enums.MeetupStatus
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type MeetupUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: AddressUpdateOneWithoutMeetupsNestedInput
    meetupAdmins?: MeetupAdminUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUpdateManyWithoutMeetupNestedInput
    invites?: InviteUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUpdateManyWithoutMeetupNestedInput
    creator?: PersonUpdateOneRequiredWithoutCreated_meetupsNestedInput
    followers?: MeetupFollowerUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUpdateManyWithoutMeetupNestedInput
    certificateModel?: CertificateModelUpdateOneWithoutMeetupNestedInput
    notifications?: MeetupNotificationUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    meetupAdmins?: MeetupAdminUncheckedUpdateManyWithoutMeetupNestedInput
    subscriptions?: SubscriptionUncheckedUpdateManyWithoutMeetupNestedInput
    invites?: InviteUncheckedUpdateManyWithoutMeetupNestedInput
    certificates?: CertificateUncheckedUpdateManyWithoutMeetupNestedInput
    meetupMedias?: MeetupMediaUncheckedUpdateManyWithoutMeetupNestedInput
    guestLoads?: GuestLoadUncheckedUpdateManyWithoutMeetupNestedInput
    followers?: MeetupFollowerUncheckedUpdateManyWithoutMeetupNestedInput
    inviteSheets?: MeetupInviteSheetUncheckedUpdateManyWithoutMeetupNestedInput
    notifications?: MeetupNotificationUncheckedUpdateManyWithoutMeetupNestedInput
  }

  export type MeetupUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    locationName?: NullableStringFieldUpdateOperationsInput | string | null
    start?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    end?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    addressId?: NullableStringFieldUpdateOperationsInput | string | null
    creatorId?: StringFieldUpdateOperationsInput | string
    certificateModelId?: NullableStringFieldUpdateOperationsInput | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    workload?: NullableIntFieldUpdateOperationsInput | number | null
    status?: EnumMeetupStatusFieldUpdateOperationsInput | $Enums.MeetupStatus
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPaymentCreateManySubscriptionInput = {
    id?: string
    paymentId: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPaymentUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payment?: PaymentUpdateOneRequiredWithoutSubscriptionPaymentsNestedInput
  }

  export type SubscriptionPaymentUncheckedUpdateWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPaymentUncheckedUpdateManyWithoutSubscriptionInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPaymentCreateManyPaymentInput = {
    id?: string
    subscriptionId: string
    price: Decimal | DecimalJsLike | number | string
    paymentStatus?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SubscriptionPaymentUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    subscription?: SubscriptionUpdateOneRequiredWithoutSubscriptionPaymentsNestedInput
  }

  export type SubscriptionPaymentUncheckedUpdateWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubscriptionPaymentUncheckedUpdateManyWithoutPaymentInput = {
    id?: StringFieldUpdateOperationsInput | string
    subscriptionId?: StringFieldUpdateOperationsInput | string
    price?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    paymentStatus?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}