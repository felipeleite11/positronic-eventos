generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma/generated"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum MeetupStatus {
  created
  in_subscription
  in_progress
  finished
  cancelled
}

model User {
  id            String    @id
  name          String    @db.Text
  email         String
  emailVerified Boolean   @default(false)
  image         String?   @db.Text
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  person        Person?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?  @db.Text
  userAgent String?  @db.Text
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String    @db.Text
  providerId            String    @db.Text
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?   @db.Text
  refreshToken          String?   @db.Text
  idToken               String?   @db.Text
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?   @db.Text
  password              String?   @db.Text
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String   @db.Text
  value      String   @db.Text
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Person {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String?
  gender    String?
  birthdate DateTime?
  cpf       String?   @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String?   @unique @map("user_id")

  // Relacionamentos
  meetupAdmins     MeetupAdmin[]
  subscriptions    Subscription[]
  invites          Invite[]
  certificates     Certificate[]
  meetupMedias     MeetupMedia[]
  guestLoads       GuestLoad[]
  user             User?                @relation(fields: [userId], references: [id])
  created_meetups  Meetup[]
  followingMeetups MeetupFollower[]
  notifications    MeetupNotification[]

  @@map("person")
}

model Address {
  id         String   @id @default(cuid())
  mapLink    String?  @map("map_link")
  state      String
  city       String
  district   String
  street     String
  number     String
  complement String?
  zipcode    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  meetups Meetup[]

  @@map("address")
}

model Meetup {
  id                 String       @id @default(cuid())
  title              String
  description        String?      @db.Text
  locationName       String?      @map("location_name")
  start              DateTime?
  end                DateTime?
  addressId          String?      @map("address_id")
  categoryId         String       @map("category_id")
  creatorId          String       @map("creator_id")
  certificateModelId String?      @unique @map("certificate_model_id")
  image              String?
  workload           Int?
  status             MeetupStatus @default(created)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  // Relacionamentos
  address          Address?             @relation(fields: [addressId], references: [id], onDelete: Cascade)
  meetupAdmins     MeetupAdmin[]
  subscriptions    Subscription[]
  invites          Invite[]
  certificates     Certificate[]
  meetupMedias     MeetupMedia[]
  guestLoads       GuestLoad[]
  category         Category             @relation(fields: [categoryId], references: [id])
  creator          Person               @relation(fields: [creatorId], references: [id])
  followers        MeetupFollower[]
  inviteSheets     MeetupInviteSheet[]
  certificateModel CertificateModel?    @relation(fields: [certificateModelId], references: [id])
  notifications    MeetupNotification[]

  @@map("meetup")
}

model MeetupNotification {
  id        String   @id @default(cuid())
  text      String   @db.Text
  meetupId  String   @map("meetup_id")
  personId  String   @map("person_id")
  createdAt DateTime @default(now())

  // Relacionamentos
  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@map("meetup_notification")
}

model CertificateModel {
  id        String   @id @default(cuid())
  imageLink String   @map("image_link")
  content   String
  createdAt DateTime @default(now())

  meetup Meetup?

  @@map("meetup_certificate_model")
}

model MeetupInviteSheet {
  id   String @id @default(cuid())
  link String

  // Relacionamentos
  meetupId String @map("meetup_id")
  meetup   Meetup @relation(fields: [meetupId], references: [id])

  @@map("meetup_invite_sheet")
}

model MeetupRole {
  id                String   @id @default(cuid())
  name              String
  subscriptionPrice Decimal  @map("subscription_price") @db.Decimal(10, 2)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relacionamentos
  subscriptions Subscription[]

  @@map("meetup_role")
}

model MeetupAdmin {
  id        String   @id @default(cuid())
  meetupId  String   @map("meetup_id")
  personId  String   @map("person_id")
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@unique([meetupId, personId])
  @@map("meetup_admin")
}

model MeetupFollower {
  id        String   @id @default(cuid())
  meetupId  String   @map("meetup_id")
  personId  String   @map("person_id")
  createdAt DateTime @default(now())

  // Relacionamentos
  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  // Garantir que uma pessoa não possa seguir o mesmo meetup mais de uma vez
  @@unique([meetupId, personId])
  @@map("meetup_follower")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento
  meetups Meetup[]

  @@map("category")
}

model Subscription {
  id                   String   @id @default(cuid())
  personId             String   @map("person_id")
  meetupId             String   @map("meetup_id")
  meetupRoleId         String   @map("meetup_role_id")
  certificateLink      String?  @map("certificate_link")
  presenceConfirmation Boolean? @map("presence_confirmation")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relacionamentos
  person               Person                @relation(fields: [personId], references: [id], onDelete: Cascade)
  meetup               Meetup                @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  meetupRole           MeetupRole            @relation(fields: [meetupRoleId], references: [id], onDelete: Restrict)
  subscriptionPayments SubscriptionPayment[]

  @@unique([personId, meetupId])
  @@map("subscription")
}

model Invite {
  id        String   @id @default(cuid())
  personId  String   @map("person_id")
  meetupId  String   @map("meetup_id")
  link      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)

  @@unique([personId, meetupId])
  @@map("invite")
}

model Payment {
  id        String   @id @default(cuid())
  // Adicione aqui outras colunas específicas do pagamento se necessário
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  subscriptionPayments SubscriptionPayment[]

  @@map("payment")
}

model SubscriptionPayment {
  id             String   @id @default(cuid())
  subscriptionId String   @map("subscription_id")
  paymentId      String   @map("payment_id")
  price          Decimal  @db.Decimal(10, 2)
  paymentStatus  Boolean  @default(false) @map("payment_status")
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relacionamentos
  subscription Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  payment      Payment      @relation(fields: [paymentId], references: [id], onDelete: Restrict)

  @@map("subscription_payment")
}

model Certificate {
  id           String   @id @default(cuid())
  personId     String   @map("person_id")
  meetupId     String   @map("meetup_id")
  link         String
  securityCode String   @unique @map("security_code")
  datetime     DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relacionamentos
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)

  @@unique([personId, meetupId])
  @@map("certificate")
}

model MeetupMedia {
  id        String   @id @default(cuid())
  meetupId  String   @map("meetup_id")
  personId  String   @map("person_id")
  link      String
  datetime  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@map("meetup_media")
}

model GuestLoad {
  id        String   @id @default(cuid())
  link      String
  meetupId  String   @map("meetup_id")
  personId  String   @map("person_id")
  datetime  DateTime
  count     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  meetup Meetup @relation(fields: [meetupId], references: [id], onDelete: Cascade)
  person Person @relation(fields: [personId], references: [id], onDelete: Cascade)

  @@map("guest_load")
}
